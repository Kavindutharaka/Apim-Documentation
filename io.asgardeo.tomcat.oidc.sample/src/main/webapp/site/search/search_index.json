{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"page-not-found/","title":"Page not found","text":"<p> Page Not Found <p>Sorry, but the page you are looking for does not exist, has been removed, renamed, or is temporarily unavailable. Please try using one of the navigation links above or the search bar in the top right corner.</p> <p>For further inquiries, reach us at the <code>help-asgardeo</code> channel in the WSO2 Discord server.             Alternatively, you can reach out to the Asgardeo support team.</p> </p>"},{"location":"api-manager/","title":"Home","text":""},{"location":"api-manager/#api-home-page","title":"API Home Page","text":""},{"location":"api-manager/apim-revamped/general-config-migration/","title":"Configuration Migration Process","text":"<p>When migrating API-M from an older version to a newer one, it is crucial to move the configurations enabled in the older version to the newer version to maintain the behavior of the features of the new product as same in previous version.</p> <p>Under this step we will move the configurations in the old <code>deployment.toml</code> file to the new <code>deployment.toml</code> file. However, this is not straight forward and several considerations must be taken into account:</p> <ul> <li>The configuration names in the older version may have undergone name changes in the newer version.</li> <li>Some configurations available in the older version may not be present in the newer version.</li> <li>Behavior of several configurations may have changed between versions.</li> </ul> <p>Hence, you may have to rename some configurations, change some configurations while moving them and will be able to drop some configurations.</p>"},{"location":"api-manager/apim-revamped/general-config-migration/#guidelines","title":"Guidelines","text":"<ul> <li> <p>Do not copy entire configuration files from the current version of WSO2 API Manager to the new one, as some configuration files may have changed. Instead, redo the configuration changes in the new configuration files.</p> </li> <li> <p>You do not have to add/move a configuration to the <code>deployment.toml</code> file unless you want to modify the server\u2019s default value. Default values for all the configurations can be found in the <code>&lt;API-M-HOME&gt;/repository/resources/conf/default.json</code> file.</p> </li> <li> <p>Follow the the steps under configuration migration to smoothly migrate the old configurations to the new server.</p> </li> <li> <p>If you currently operate a distributed deployment and are planning to transition to a new distributed deployment, you must transfer configurations between each existing profile and its corresponding new profile. Essentially, you need to repeat the steps outlined under configuration migration for each profile.</p> </li> <li> <p>In case of a K8s deployment, you might not have separate TOML files, and instead, you may have configured the configurations in the HELM <code>values.yaml</code>. In such cases, proceed with the configuration migration steps, but make adjustments where necessary and do the changes directly within the YAML files as required.</p> </li> <li> <p>You may familiarize yourself with the New Configuration Model to gain a clear understanding of how the APIM config model operates(This is a must if you are migrating from a version prior to 3.x.).</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-data-migration/","title":"Data Migration Process","text":"<p>This document outlines the data migration process required when upgrading APIM from an older version to a newer version. The data migration process involves ensuring the compatibility of the databases with the new APIM version.</p> <p>Please note that no new databases will be created during the data migration process. Instead, the existing databases will be modified to accommodate the new version and these modifications may include creating new tables, altering existing ones, and transferring data between tables. Therefore, after data migration, the new version will function using the previous databases.</p> <p>This guide offers a general overview of the data migration process and its steps. It also provides a set of guidelines for executing the data migration.</p> <p>Important</p> <p>From APIM 4.3.0 onwards, running a migration client is no longer required for data migration. Instead, a database script will be used to update the existing table schema with necessary changes, which includes the addition of new columns and new tables.</p>"},{"location":"api-manager/apim-revamped/general-data-migration/#data-migration-steps","title":"Data Migration Steps","text":"<ol> <li> <p>Running Database Scripts:</p> </li> <li> <p>This step involves running the database scripts on the registry database(shared_db) to add missing registry indices.</p> </li> <li> <p>Migration of Identity Data:</p> </li> <li> <p>This step involves the migration of data associated with identity components. This mainly involves creating new tables, altering existing ones, and transferring data between tables.</p> </li> <li>This is applicable only for cases where inbuilt resident key manager(KM) is used; otherwise, if you have configured WSO2 IS as KM, you must independently migrate IS as KM first.</li> <li>Use the <code>Identity Migration Client</code> to execute the migration of identity data.</li> <li>Additional guidance on running the client can be found in version-specific data migration documents.</li> <li> <p>Note that depending on the number of records in the identity tables, the identity data migration will take a considerable amount of time to finish. Do not stop the server during the migration process and wait until the migration process finishes completely and the server gets started.</p> </li> <li> <p>Migration of APIM Data:</p> <ul> <li>This step involves the migration of data associated with API-M components. This mainly involves creating new tables, altering existing ones, and transferring data between tables.</li> <li>Use the <code>APIM Migration Client</code> to perform the migration of APIM data.</li> <li>Additional guidance on running the client can be found in version-specific data migration documents.</li> <li>Note that depending on the number of records in the tables, the APIM data migration will take a considerable amount of time to finish. Do not stop the server during the migration process and wait until the migration process finishes completely and the server gets started.</li> </ul> </li> </ol>"},{"location":"api-manager/apim-revamped/general-data-migration/#guidelines","title":"Guidelines","text":"<ol> <li> <p>Before running each migration client, create a backup of all the databases.</p> </li> <li> <p>If you are migrating to a distributed deployment, you are only required to run the data migration on the Control Plane profile. In other words, out of the various API-M profile packs you have for each profile, run the data migration only on a Control Plane pack.</p> </li> <li> <p>Regardless of your deployment environment, it is advisable to conduct the data migration on a separate VM/local machine. Once the data migration is completed, you can direct the production environment deployment to the migrated data source. For more information please refer Data Migration on Different Environments.</p> </li> <li> <p>If you have many APIs, there could be a high load on the database during the migration. Hence, increase the database pool size during migration. Please refer Tuning JDBC Pool Configurations for more details.</p> </li> <li> <p>Prior to API-M data migration, as a pre-migration step, validate your old data using the available pre-validators.       Available API Validators  API Validators CLI Tag Pre-validator Purpose <code>apiDefinitionValidation</code> API Definition Validator Validates if the API definitions are up to standards so that issues are not encountered during migration. Validations are done to check if APIs have valid OpenAPI, WSDL, Streaming API, or GraphQL API definitions. <code>apiAvailabilityValidation</code> API Availability Validator Validates the API availability in the database with respect to the API artifacts in the registry in order to verify there are no corrupted entries in the registry. <code>apiResourceLevelAuthSchemeValidation</code> API Resource Level Auth Scheme Validator Usage of resource level security with <code>Application</code> and <code>Application User</code> in 2.x versions, is not supported. This pre-validation checks and warns about such APIs with unsupported resource-level auth schemes. <code>apiDeployedGatewayTypeValidation</code> API Deployed Gateway Type Validator If the deployed Gateway type of an API is given as <code>none</code>, deployment of that API will be skipped at migration. This pre-validation warns on such APIs having deployed Gateway type as <code>none</code>. <p> Available Application Validators  Application Validators CLI Tag Pre-validator Purpose <code>appThirdPartyKMValidation</code> Third Party Key Manager Usage Validator If third party key managers were used with the old API-M, they may need to be reconfigured for the new API-M version. This pre-validation checks the usage of the built-in key manager and warns otherwise. <li> <p>Commands to run pre-validation can be found in version specific data migration documents.</p> </li> <li> <p>You can run data validation on all the existing validators or selected validators. If you only use the <code>-DrunPreMigration</code> command, all existing validations will be enabled. If not, you can provide a specific validator, such as <code>-DrunPreMigration=apiDefinitionValidation</code>, which only validates the API definitions.</p> </li> <li> <p>If you want to save the invalid API definitions, save the invalid API definitions to the local file system during this data validation step. Use the <code>-DsaveInvalidDefinition</code> option for this as follows. The invalid definitions will be stored under a folder named <code>&lt;API-M_HOME&gt;/invalid-swagger-definitions</code> in the form of <code>&lt;API_UUID&gt;.json</code>. Then you can manually correct these definitions.</p> </li> <li> <p>Check the server logs and verify if there are any error logs. If you have encountered any errors in the API definitions, you have to correct them manually on the old version before the component migration.</p> </li> <li> <p>If you are using PostgreSQL , the database user should have the 'superuser' permission to migrate the API Manager Databases. If the user is not already a superuser, assign the permission before starting the migration.     <pre><code>ALTER USER &lt;user&gt; WITH SUPERUSER;\n</code></pre></p> </li>"},{"location":"api-manager/apim-revamped/general-extensions-and-customizations/","title":"Extensions and Customizations Migration Process","text":"<p>This document outlines the migration process required to migrate extensions and customizations when upgrading APIM from an older version to a newer version.</p> <p>It's essential to note that migrating extensions and customizations is more complex than resource and artifact migration. Simply copying and pasting custom jars or dependency jars between versions may not be enough due to potential changes in APIs and extension points. As a result, the level of effort in this step will vary based on the extent of customization in your current API-M Deployment.</p>"},{"location":"api-manager/apim-revamped/general-extensions-and-customizations/#guidelines","title":"Guidelines","text":"<ul> <li> <p>Identify all the customizations you have used in the current API-M deployment.</p> </li> <li> <p>Check if your customizations are now supported out-of-the-box in the latest version. You can refer to the What has Changed document and the official API-M documentation for this purpose. If you need assistance, don't hesitate to reach out to WSO2 Support.</p> </li> <li> <p>If your customizations are already available in the latest version, you can ignore these customizations in the new version.</p> </li> <li> <p>If any custom requirement is not available in the latest version, you'll need to migrate the customization to support the latest product version.</p> </li> <li> <p>If you currently operate a distributed deployment and are planning to transition to a distributed deployment, you are required to move all customizations and extensions from each existing profile and its corresponding new profile.</p> </li> <li> <p>In case of a K8s deployment, in the previous version's K8s environment, you may have mounted custom artifacts and/or you may have created custom product Docker images with the jars embedded. You can adopt the same approach used in previous versions when applying customizations.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-guidelines/","title":"API-M Migration Guidelines","text":"<p>This section contains the general guidelines and information related to upgrading WSO2 API Manager.  Before you upgrade your production environment, please take a moment to go through the following.</p>"},{"location":"api-manager/apim-revamped/general-guidelines/#importance-of-upgrading","title":"Importance of Upgrading","text":"<p>There are numerous compelling reasons to consider upgrading the WSO2 API Manager to its latest version. These reasons include but are not limited to the following. </p> <ul> <li> <p>New Features: Embrace the latest version to leverage new features that enhance the overall functionality of the product.</p> </li> <li> <p>Security and Bug Fixes: Ensure the security and reliability of your system by accessing critical bug fixes and security updates available in the latest version.</p> </li> <li> <p>Approaching End of Life: If your current product version is approaching its end of life, upgrading ensures continued support and maintenance.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-guidelines/#understanding-api-m-migration-process","title":"Understanding API-M Migration Process","text":"<p>Upgrading the API-M involves four key steps, outlined below. To ensure a successful migration to the latest version, it's crucial to execute all of these steps in sequence.</p> <ol> <li>Configuration Migration: This step includes transferring configurations enabled in the older version to the newer version.</li> <li>Extensions and Customizations Migration: This step involves migrating customizations available in the old version to the new version.</li> <li>Resource and Artifact Migration: Involves migrating various resources and artifacts from the older version of API-M to the newer one.</li> <li>Data Migration: Ensures the compatibility of databases with the new APIM version.</li> </ol>"},{"location":"api-manager/apim-revamped/general-guidelines/#get-wso2-support","title":"Get WSO2 Support","text":"<ul> <li> <p>If you already have a WSO2 Subscription, you can reach out to our support team through your support account to receive assistance with the migration.</p> </li> <li> <p>If you require a zero downtime migration, you must contact WSO2 support. We do not recommend proceeding with zero downtime migration without WSO2 support. You can contact WSO2 Support for assistance.</p> </li> <li> <p>If you are migrating API-M from a version older than 3.2.0, contact the WSO2 Support Team to obtain instructions further instructions.</p> </li> <li> <p>If you are migrating IS as KM from a version older than 5.10.0 contact the WSO2 Support Team to obtain instructions further instructions.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/general-guidelines/#planning-the-upgrade","title":"Planning the Upgrade","text":"<ol> <li> <p>Always plan to migrate to the latest version as the latest fixes and new features are available in the latest version. If you already have a WSO2 subscription, you can use the Update Management Tool(UMT) to get any fixes or latest updates for this release. If you have a particular requirement to migrate to an intermediate version, contact WSO2 Support.</p> <p>Note - Migrating the production environment requires additional hardware/VM resources because both the old environment and the new environment will be running until all the traffic is routed to the new environment.</p> </li> <li> <p>List down the functional and non-functional use cases in your deployment and create test cases for them. This step is crucial to verify that the migrated environment works as expected.</p> </li> <li> <p>Once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to undertake the following steps:</p> </li> <li> <p>Firstly, create a deployment using the new API-M version, similar to your current deployment. </p> </li> <li>Direct this deployment to a new test database that supports the new API-M version.</li> <li>Then, conduct thorough testing of the new API-M functionalities alongside your configurations and customizations (excluding your data).</li> <li>Once you have verified that all functionalities operate as expected, you may proceed with the data migration.</li> <li>Following the completion of data migration, redirect the new deployment to your migrated data source as the last step.</li> </ol> <p></p> <ol> <li> <p>Start the migration from the lowest environment (e.g., dev) and continue up to the highest before the production (e.g., pre-prod). Run the test cases in the migrated environments to confirm that your functional and non-functional requirements are met in the migrated environment.</p> </li> <li> <p>Before you carry out the production migration, run a pilot migration on your pre-prod environment. </p> <ul> <li> <p>It will be ideal if the pre-prod environment is similar to the production environment.</p> </li> <li> <p>If possible, restore a database dump of the production environment to the pre-prod environment and perform the pilot migration.</p> </li> <li> <p>If the production database dump cannot be used, at least ensure that you have a sufficient amount of data in the database to mimic the production environment.</p> </li> </ul> </li> <li> <p>When you follow the above instructions, you can get a rough estimate of the time for the final production update, and you can allocate time slots based on the above analysis. WSO2 recommends that you perform the migration while the system is under minimum traffic. </p> </li> <li> <p>After you have completed the above instructions and are satisfied with the outcome, proceed with the production migration process. After the migration is complete, verify the migration process using the following instructions.</p> </li> <li> <p>Monitor the system health (CPU, memory usage, etc.).</p> </li> <li>Monitor the WSO2 logs for errors.</li> </ol>"},{"location":"api-manager/apim-revamped/general-guidelines/#required-skill-set-and-available-training","title":"Required Skill Set and Available Training","text":"<p>For more information about available training, please refer https://wso2.com/training/</p>"},{"location":"api-manager/apim-revamped/general-guidelines/#migration-catalog-structure","title":"Migration Catalog Structure","text":"<p>Once you have gone through the above, you can proceed with the migration by referring to the version specific migration documents in the migration catalog. The structure of the migration catalog is as follows, and please refer to the documents in the order given within the brackets.</p> <pre><code>\u251c\u2500\u2500 migration-catalog\n\u2502   \u251c\u2500\u2500 upgrading-to-apim-4xx\n\u2502   |   \u251c\u2500\u2500 version-specific-guidelines.md (1)\n\u2502   \u2502   \u251c\u2500\u2500 upgrading-from-3xx-to-4xx\n\u2502   |   \u2502   \u251c\u2500\u2500 upgrading-from-3xx-to-4xx.md (2)\n\u2502   |   \u2502   \u251c\u2500\u2500 config-migration.md (3)\n\u2502   |   \u2502   \u251c\u2500\u2500 resource-and-artifact-migration.md (4)\n\u2502   |   \u2502   \u251c\u2500\u2500 extensions-and-customizations-migration.md (5)\n\u2502   |   \u2502   \u251c\u2500\u2500 data-migration.md (6)\n\u2502   |   \u2502   \u251c\u2500\u2500 server-startup-actions.md (7)\n</code></pre>"},{"location":"api-manager/apim-revamped/general-resource-and-artifact-migration/","title":"Resource and Artifact Migration Process","text":"<p>During this step, we'll be migrating various resources and artifacts from the older version of API-M to the newer one. </p> <p>You will be able to simply copy certain resources from the previous API-M and place them in the appropriate folders in the newer version. Please consult the steps under resource and artifact migration to determine precisely what needs to be copied and transferred to the new version.</p> <p>Please note that this step doesn't cover migrating customizations and extensions, as it will be addressed later.</p>"},{"location":"api-manager/apim-revamped/general-resource-and-artifact-migration/#guidelines","title":"Guidelines","text":"<ul> <li>Please only transfer the specified resources and artifacts outlined in this step. Refrain from moving any other resources between versions, as certain resources are automatically generated within the new version during the data migration process. </li> <li> <p>For instance, you should not manually transfer tenant folders from the old version to the new one. These folders will be created automatically during the subsequent data migration process, which is explained later.</p> </li> <li> <p>If you are using a K8s deployment, you may need to create a custom product image by copying the required resources and artifacts, and then use that image for deployment.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/troubleshooting-and-FAQs/","title":"Troubleshooting and FAQ","text":"<p>This document contains all the FAQs and general troubleshooting guidelines.</p>"},{"location":"api-manager/apim-revamped/troubleshooting-and-FAQs/#troubleshooting","title":"Troubleshooting","text":"<ol> <li> <p>Before running the identity data migration and APIM data migration, it is recommended to create database dumps. If this step fails, do not proceed with a corrupt database; instead, restore it to its previous state.</p> </li> <li> <p>When running the identity data migration, if you encounter the following error message, follow the steps in this section. Note that this error could occur only if the identity tables contain a huge volume of data.</p> <p>Sample exception stack trace is given below.</p> <p><pre><code>ERROR {org.wso2.carbon.registry.core.dataaccess.TransactionManager} -  Failed to start new registry transaction. {org.wso2.carbon.registry.core.dataaccess.TransactionManager} org.apache.tomcat.jdbc.pool.PoolExhaustedException: [pool-30-thread-11] Timeout: Pool empty. Unable to fetch a connection in 60 seconds, none available[size:50; busy:50; idle:0; lastwait:60000\n</code></pre> A.  Add the following property in <code>&lt;API-M_HOME&gt;/repository/conf/deployment.toml</code> to a higher value (eg 10) <pre><code>[indexing]\nfrequency = 10\n</code></pre></p> <p>B.  Re-run the command above. Make sure to revert the change done 'A' after the migration is complete.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/what-has-changed/","title":"What has Changed ?","text":"<p>This offers an overview of the modifications in features and behaviors between each APIM version and its predecessor. It is recommended to review these changes before migrating to newer versions, as certain features and behaviors present in older versions may have been altered or removed in the updated versions.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-420","title":"Major Changes in API Manager 4.2.0","text":"<ul> <li> <p>Prior to WSO2 API Manager 4.2.0, the tenant configurations listed below were persisted only in the registry and only accessible via the Carbon Console. With the 4.2.0 release, these configurations are migrated to the <code>tenant-conf.json</code> file, and support is enabled to manage these through the Admin Portal (Advanced Configuration Section).</p> </li> <li> <p>Self Sign Up Config - Self-signup is enabled out-of-the-box not only for the super tenant, but also for the other tenants. The 'Internal/subscriber' role is then taken from the <code>Advanced Configurations \u2192 DefaultRoles \u2192 SubscriberRole</code> when creating a tenant. In addition, the <code>sign-up-config.xml</code> file is removed along with the connection with the registry. For more information, see Disabling or Enabling Self Signup.</p> </li> <li> <p>Life Cycle Config - XML configuration is converted to JSON format. The life cycle changes can then be managed via <code>Advanced Configurations \u2192 LifeCycle</code> via the Admin Portal. The <code>APILifeCycle.xml</code> file is removed along with the connection with the registry. For more information, see Customize API Life Cycle.</p> </li> <li> <p>From WSO2 API Manager 4.2.0 onwards, correlation logs can be enabled without restarting the server. Newly added CorrelationConfigManager will handle the configuration updates from the DevOps API.</p> </li> <li> <p>The schema name in the challenge string for basic auth will be changed from \"Basic Auth\" to \"Basic\" according to IANA standards. Therefore, when using the authorization header for REST calls, the header should be renamed to \"Basic\".</p> <p>Authorization: Basic  <li> <p>Prior to API Manager 4.2.0, only a single registry handler property with nested elements can be added. From API Manager 4.2.0 onwards multiple registry handler properties with nested elements can be added.</p> </li> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 4.2.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-410","title":"Major Changes in API Manager 4.1.0","text":"<ul> <li>With 4.1.0 release, WSO2 API manager has realigned its previous API level mediation policies feature to a more sophisticated policy feature which provides support for not only mediation policies, but a vast number of different use cases. Please refer About this release fro more information.</li> </ul> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 4.1.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-400","title":"Major Changes in API Manager 4.0.0","text":"<ul> <li> <p>Prior to WSO2 API Manager 4.0.0, the distributed deployment consisted of five main product profiles, namely Publisher, Developer Portal, Gateway, Key Manager, and Traffic Manager. However, the new architecture in API-M 4.0.0 only has three profiles, namely Gateway, Traffic Manager, and Control Plane.</p> </li> <li> <p>From API-M 4.0.0 onwards API Manager offers analytics as a cloud service. So, APIM analytics won't work if you simply migrate the old analytics configurations to the new version. Further, as the on-premise analytics data cannot be migrated to the Cloud, you need to maintain the old analytics server and keep the UI running for as long as you need that data (e.g. 3 months) after migrating to the new version of analytics in WSO2 API-M 4.0.0. You need to register with the analytics cloud in order to use the new API Manager Analytics. Please follow the Analytics Documentation.</p> </li> <li> <p>From API-M 4.0.0 onwards, synapse artifacts have been removed from the file system and are managed via database. At server startup the synapse configs are loaded to the memory from the Traffic Manager.</p> </li> <li> <p>Token and Revoke endpoints have been removed from the Gateway artifacts from API-M 4.0.0 onwards. Use endpoints in the Control Plane instead instead of Gateway endpoints as shown below.     <pre><code>https://localhost:8243/token --&gt; https://localhost:9443/oauth2/token\nhttps://localhost:8243/revoke --&gt; https://localhost:9443/oauth2/revoke\n</code></pre></p> </li> <li> <p>From WSO2 API-M 4.0.0 onwards error responses in API calls has changed from XML to JSON format. If you have developed client applications to handle XML error responses you have to change the client applications to handle the JSON responses.</p> </li> </ul> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 4.0.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/what-has-changed/#major-changes-in-api-manager-320","title":"Major Changes in API Manager 3.2.0","text":"<ul> <li> <p>Starting from version 3.2.0 of API Manager, support for Third Party Key Managers was introduced, allowing integration with systems like WSO2 Identity Server (WSO2 IS) as well as other authorization servers like Keycloak, Okta, Auth0, and PingFederate.</p> </li> <li> <p>API key validation calls now occur against an in-memory store.</p> </li> <li>Backend JWT generation now takes place at the gateway in API-M 3.2.0, requiring custom JWT generators to be added to the Gateway Node.</li> <li>The Jaggery-based Admin portal UI has been replaced with a new ReactJS-based application from version 3.2.0 onwards.</li> <li>The need for a separate BPS engine for simple approval and rejection tasks has been eliminated in API-M 3.2.0, thanks to the introduction of an Approval Workflow Executor with an inbuilt workflow.</li> <li>Support for tag-wise grouping has been removed in API-M 3.2.0, with users encouraged to utilize API category-based grouping instead.</li> <li>The implicit grant type has been removed from API-M 3.2.0 onwards.</li> <li>Out-of-the-box support for generating Opaque (Reference) access tokens via the Developer Portal has been removed starting from WSO2 API Manager version 3.2.0, requiring application developers to create new applications that only generate JWT type access tokens.</li> </ul> <p>Please refer to WSO2 Official Documentation for more information on what has changed.</p> <p>Further, API-M 3.2.0 introduces a series of new configurations associated with the New Features Please review the feature documentation and configure them accordingly.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-to-apim-400/","title":"Upgrading to API Manager 4.0.0","text":"<p>To start the migration you are required to perform the following,</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Understand what has changed between the API-M versions</p> </li> <li>Go through what-has-changed document and identify major changes between versions.</li> <li> <p>Find more details about the API-M 4.0.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.0.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.0.0 to the latest U2 update level.</p> </li> <li> <p>If you have a planning to have a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> <li> <p>Follow the relevant out of the following to continue the migration process.</p> </li> <li>Upgrading from API-M 3.0.0 to 4.0.0</li> <li>Upgrading from API-M 3.1.0 to 4.0.0</li> <li>Upgrading from API-M 3.2.0 to 4.0.0</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.0.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.0.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.0.0 to API-M 4.0.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.0.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.0.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.0.0, you need to move those configuration values to API-M 4.0.0 in place of the default values.</p> <ul> <li>Default API-M 4.0.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li> <p><code>[[event_listener]]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.0.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.0.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.0.0, make sure to include the corresponding configuration from column two in the API-M 4.0.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.0.0, you can safely ignore them during migration as these are no longer required for API-M 4.0.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.0.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.0.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.0.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.0.0 to <code>true</code> in API-M 4.0.0. It is recommended not to configure this in API-M 4.0.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.0.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.0.0 that weren't transferred in the previous steps to API-M 4.0.0. You can identify and copy these remaining configurations and paste them into the API-M 4.0.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.0.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.0.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.0.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.0.0. But, if registry versioning was enabled by you in WSO2 API-M 3.0.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.9.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>-  name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.0.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.0.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.0.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.0.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.0.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</li> </ul> </li> <li> <p>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</p> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.0.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.0.0 and API-M version 4.0.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.0.0, you will have to add them again to API-M 4.0.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.0.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.0.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.0.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.0.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>Get the <code>reg-index.sql</code> script from here and run it against the database contains the registry and user management data (<code>SHARED_DB</code>).</p> <p>Note</p> <p>Note that depending on the number of records in the <code>REG_LOG</code> table, this script will take a considerable amount of time to finish. Do not stop the execution of script until it is completed.</p> </li> <li> <p>If you have multiple tenants (no need to do this step if you do not have multiple tenants), Get the <code>tenantloader-1.0.jar</code> file script from here and add it to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If you are working with a clustered/distributed API Manager setup, follow this step on the Store and Publisher nodes.</p> <ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.0.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> <li> <p>If you completed step 2, start the server. Once the server is started, stop it. Then, delete the <code>tenantloader-1.0.jar</code> file from the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.0.0</p> <p>With API-M 3.0.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-300-to-400/upgrading-from-300-to-400/","title":"Upgrading from API-M 3.0.0 to 4.0.0","text":"<p>To migrate from API-M 3.0.0 to 4.0.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.0.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.0.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.1.0 to API-M 4.0.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.0.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.0.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.0.0, you need to move those configuration values to API-M 4.0.0 in place of the default values.</p> <ul> <li>Default API-M 4.0.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li> <p><code>[[event_listener]]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.0.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.0.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.1.0, make sure to include the corresponding configuration from column two in the API-M 4.0.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.1.0, you can safely ignore them during migration as these are no longer required for API-M 4.0.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.1.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.0.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.0.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.1.0 to <code>true</code> in API-M 4.0.0. It is recommended not to configure this in API-M 4.0.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.0.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.1.0 that weren't transferred in the previous steps to API-M 4.0.0. You can identify and copy these remaining configurations and paste them into the API-M 4.0.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.0.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.0.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.0.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.0.0. But, if registry versioning was enabled by you in WSO2 API-M 3.1.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>-  name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.0.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.0.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.0.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.0.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.0.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</li> </ul> </li> <li> <p>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</p> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.0.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.1.0 and API-M version 4.0.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.1.0, you will have to add them again to API-M 4.0.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.0.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.0.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.0.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.0.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>Get the <code>reg-index.sql</code> script from here and run it against the database contains the registry and user management data (<code>SHARED_DB</code>).</p> <p>Note</p> <p>Note that depending on the number of records in the <code>REG_LOG</code> table, this script will take a considerable amount of time to finish. Do not stop the execution of script until it is completed.</p> </li> <li> <p>If you have multiple tenants (no need to do this step if you do not have multiple tenants), Get the <code>tenantloader-1.0.jar</code> file script from here and add it to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If you are working with a clustered/distributed API Manager setup, follow this step on the Store and Publisher nodes.</p> <ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.0.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> <li> <p>If you completed step 2, start the server. Once the server is started, stop it. Then, delete the <code>tenantloader-1.0.jar</code> file from the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.1.0</p> <p>With API-M 3.2.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.0.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-310-to-400/upgrading-from-310-to-400/","title":"Upgrading from API-M 3.1.0 to 4.0.0","text":"<p>To migrate from API-M 3.1.0 to 4.0.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.0.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.0.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.2.0 to API-M 4.0.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.0.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.0.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.0.0, you need to move those configuration values to API-M 4.0.0 in place of the default values.</p> <ul> <li>Default API-M 4.0.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li> <p><code>[[event_listener]]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.0.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.0.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.2.0, make sure to include the corresponding configuration from column two in the API-M 4.0.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.2.0, you can safely ignore them during migration as these are no longer required for API-M 4.0.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.2.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.0.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.0.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.2.0 to <code>true</code> in API-M 4.0.0. It is recommended not to configure this in API-M 4.0.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.0.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.2.0 that weren't transferred in the previous steps to API-M 4.0.0. You can identify and copy these remaining configurations and paste them into the API-M 4.0.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.0.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.0.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.0.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.0.0. But, if registry versioning was enabled by you in WSO2 API-M 3.2.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.0.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.0.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.0.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.0.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.0.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.0.0.x.jar</code> file, which is in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.0.0_HOME&gt;</code> directory.</li> </ul> </li> <li> <p>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</p> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.0.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.2.0 and API-M version 4.0.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.2.0, you will have to add them again to API-M 4.0.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.0.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.0.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.0.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.0.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>Get the <code>reg-index.sql</code> script from here and run it against the database contains the registry and user management data (<code>SHARED_DB</code>).</p> <p>Note</p> <p>Note that depending on the number of records in the <code>REG_LOG</code> table, this script will take a considerable amount of time to finish. Do not stop the execution of script until it is completed.</p> </li> <li> <p>If you have multiple tenants (no need to do this step if you do not have multiple tenants), Get the <code>tenantloader-1.0.jar</code> file script from here and add it to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If you are working with a clustered/distributed API Manager setup, follow this step on the Store and Publisher nodes.</p> <ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.0.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> <li> <p>If you completed step 2, start the server. Once the server is started, stop it. Then, delete the <code>tenantloader-1.0.jar</code> file from the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-400/upgrading-from-320-to-400/upgrading-from-320-to-400/","title":"Upgrading from API-M 3.2.0 to 4.0.0","text":"<p>To migrate from API-M 3.2.0 to 4.0.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-to-apim-410/","title":"Upgrading to API Manager 4.1.0","text":"<p>To start the migration you are required to perform the following,</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Understand what has changed between the API-M versions</p> </li> <li>Go through what-has-changed document and identify major changes between versions.</li> <li> <p>Find more details about the API-M 4.1.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.1.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.1.0 to the latest U2 update level.</p> </li> <li> <p>If you have a planning to have a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> <li> <p>Follow the relevant out of the following to continue the migration process.</p> </li> <li>Upgrading from API-M 3.0.0 to 4.1.0</li> <li>Upgrading from API-M 3.1.0 to 4.1.0</li> <li>Upgrading from API-M 3.2.0 to 4.1.0</li> <li>Upgrading from API-M 4.0.0 to 4.1.0</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.0.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li>Default API-M 4.1.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.0.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/data-migration/#step-2-migration-the-api-manager-data","title":"Step 2: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only user store, make sure not to change the admin_role configuration in the deployment.toml this time.</p> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.0.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 4.0.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only userstore, make sure to change the admin_role=\"\" under [super_admin] configuration in the deployment.toml file before restarting the server. After that, you have to follow the steps given below. <ol> <li>Log in to the admin portal and navigate to the scope mapping section.</li> <li>Map the admin role to the <code>&lt;admin_role&gt;</code> role.</li> <li>Then log in to the Management Console and delete the admin role</li> </ol> <ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgarding-from-400-to-410/upgrading-from-400-to-410/","title":"Upgrading from API-M 4.0.0 to 4.1.0","text":"<p>To migrate from API-M 4.0.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.0.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li> <p>Default API-M 4.1.0 TOML Elements:</p> <ul> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li><code>[oauth.grant_type.token_exchange]</code></li> </ul> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.0.0, make sure to include the corresponding configuration from column two in the API-M 4.1.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.0.0, you can safely ignore them during migration as these are no longer required for API-M 4.1.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.0.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.1.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.1.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.0.0 to <code>true</code> in API-M 4.1.0. It is recommended not to configure this in API-M 4.1.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.1.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.0.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.1.0. But, if registry versioning was enabled by you in WSO2 API-M 3.0.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.9.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.1.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.0.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.0.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.0.0</p> <p>With API-M 3.0.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-300-to-410/upgrading-from-300-to-410/","title":"Upgrading from API-M 3.0.0 to 4.1.0","text":"<p>To migrate from API-M 3.0.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.1.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li>Default API-M 4.1.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.1.0, make sure to include the corresponding configuration from column two in the API-M 4.1.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.1.0, you can safely ignore them during migration as these are no longer required for API-M 4.1.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.1.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.1.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.1.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.1.0 to <code>true</code> in API-M 4.1.0. It is recommended not to configure this in API-M 4.1.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.1.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.1.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.1.0. But, if registry versioning was enabled by you in WSO2 API-M 3.1.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> </li> </ol> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> <ol> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.1.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.1.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.1.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.1.0</p> <p>With API-M 3.2.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.    1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>  For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.1.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <p>To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below. </p> <p><code>https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb</code></p> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table. </p> <pre><code>`UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table. </p> <pre><code>`UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-310-to-410/upgrading-from-310-to-410/","title":"Upgrading from API-M 3.1.0 to 4.1.0","text":"<p>To migrate from API-M 3.1.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.1.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.1.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.2.0 to API-M 4.1.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.1.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.1.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.1.0, you need to move those configuration values to API-M 4.1.0 in place of the default values.</p> <ul> <li>Default API-M 4.1.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.1.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.1.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.2.0, make sure to include the corresponding configuration from column two in the API-M 4.1.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.2.0, you can safely ignore them during migration as these are no longer required for API-M 4.1.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.2.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.1.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.1.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.2.0 to <code>true</code> in API-M 4.1.0. It is recommended not to configure this in API-M 4.1.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.1.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.2.0 that weren't transferred in the previous steps to API-M 4.1.0. You can identify and copy these remaining configurations and paste them into the API-M 4.1.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.1.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.1.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.1.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 5.11.0 first.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"5.11.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.11.0\"</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n-   name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.1.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.1.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.1.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.1.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.1.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.1.0.x.jar</code> file, which is in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.1.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.1.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.2.0 and API-M version 4.1.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.2.0, you will have to add them again to API-M 4.1.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.1.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.1.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.1.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.1.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.1.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-410/upgrading-from-320-to-410/upgrading-from-320-to-410/","title":"Upgrading from API-M 3.2.0 to 4.1.0","text":"<p>To migrate from API-M 3.2.0 to 4.1.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-to-apim-420/","title":"Upgrading to API Manager 4.2.0","text":"<p>To start the migration you are required to perform the following,</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Understand what has changed between the API-M versions</p> </li> <li>Go through what-has-changed document and identify major changes between versions. </li> <li> <p>Find more details about the API-M 4.2.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.2.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.2.0 to the latest U2 update level. </p> </li> <li> <p>If you have a planning to have a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> <li> <p>Follow the relevant out of the following to continue the migration process.</p> <ul> <li>Upgrading from API-M 3.0.0 to 4.2.0</li> <li>Upgrading from API-M 3.1.0 to 4.2.0</li> <li>Upgrading from API-M 3.2.0 to 4.2.0</li> <li>Upgrading from API-M 4.0.0 to 4.2.0</li> <li>Upgrading from API-M 4.1.0 to 4.2.0</li> </ul> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.0.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.0.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note </p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5. </p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.11.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.11.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 6 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only user store, make sure not to change the admin_role configuration in the deployment.toml this time.</p> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.0.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 4.0.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only userstore, make sure to change the admin_role=\"\" under [super_admin] configuration in the deployment.toml file before restarting the server. After that, you have to follow the steps given below. <ol> <li>Log in to the admin portal and navigate to the scope mapping section.</li> <li>Map the admin role to the <code>&lt;admin_role&gt;</code> role.</li> <li>Then log in to the Management Console and delete the admin role</li> </ol> <ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgarding-from-400-to-420/upgrading-from-400-to-420/","title":"Upgrading from API-M 4.0.0 to 4.2.0","text":"<p>To migrate from API-M 4.0.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.0.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.0.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.0.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.0.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li> <p>Default API-M 4.2.0 TOML Elements:</p> <ul> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li><code>[oauth.grant_type.token_exchange]</code></li> </ul> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.0.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.0.0, make sure to include the corresponding configuration from column two in the API-M 4.2.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.0.0, you can safely ignore them during migration as these are no longer required for API-M 4.2.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.0.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.2.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.2.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.0.0 to <code>true</code> in API-M 4.2.0. It is recommended not to configure this in API-M 4.2.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.2.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.0.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.2.0. But, if registry versioning was enabled by you in WSO2 API-M 3.0.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p> <ol> <li>From DB scripts included here, run the script on the AM database that stores the specific API-M related data (<code>apim_db</code>).</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note</p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <p><pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.9.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> 4. Remove the following 3 steps from migration-config.yaml, which are included under version: \"5.10.0\"</p> <pre><code>- name: \"MigrationValidator\"\norder: 2\n- name: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n- name: \"TenantPortalMigrator\"\norder: 11   </code></pre> </li> <li> <p>Remove the following 3 steps from <code>migration-config.yaml</code>, which are included under version: \"5.11.0\".</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> </li> <li> <p>Linux / Mac OS       <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>Windows       <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> </li> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> <li> <p>If you followed step 8 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.0.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.0.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.0.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.0.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.0.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.0.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.0.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.0.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.0.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.0.0</p> <p>With API-M 3.0.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.   1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>   &gt;       For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <pre><code>   To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below.\n\n   `https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <pre><code>    `UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table.</p> <pre><code>    `UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-300-to-420/upgrading-from-300-to-420/","title":"Upgrading from API-M 3.0.0 to 4.2.0","text":"<p>To migrate from API-M 3.0.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.1.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.1.0, make sure to include the corresponding configuration from column two in the API-M 4.2.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.1.0, you can safely ignore them during migration as these are no longer required for API-M 4.2.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.1.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.2.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.2.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.1.0 to <code>true</code> in API-M 4.2.0. It is recommended not to configure this in API-M 4.2.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.2.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.1.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<ol> <li> <p>Run the relevant script mentioned here on the registry database (<code>shared_db</code>) to add missing registry indices.</p> </li> <li> <p>If there are frequently updating registry properties, having the versioning enabled for registry resources in the registry can lead to unnecessary growth in the registry related tables in the database. To avoid this, versioning has been disabled from API Manager 4.2.0. But, if registry versioning was enabled by you in WSO2 API-M 3.1.0 setup, it is required run the below scripts against the database that is used by the registry. Follow the below steps to achieve this. To verify registry versioning was turned on in your old API-M, open the registry.xml file in the /repository/conf directory. Check whether versioningProperties, versioningComments, versioningTags and versioningRatings configurations are true. <pre><code>&lt;staticConfiguration&gt;\n&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n&lt;/staticConfiguration&gt;\n</code></pre> <p>Warning</p> <p>If the above configurations are already set as false, you should not run the below scripts.</p> <p>To remove the registry versioning details, run the relevant script in here against the registry database (<code>shared_db</code>).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note</p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5.</p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following 3 steps from <code>migration-config.yaml</code>, which are included under version: \"5.11.0\".</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> </li> <li> <p>Linux / Mac OS       <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>Windows       <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></p> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> </li> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 5.11.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.1.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.1.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 5.11.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 5.11.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul> <p>Note</p> <p>If you had configured custom key managers in API-M 3.1.0</p> <p>With API-M 3.2.0 we have introduced an admin functionality for admins/tenant admins to configure different authorization servers as Key Managers. Please follow below steps for each tenant to configure the key managers in your migrated setup.    1. Navigate to admin portal and register the relevant Identity Provider as a Key Manager in the Admin Portal by providing the required details.</p> <pre><code>  For more details please refer [configuring key managers](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/overview/). If the custom key manager type is not among the out-of-the-box supported KM connector list, you may have to configure it as a custom Key manager as mentioned in [configure custom key manager](https://apim.docs.wso2.com/en/4.2.0/administer/key-managers/configure-custom-connector/).\n</code></pre> <ol> <li> <p>Retrieve UUID of the Key Manager added in step 1.</p> <p>To find the key manager UUID, go to the Key Manager overview and locate the alphanumeric string at the end of the URL as below. </p> <p><code>https://:/admin/settings/key-managers/0ccfca69-676f-4ee9-ae88-c231dc443cfb</code></p> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table. </p> <pre><code>`UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> <li> <p>Update Key Manager UUID in AM_APPLICATION_REGISTRATION table. </p> <pre><code>`UPDATE AM_APPLICATION_REGISTRATION SET KEY_MANAGER  = '&lt;uuid&gt;' WHERE APP_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");`\n</code></pre> </li> </ol> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-310-to-420/upgrading-from-310-to-420/","title":"Upgrading from API-M 3.1.0 to 4.2.0","text":"<p>To migrate from API-M 3.1.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_3.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 3.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 3.2.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 3.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 3.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Rename: As the next step, you need to identify and migrate any configurations that have been renamed between versions. So, if you've used any of the configurations listed in column one of the table below in API-M 3.2.0, make sure to include the corresponding configuration from column two in the API-M 4.2.0 <code>deployment.toml</code> file instead.</p> <p> Old Configuration New Renamed Configuration <pre><code>[Tenant] TenantDelete = true\n</code></pre> <p> <pre><code>[tenant_mgt]\ntenant_deletion = true\n</code></pre> <p> <pre><code>[Tenant.ListenerInvocationPolicy] InvokeOnDelete = true/false\n</code></pre> <p> <pre><code>[tenant_mgt]\ninvoke_on_delete = true/false\n</code></pre> <p> <pre><code>[transport.servlet_http.connector] enable = false\n</code></pre> <p> <pre><code>[transport.http]\nenable = false\n</code></pre> <p> <pre><code>[oauth]\nadditional_params_from_error_url = true\n</code></pre> <p> <pre><code>[oauth] allow_additional_params_from_error_url = true\n</code></pre> <p></p> <li> <p>Configurations to Exclude: Next, you have to identify which configurations you can ignore while migrating. If you have following configurations in API-M 3.2.0, you can safely ignore them during migration as these are no longer required for API-M 4.2.0. </p> <ul> <li><code>[apim.auth_manager]</code> configuration. </li> <li><code>[apim.dynamic_correlation_logs]</code> configuration. </li> <li><code>[apim.lambda_mediator_config]</code> configuration. </li> <li><code>[authentication.jit_provisioning] associating_to_existing_user</code> configuration. </li> <li><code>[oauth.grant_type.uma_ticket] retrieve_uma_permission_info_through_introspection</code> configuration.</li> </ul> </li> <li> <p>Configurations with Altered Behavior: Pay special attention to the following configurations, as their behavior has altered between versions:</p> </li> <li> <p>If you have enabled <code>[apim.analytics]</code> in API-M 3.2.0, please note that migrating old analytics configurations to the new version won't work because API-M 4.2.0 uses a new analytics model. For guidance on setting up and configuring the new APIM Analytics model, refer to what-has-changed. If you are not planning to use the new analytics model, it is advised to remove this configuration block or set the <code>enable</code> field to false.</p> </li> <li> <p>Due to the modifications in API-M analytics, transferring <code>[apim.monetization]</code> configuration directly between versions is not supported. You will need to reconfigure it according to the API-M Monetization Documentation.</p> </li> <li> <p>If you used the configuration <code>[oauth.access_token] invoke_token_revocation_event_on_renewal = false</code>, please be aware that it is no longer supported. In API-M 4.2.0, older tokens will be revoked when generating new access tokens.</p> </li> <li> <p>The default value of <code>[oauth] enable_jwt_token_validation_during_introspection</code> configuration has changed from <code>false</code> in API-M 3.2.0 to <code>true</code> in API-M 4.2.0. It is recommended not to configure this in API-M 4.2.0 and leave the default value. However, if you wish to maintain the earlier behavior, add the following configuration to API-M 4.2.0. Please refer to JWT token validation during introspection documentation.         <pre><code>[oauth]\nenable_jwt_token_validation_during_introspection = false\n</code></pre></p> </li> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 3.2.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note </p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5. </p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.10.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.10.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following 3 steps from <code>migration-config.yaml</code>, which are included under version: \"5.11.0\".</p> <pre><code>- name: \"EncryptionAdminFlowMigrator\"\norder: 1\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n- name: \"EncryptionUserFlowMigrator\"\norder: 2\nparameters:\ncurrentEncryptionAlgorithm: \"RSA/ECB/OAEPwithSHA1andMGF1Padding\"\nmigratedEncryptionAlgorithm: \"AES/GCM/NoPadding\"\nschema: \"identity\"\n\n- name: \"SCIMGroupRoleMigrator\"\norder: 18\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 7 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=3.2.0 -DmigratedVersion=4.2.0\n</code></pre> <p>Important</p> <p>When migrating the API Manager (APIM) components in a distributed setup, you might encounter the following error. This error can be safely ignored, as it occurs because the other servers (Traffic Manager, Gateway) are not running during the APIM component migration on the Control Plane (CP) node.</p> </li> </ul> <p>ERROR - DataEndpointConnectionWorker Error while trying to connect to the endpoint. Cannot borrow client for ssl://localhost:9713    org.wso2.carbon.databridge.agent.exception.DataEndpointAuthenticationException: Cannot borrow client for ssl://localhost:9713</p> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 3.2.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 3.2.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 3.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_3.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 3.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_3.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_3.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_3.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/server-startup-actions/#step-3-advanced-admin-configurations","title":"Step 3: Advanced Admin Configurations","text":"<ul> <li>In APIM 4.2.0, self-signup is enabled by default for all tenants. Hence make sure to disable or enable it based on your preference. Please refer the what-has-changed section for further information.</li> </ul> <p>Important </p> <p>If you are migrating from a version prior to 4.x, after the migration is completed, you will see that revision 1 has been created for all APIs that were in a published state and deployed to the gateway environments. If you plan on updating/editing any of these APIs after the migration, make sure to create a revision 2 before making any updates or edits. This is important in case you need to revert the changes and restore the API to its post-migration state.</p> <p>Revision 1 is created systematically by the internal 4.0 version migrator of the APIM migration client. Therefore, all API updates added by the migration client will be applied to the current API and not to revision 1. After the migration, DO NOT restore revision 1 from the publisher portal.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-320-to-420/upgrading-from-320-to-420/","title":"Upgrading from API-M 3.2.0 to 4.2.0","text":"<p>To migrate from API-M 3.2.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/","title":"step 1 Configurations","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.1.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.2.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.2.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.1.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.1.0 to API-M 4.2.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.2.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.2.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.1.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.2.0, you need to move those configuration values to API-M 4.2.0 in place of the default values.</p> <ul> <li>Default API-M 4.2.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.2.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.1.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.2.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.1.0 that weren't transferred in the previous steps to API-M 4.2.0. You can identify and copy these remaining configurations and paste them into the API-M 4.2.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.2.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/","title":"step 4 Data Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#data-migration","title":"Data Migration","text":"<p>Important</p> <p>To ensure the integrity of the database during the following steps, it is recommended to create database backups before each step. This precaution allows you to resume from the current step in case of an issue, instead of starting from the beginning. For instance, if you complete the Identity Server (IS) component migration and create a backup, you can resume from the API Manager (APIM) component migration step if something goes wrong, rather than repeating the IS component migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.2.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>From DB scripts included here, run the script corresponding to your DB type on the <code>shared_db</code> (used as the registry database).</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#step-2-migration-of-identity-data","title":"Step 2: Migration of Identity Data","text":"<p>This step is applicable only for cases where resident KM is used. If you use WSO2 IS as KM please migrate IS to 6.0.0 first.</p> <p>Note </p> <p>APIM 4.2.0 also supports IS 6.1.0. To migrate IS to 6.1.0 you can follow the same steps as below, making sure to change the migratedVersion in step 3 to 6.1.0 and use the 6.1.0 version of the migration-config.yaml in step 5. </p> <ol> <li> <p>Download the <code>wso2is-migration-x.x.x.zip</code> (identity component migration resources) from here and unzip it in a local directory. Let's refer to this directory that you extracted as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>. </p> </li> <li> <p>Copy the <code>migration-resources</code> folder from the extracted folder to the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>Open the <code>migration-config.yaml</code> file in the migration-resources directory and make sure that the <code>currentVersion</code> element is set to 5.11.0, as shown below.</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.11.0\"\nmigrateVersion: \"6.0.0\"\n</code></pre> </li> <li> <p>Remove the following step from <code>migration-config.yaml</code>, which is included under version: \"6.0.0\".</p> <pre><code>- name: \"SchemaMigrator\"\norder: 4\nparameters:\nlocation: \"step3\"\nschema: \"consent\" </code></pre> </li> <li> <p>Copy the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> from the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins</code> directory to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>If you are migrating your user stores to the new user store managers with the unique ID capabilities, contact the WSO2 Support Team to obtain guidelines on migrating User Store Managers before moving to the next step.</p> </li> <li> <p>Start WSO2 API Manager 4.2.0 as follows to carry out the complete Identity component migration. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -Dcomponent=identity\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -Dcomponent=identity\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li> <p>Remove the <code>org.wso2.carbon.is.migration-x.x.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</p> </li> <li> <p>If you ran WSO2 API-M as a Windows Service when doing the identity component migration, then you need to remove the following parameters in the command line arguments section (CMD_LINE_ARGS) of the api-manager.bat file.</p> <pre><code>-Dmigrate -Dcomponent=identity\n</code></pre> </li> </ul> </li> <li> <p>If you followed step 6 above, update the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as follows after the identity migration.</p> <pre><code>[user_store]\ntype = \"database_unique_id\"\n</code></pre> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/data-migration/#step-3-migration-the-api-manager-data","title":"Step 3: Migration the API Manager Data","text":"<p>Warning</p> <p>If you are using PostgreSQL for registry database, add the following parameter <code>preparedStatementCacheQueries=0</code> to the JDBC URL in <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below before running the migration client.  This is needed because API-M migration client is running schema upgrades (i.e. DDL statements) to registry databases while APIM back-end is using the same registry tables in the databases.  <pre><code>[database.shared_db]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/reg_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <p>If you are using a separate PostgreSQL database for the WSO2CONFIG_DB, add the same to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> as below.  <pre><code>[database.config]\ntype = \"postgre\"\nurl = \"jdbc:postgresql://localhost:5432/config_db?preparedStatementCacheQueries=0\"\n</code></pre></p> <ol> <li> <p>Download the <code>wso2am-migration-4.2.0.x.zip</code> (APIM component migration resources) from here and unzip it in a local directory.</p> </li> <li> <p>Copy the <code>migration-resources</code> to the <code>&lt;API-M_4.2.0_HOME&gt;</code> folder.</p> </li> <li> <p>Copy the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file residing in <code>&lt;wso2am-migration-4.2.0.x&gt;/dropins</code> into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</p> </li> </ol> <p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only user store, make sure not to change the admin_role configuration in the deployment.toml this time.</p> <p>Important</p> <p>If you have configured WSO2 IS 6.0.0 as Key Manager, make sure you have already started the WSO2 Identity Server instance before executing the next step.</p> <ol> <li> <p>Run the below command to execute the pre-migration step that will validate your old data. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration\n</code></pre></li> </ul> <p>If you want to save the invalid API definitions,</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0 -DrunPreMigration -DsaveInvalidDefinition\n</code></pre></li> </ul> </li> <li> <p>Start the API-M server to migrate the API-M components as follows. If you're working with a distributed setup, remember to add the <code>-Dprofile=control-plane</code> property to the following commands as well.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat -Dmigrate -DmigrateFromVersion=4.1.0 -DmigratedVersion=4.2.0\n</code></pre></li> </ul> </li> <li> <p>After you have successfully completed the migration, stop the server and remove the following files and folders.</p> <ul> <li>Remove the <code>org.wso2.carbon.apimgt.migrate.client-4.2.0.x.jar</code> file, which is in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory.</li> <li>Remove the <code>migration-resources</code> directory, which is in the <code>&lt;API-M_4.2.0_HOME&gt;</code> directory.</li> </ul> </li> </ol> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/","title":"step 2 Extensions and Customizations Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.2.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.1.0 and API-M version 4.2.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li> <p>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</p> </li> <li> <p>If you have added any UI customizations to API-M 4.1.0, you will have to add them again to API-M 4.2.0. You can reach WSO2 Support for assistance.</p> </li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/","title":"step 3 Resource and Artifact Migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.1.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.1.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if you wish to integrate WSO2 IS 6.0.0 as the Resident Key Manager in the new API-M 4.2.0 deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.1.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.1.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.1.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.2.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.2.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.1.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.2.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/","title":"step 5 Server Startup Actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p> <p>Important</p> <p>If you have tenant-specific customizations in the previous version, ensure that you reapply those customizations before proceeding further. This step should be done at this point because because tenant directories are created only after the data migration step. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.2.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/server-startup-actions/#step-2-restart-the-api-manager","title":"Step 2: Restart the API Manager","text":"<p>Note</p> <p>If the older API-M setup has been configured for a different admin role other than admin and if the role is not persisted in read-only userstore, make sure to change the admin_role=\"\" under [super_admin] configuration in the deployment.toml file before restarting the server. After that, you have to follow the steps given below. <ol> <li>Log in to the admin portal and navigate to the scope mapping section.</li> <li>Map the admin role to the <code>&lt;admin_role&gt;</code> role.</li> <li>Then log in to the Management Console and delete the admin role</li> </ol> <ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-420/upgrading-from-410-to-420/upgrading-from-410-to-420/","title":"Upgrading from API-M 4.1.0 to 4.2.0","text":"<p>To migrate from API-M 4.1.0 to 4.2.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Execute the Extensions and Customizations Migration. - Step 3: Complete the Resource and Artifact Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-to-apim-430/","title":"Upgrading to API Manager 4.3.0","text":"<p>To start the migration you are required to perform the following,</p> <p>Important</p> <p>If you are migrating from a version prior to 4.2.0, you need to first migrate to 4.2.0 and then migrate to the latest version. For example, if you are migrating from 3.2.0 to 4.3.0, you need to first migrate to 4.2.0 and then migrate to 4.3.0.</p> <ol> <li> <p>Follow the API-M Migration Guidelines to get an understanding of the API-M migration process.</p> </li> <li> <p>Find more details about the API-M 4.3.0 release on the About this release page.</p> </li> <li> <p>Download WSO2 API Manager 4.3.0 and unzip it. From this point onward this directory will be referred as <code>&lt;API-M_4.3.0_HOME&gt;</code> directory.</p> </li> <li> <p>Update API-M 4.3.0 to the latest U2 update level.</p> <ul> <li> <p>If you have a plan to configure a distributed deployment, make sure to create separate copies of APIM for profiles, optimize each as per the documentation, and then update each.</p> </li> <li> <p>If you are working with a K8s deployment, ensure you use the latest Docker images of the latest API-M version. Refer to the API-M K8s documentation for guidance.</p> </li> </ul> </li> <li> <p>Navigate through the following link and follow the instructions to continue the migration process.</p> <ul> <li>Upgrading from API-M 4.2.0 to 4.3.0</li> </ul> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/","title":"Config migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/#configuration-migration","title":"Configuration Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Configuration Migration Guidelines and make sure you understand that this step involves moving the relevant <code>toml</code> configurations from <code>&lt;API-M_4.2.0_HOME&gt;/repository/conf/deployment.toml</code> to <code>&lt;API-M_4.3.0_HOME&gt;/repository/conf/deployment.toml</code></p> </li> <li> <p>You may refer to API-M 4.3.0 Configuration Catalog for a comprehensive understanding of the configurations available in API-M 4.3.0.</p> </li> <li> <p>It is recommended to begin the below process by creating a copy of your API-M 4.2.0 <code>deployment.toml</code>. Then, as you move configurations from API-M 4.2.0 to API-M 4.3.0, in the above copy, either comment out or remove those already moved configurations. This will help you keep track of the remaining configurations that need to be moved to API-M 4.3.0. </p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/config-migration/#steps-for-configurations-migration","title":"Steps for Configurations Migration","text":"<ol> <li> <p>Configurations Requiring Modifications: Below are the default TOML elements in the API-M 4.3.0 <code>deployment.toml</code> file. Look through the elements with the same names in your API-M 4.2.0 <code>deployment.toml</code>. If you find different values configured for these elements compared to the default values in API-M 4.3.0, you need to move those configuration values to API-M 4.3.0 in place of the default values.</p> <ul> <li>Default API-M 4.3.0 TOML Elements:</li> <li><code>[server]</code></li> <li><code>[super_admin]</code></li> <li><code>[user_store]</code></li> <li><code>[database.apim_db]</code></li> <li><code>[database.shared_db]</code></li> <li><code>[keystore.tls]</code></li> <li><code>[[apim.gateway.environment]]</code></li> <li><code>[apim.sync_runtime_artifacts.gateway]</code></li> <li><code>[apim.analytics]</code></li> <li><code>[apim.ai]</code></li> <li><code>[apim.key_manager]</code></li> <li><code>[apim.cors]</code></li> <li><code>[[event_handler]]</code></li> <li><code>[service_provider]</code></li> <li><code>[database.local]</code></li> <li><code>[[event_listener]]</code></li> <li> <p><code>[oauth.grant_type.token_exchange]</code></p> </li> <li> <p>As an example, let's consider the <code>[database.apim_db]</code> TOML element. In API-M 4.3.0, this element points to the H2 database by default. If you've configured a different data source for <code>apim_db</code> in API-M 4.2.0, replace the <code>[database.apim_db]</code> configuration values in API-M 4.3.0 with those corresponding to your data source.</p> </li> </ul> </li> </ol> <p>Important</p> <p>If you are working with a distributed setup, please be aware that the default configurations mentioned above are the ones of an all-in-one pack. If you have separate packs optimized for individual profiles, you may notice variations in default TOML elements. You'll need to generate a list similar to the one above for each profile and proceed with the aforementioned step accordingly.</p> <ol> <li> <p>Configurations to Duplicate: As the next step, move all other configurations from API-M 4.2.0 that weren't transferred in the previous steps to API-M 4.3.0. You can identify and copy these remaining configurations and paste them into the API-M 4.3.0 <code>deployment.toml</code> file. </p> </li> <li> <p>Setting Up Secrets: Now, if <code>[secrets]</code> TOML element is present in API-M 4.3.0 move it to the bottom of the <code>deployment.toml</code> file and if <code>[apim] enable_secure_vault = true</code> configuration is present, ensure that the configuration is placed before any other <code>[apim]</code> elements to prevent errors.</p> </li> </ol> <p>By now, you should have API-M 4.3.0 pack(s) that have finished the Configuration Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/","title":"Data migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/#data-migration","title":"Data Migration","text":""},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Follow the Data Migration Guidelines.</p> </li> <li> <p>Check on the Tested DBMS for API-M 4.3.0. Only those versions will be supported in migration as well. Therefore, if you are currently on an older database version, please migrate your database to the supported version first before proceeding with the migration.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/data-migration/#step-1-run-the-database-scripts","title":"Step 1: Run the Database Scripts","text":"<p>Note</p> <p>In the new approach a database script is executed on relevant databases for new columns and table additions. The required data migration will happen automatically with the update operations.</p> <p>From DB scripts included here, run the script corresponding to your DB type on the <code>apim_db</code> (database keeping specific API-M related data).</p> <p>By now, you should have completed all the main steps of the migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/","title":"Extensions and customizations migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/#extensions-and-customizations-migration","title":"Extensions and Customizations Migration","text":"<p>Follow the steps below to migrate existing API Manager extensions and customizations from the current environment to API Manager 4.3.0.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Read the Extensions and Customizations Migration Guidelines.</p> </li> <li> <p>Identify significant API alterations between API-M version 4.2.0 and API-M version 4.3.0. You may contact WSO2 Support for assistance.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/extensions-and-customizations-migration/#steps-for-customization-extensions-migration","title":"Steps for Customization &amp; Extensions Migration","text":"<ol> <li> <p>If you have manually added any custom OSGI bundles to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/dropins</code> directory, copy those to the <code>&lt;API-M_4.3.0_HOME&gt;/repository/components/dropins</code> directory. </p> <ul> <li>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</li> <li>In case customizations are not available yet,<ul> <li>Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.</li> <li>If you have identified there are API changes, please update the custom code and re-build.</li> </ul> </li> </ul> </li> <li> <p>If you have manually added any JAR files to the <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> directory, copy those and paste them in the <code>&lt;API-M_4.3.0_HOME&gt;/repository/components/lib</code> directory.</p> </li> <li> <p>If your customizations are already incorporated in the latest version, there is no need to relocate the bundles.</p> </li> <li>In case customizations are not available yet,         - Initially, update the dependency version of the dependant WSO2 components and re-build the customized component.         - If you have identified there are API changes, please update the custom code and re-build.</li> </ol> <p>Important</p> <p>Note that at this point, we will not be able to migrate customizations related to tenants, as tenant directories are not created until after data migration. Therefore, you will need to move customizations/resources related to tenant directories after data migration, before server startup, as outlined later in Server Startup Actions.</p> <p>At this point you should have only the data migration remaining. Please note, once you have completed all the steps up to data migration, before initiating the data migration process, it is recommended to test the new version with the configurations and customizations. Refer to Planning the Update section.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/","title":"Resource and artifact migration","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/#api-m-resource-and-artifact-migration","title":"API-M Resource and Artifact Migration","text":"<p>As part of the migration process we need to move several API-M resource and artifact files from the older version to the new version. </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/#prerequisites","title":"Prerequisites","text":"<ol> <li>Please go through the Resource and Artifact Migration Guidelines.</li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/resource-and-artifact-migration/#steps-for-resource-and-artifact-migration","title":"Steps for Resource and Artifact Migration","text":"<ol> <li> <p>To preserve the information about added private keys, certificates, and trusted CAs used in API-M 4.2.0, copy the keystores (e.g., <code>client-truststore.jks</code>, <code>wso2carbon.jks</code>, and any custom JKS) from <code>&lt;API-M_4.2.0_HOME&gt;/repository/resources/security</code> to replace the existing ones in the <code>&lt;API-M_4.3.0_HOME&gt;/repository/resources/security</code> directory. </p> </li> <li> <p>If you have a distributed setup, you will have to copy keystores between each old profile and new profile.</p> </li> <li> <p>Additionally, if WSO2 IS has been configured as the Resident Key Manager in your previous deployment, make sure to copy the keystores (i.e., client-truststore.jks, wso2carbon.jks in the /repository/resources/security) and replace the existing keystores in to /repository/resources/security directory.     ---     &gt; Important     &gt;      &gt; If you had secure vault in the previous version now re-run the ciphertool. Please refer to the Encrypting Passwords in Configuration Files documentation for more information.     &gt;  - Linux     &gt;    <pre><code>./ciphertool.sh -Dconfigure\n</code></pre>     &gt;  - Windows     &gt;    <pre><code>./ciphertool.bat -Dconfigure\n</code></pre> <li> <p>If you have used secondary user stores in API-M 4.2.0, you have to copy the <code>userstores</code> file created inside the old API-M version to the new API-M version.</p> </li> <li> <p>For secondary userstores created for the super tenant, you have to copy them from <code>&lt;API-M_4.2.0_HOME&gt;/repository/deployment/server/userstores</code> directory to <code>&lt;API-M_4.3.0_HOME&gt;/repository/deployment/server/userstores</code> directory.</p> </li> <li>For secondary userstores created for tenants, you have to copy the userstores from <code>&lt;API-M_4.2.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code>  directory to API-M <code>&lt;API-M_4.3.0_HOME&gt;/repository/tenants/&lt;tenantid&gt;/</code> directory.</li> <p>Further, if you wish to configure WSO2 IS 6.0.0 as the KM in API-M 4.3.0 new deployment, the aforementioned secondary userstores need to be stored in to same path in IS.</p> <ol> <li> <p>If you have used global sequences in the previous version, copy the sequence files to <code>&lt;API-M_4.3.0_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences</code> folder and add the following config to API-M 4.3.0 <code>deployment.toml</code> to prevent the sequence files from getting removed from the file system on server startup. In a distributed deployment, this needs to be done on Gateway nodes.</p> <p><code>toml [apim.sync_runtime_artifacts.gateway.skip_list] sequences = [\"&lt;SEQUENCE FILES LIST HERE&gt;\"]</code></p> </li> </ol> <p>Example    <code>toml    [apim.sync_runtime_artifacts.gateway.skip_list]    sequences = [\"sequence1.xml\",\"sequence2.xml\",\"sequence3.xml\"]</code></p> <ol> <li>Copy the JDBC driver from <code>&lt;API-M_4.2.0_HOME&gt;/repository/components/lib</code> to <code>&lt;API-M_4.3.0_HOME&gt;/repository/components/lib</code> directory. If you have upgraded the database separately, add the applicable JDBC driver. In a distributed setup, ensure the JDBC driver is placed in the respective folder on each profile, as every profile requires database access at runtime.</li> </ol> <p>By now, you should have API-M 4.3.0 pack(s) that have finished both the Configuration Migration and Resource and Artifact Migration.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/","title":"Server startup actions","text":"<p> 1. Config Migration &gt; 2. Resource &amp; Artifact Migration &gt; 3. Extensions &amp; Customizations Migration &gt; 4. Data Migration &gt; 5. Server Startup </p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#server-startup-actions","title":"Server Startup Actions","text":"<p>Please follow the following to complete the migration and start the new API-M server.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-1-re-index-the-api-manager-artifacts","title":"Step 1: Re-Index the API Manager Artifacts","text":"<ol> <li> <p>To re-index the API artifacts in the registry, add the following configuration into the <code>&lt;API-M_4.3.0_HOME&gt;/repository/conf/deployment.toml</code> file. </p> <pre><code>[indexing]\nre_indexing = 1\n</code></pre> <p>Please be aware that each time you require re-indexing, you should increment the value of <code>re_indexing</code> by one. For instance, if you've previously utilized this config to re-index artifacts with the previous version, ensure to increase the <code>re_indexing</code> value by one.</p> </li> <li> <p>If the <code>&lt;API-M_4.3.0_HOME&gt;/solr</code> directory exists, take a backup and thereafter delete it. </p> <p>Important </p> <p>If you use a distributed WSO2 API-M setup, the above should be done on the Control Plane. Make sure to keep a delay between nodes to execute this step to re-index each Control Plane node, as the database can experience a large load.</p> <p>If you are using a K8s deployment, make sure to use a new mount for the solr and remove the older solr mount from the deployment . </p> <p>Note that it takes a considerable amount of time for the API Manager to re-index the artifacts, depending on the API count and the number of tenants.</p> </li> </ol>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-2-start-the-api-manager","title":"Step 2: Start the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration. </p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> <li>If you are using a distributed setup, start the profiles one after the other. Refer to Distributed API-M deployment for more information and the suggested sequence of profile startup.</li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-3-add-tenant-specific-customizations","title":"Step 3: Add Tenant Specific Customizations","text":"<p>If you have tenant-specific customizations in the previous version stop the API-M server and reapply those customizations. </p> <p>This step need to be performed after the server startup actions because the tenant directories are created only at the server startup.</p>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/server-startup-actions/#step-4-restart-the-api-manager","title":"Step 4: Restart the API Manager","text":"<ul> <li> <p>Restart the API-M server after migration.</p> <ul> <li>Linux / Mac OS   <pre><code>sh api-manager.sh\n</code></pre></li> <li>Windows   <pre><code>api-manager.bat\n</code></pre></li> </ul> <p>By now, you should have completed the migration process successfully.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/migration-catalog/upgrading-to-apim-430/upgrading-from-420-to-430/upgrading-from-420-to-430/","title":"Upgrading to 4.3.0","text":"<p>To migrate from API-M 4.2.0 to 4.3.0, follow these steps: - Step 1: Perform the Configuration Migration. - Step 2: Complete the Resource and Artifact Migration. - Step 3: Execute the Extensions and Customizations Migration. - Step 4: Proceed with the Data Migration. - Step 5: Follow the instructions in Server Startup Actions to start the server.</p>"},{"location":"api-manager/apim-revamped/other-docs/data-migration-on-different-envs/","title":"Data Migration On Different Environments","text":""},{"location":"api-manager/apim-revamped/other-docs/data-migration-on-different-envs/#recommended-approach","title":"Recommended Approach","text":"<p>It's recommended to conduct the data migration on a separate virtual machine (VM)/ local machine regardless of your deployment environment. Once the data migration is completed, you can direct the production environment deployment to the migrated data source.</p> <p>The data migration process involves modifying existing databases to support the new API-M version. This is achieved by running a migration client through an API-M instance(All-in-One or Control-Plane instance). The migration client performs tasks such as creating new tables, altering existing ones, and transferring data between tables to ensure the database supports the new version. So, the primary requirement for data migration is access to the data source. The environment on which the migration client operates is not crucial, as the migration changes are directly applied to the database.</p> <p>Therefore, we suggest conducting the data migration on a VM/local machine. This will enable you to perform the data migration seamlessly while following our documentation as provided.</p>"},{"location":"api-manager/apim-revamped/other-docs/data-migration-on-different-envs/#alternate-approaches","title":"Alternate Approaches","text":"<ul> <li> <p>If you are unable to follow the previously mentioned approach and need to perform the data migration directly on a K8s cluster, you can do so using a single pod Deployment in K8s. However, this method is not straightforward. It involves creating custom product images with migration jars/ resources, and defining appropriate K8s Deployments. Moreover, this approach carries significant risks, as premature termination of pods conducting the data migration could potentially leave the database in a corrupted state. Therefore, if you intend to proceed with data migration on K8s, please contact WSO2 Support for assistance.</p> </li> <li> <p>If you are unable to follow the previously mentioned approach and need to perform the data migration directly within Docker containers, you can do so by configuring a Docker container environment. However, the specifics of this process may vary with your Docker environment. Therefore, if you intend to proceed with data migration within Docker containers, it is advisable to contact WSO2 Support for assistance.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/","title":"API-M Data Migration on Kubernetes","text":"<p>This guide provides a guide to follow during data migration, if you are using K8s.</p>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/#recommended-approach","title":"Recommended Approach","text":"<p>When migrating a Kubernetes environment to a newer API Manager version, it is recommended to perform the data migration in a separate VM (preferred), a local machine, or a single container. Once the data migration is complete, you can then simply connect your Kubernetes deployment to the migrated data source.</p> <ul> <li> <p>Firstly, ensure you have an APIM All-in-One/Control-Plane pack containing all your configurations and customizations. If you've completed previous migration steps, you should already have this pack.</p> </li> <li> <p>Then, follow the steps outlined in the version-specific data migration guideline to add migration resources and migration client(s) to the appropriate directories and carry out the data migration. Make sure your VM/machine/container has access to the data source.</p> </li> <li> <p>Once the migration is complete, update your Kubernetes deployment configuration to point to the migrated data source.</p> </li> </ul>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/#alternate-approach","title":"Alternate Approach","text":"<p>If you can not follow the above approach and require to perform the data migration on a K8s cluster itself, you can do so with a with a K8s single pod Deployment, please refer the following.</p> <p>IMPORTANT!</p> <p>This approach carries a significant risk and should only be considered as a last resort. If the pod running the client is prematurely terminated during the data migration process, it can potentially corrupt the database, necessitating a restoration to a previous state. Therefore, if you must proceed with this method, ensure you take database dumps beforehand to facilitate restoration if needed.</p> <ul> <li> <p>To begin, ensure you have an APIM All-in-One/Control-Plane pack containing all your configurations and customizations. If you've completed previous migration steps, obtaining this pack should be straightforward.</p> </li> <li> <p>Next, follow the version-specific data migration guideline and follow the outlined steps to add migration resources and migration clients to the appropriate directories.</p> </li> <li> <p>Then, create custom product images as follows:</p> <ul> <li>If you use the inbuilt resident KM, create a custom product image containing the IS migration client jar and resources. </li> <li>Create a custom product image containing the API migration client jar and resources.</li> <li>Please note that you cannot have both clients in a single image.</li> </ul> </li> <li> <p>Use these custom images with a K8s single pod Deployment to execute the identity/apim data migration process commands on the cluster. Below, we've provided a sample K8s Deployment for reference. Follow this example to develop your own K8s Deployment for the migration. </p> <ul> <li>Replace <code>&lt;CUSTOM_APIM_IMG_WITH_MIGRATION_JAR&gt;</code> with the custom images you built previously.</li> <li>You can modify the <code>command</code> field to execute the relevant migration command. Refer to the version-specific data migration to identify the appropriate commands.</li> <li> <p>Each command may necessitate a new deployment. After the K8s pod initiates, monitor the logs. Once the server launches and the migration commands conclude, remove the deployment and proceed to the next command. Essentially, this approach involves executing each migration command sequentially via a K8s Deployment.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: wso2am\nnamespace: wso2am\nspec:\nreplicas: 1\nselector:\nmatchLabels:\napp: wso2am\ntemplate:\nmetadata:\nlabels:\napp: wso2am\nspec:\ncontainers:\n- name: wso2am\nimage: \"&lt;CUSTOM_APIM_IMG_WITH_MIGRATION_JAR&gt;\"\nports:\n- containerPort: 9443\ncommand: [\"sh\", \"-c\", \"&lt;API_M_HOME&gt;/bin/api-manager.sh -Dmigrate -DmigrateFromVersion=3.x.x -DmigratedVersion=4.x.x\"]\nresources:\nrequests:\nmemory: \"2000Mi\"\ncpu: \"1000m\"\nlimits:\nmemory: \"4000Mi\"\ncpu: \"1000m\"\n</code></pre> </li> </ul> </li> </ul>"},{"location":"api-manager/apim-revamped/other-docs/k8s-data-migration/#-once-the-data-migration-is-complete-update-your-kubernetes-new-production-deployment-configuration-to-point-to-the-migrated-data-source","title":"- Once the data migration is complete, update your Kubernetes new production deployment configuration to point to the migrated data source.","text":"<p>IMPORTANT</p> <p>With either of the above options, if you are migrating from WSO2 IS/ WSO2 IS as KM in the previous version to WSO2 IS in the latest version, first migrate WSO2 IS/IS as KM.</p>"},{"location":"enterprise-integrator/","title":"WSO2 Enterprise Integrator Documentation","text":"<p> Document WSO2 Enterprise Integrator (WSO2 EI) 7.x is an open-source hybrid integration platform that enables API-centric integration using integration architecture styles such as microservices or centralized ESB. The platform provides a graphical drag-and-drop flow designer and a configuration-driven approach to build low-code integration solutions for cloud and container-native projects."},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/","title":"Upgrading from WSO2 ESB 4.8.1 to 5.0.0","text":"<p>This page walks you through the process of upgrading to ESB 5.0.0 from ESB 4.8.1.</p> <p>If you are upgrading from a version older than ESB 4.8.1, you will need to first upgrade to ESB 4.8.1 and then upgrade to ESB 5.0.0.</p> <p>From WSO2 ESB 5.0.0 onwards, it does not support processing any mediators added after the send mediator in a given sequence because it may lead to erroneous behaviors when the message stream is consumed by the send mediator in passthrough scenarios. Therefore, if you have sequences with mediators after the send mediator, you need to change those sequences to have the send mediator inside a clone mediator, thereby, it will clone the message and process it separately. For example, see below.</p> <pre><code>&lt;clone sequential=\"true\"&gt;\n    &lt;target&gt;\n         &lt;sequence&gt;\n              &lt;send&gt;\n                   &lt;endpoint key=\"ABC\"/&gt;\n               &lt;/send&gt;\n         &lt;/sequence&gt;\n     &lt;/target&gt;\n     &lt;target&gt;\n         &lt;sequence&gt;\n             &lt;switch xmlns:ns=\"http://org.apache.synapse/xsd\" source=\"get-property('XYZ')\"&gt;\n                  &lt;case regex=\"CASE1 \"&gt;\n                       &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### CASE ####\" value=\"IN CASE1\"/&gt;\n                       &lt;/log&gt;\n                       &lt;sequence key=\"TEST.PQR \"/&gt;\n                        &lt;drop/&gt;\n                     &lt;/case&gt;\n                     &lt;default&gt;\n                        &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### DEFAULT ####\" value=\"IN DEFAULT\"/&gt;\n                        &lt;/log&gt;\n                        &lt;drop/&gt;\n                     &lt;/default&gt;\n                  &lt;/switch&gt;\n           &lt;/sequence&gt;\n     &lt;/target&gt;\n&lt;/clone&gt;\n</code></pre> <p>The followings steps describe how you can upgrade data and configurations when upgrading from ESB 4.8.1 to ESB 5.0.0. For more information on release versions, see the Release Matrix.</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the database in your ESB instance.</li> <li>Copy the  directory to back up the ESB product configurations. Download ESB 5.0.0 from http://wso2.com/products/enterprise-service-bus/. <p>Note</p> <p>The downtime is limited to the time taken for switching databases in the production environment</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#upgrading-the-database","title":"Upgrading the database","text":"<p>The instructions in this section describe how you can perform a data migration to upgrade the 4.8.1 database for use in ESB 5.0.0.</p> <ol> <li> <p>Before you upgrade to ESB 5.0.0, create a new database and restore the backup of the ESB 4.8.1 database in this new database.</p> <ul> <li>You should NOT connect a new version of WSO2 ESB to an older database that has not been upgraded.</li> <li>If you are using a MySQL database, you will need to select the mysql.sql script for the upgrade from  list of scripts provided by the WSO2 team and run it on the new database. Running this script will ensure that the new database is upgraded to have the additional tables and schemas that are required for ESB 5.0.0. </li> </ul> </li> <li> <p>Get the WSO2 Identity Server Migration Client provided by the WSO2 team. This client will migrate the user management database schemas that are used by WSO2 ESB. Unzip the downloaded file to the local file system, and you will have a directory named  wso2is-5.1.0-migration . Then do the following:</p> <p>The user management database is where information about the users and user roles are stored, e.g., login name, password, first name, last name, e-mail address, etc. The user management database of every Carbon based product is handled by a feature that comes with WSO2 Identity Server. Therefore, to migrate the user management database schemas we have to use the WSO2 Identity Server Migration Client.</p> <ol> <li>Copy the wso2is-5.1.0-migration/dbscripts/migration\u00ad-5.0.0_to_5.1.0 directory to the /dbscripts directory. <li>Copy the wso2is-5.1.0-migration/dbscripts/identity/migration\u00ad-5.0.0SP1_to_5.1.0 directory and the wso2is-5.1.0-migration/dbscripts/identity/migration-5.0.0_to_5.0.0SP1 directory to the /dbscripts/identity directory. <li>Copy the wso2is-5.1.0-migration/dropins/org.wso2.carbon.is.migrate.client-\u00ad5.1.0.jar file to the /repository/components/dropins directory. <li> <p>Start WSO2 ESB 5.0.0 using the command line with the options given below in the following order:</p> <pre><code>-Dmigrate -DmigrateUMDB -Dcomponent=identity\n-Dmigrate -DmigrateUMData -Dcomponent=identity\n</code></pre> <p>There is a known issue where an exception is thrown when you run the -Dmigrate -DmigrateUMData -Dcomponent=identity command and this will be fixed soon. However, based on our testing this has no impact on the migration process.</p> </li> <p>This will carry out the migration of the user management database.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#migrating-the-configuration-files","title":"Migrating the configuration files","text":"<p>Note</p> <p>Configurations should not be copied directly between servers.</p> <p>To connect ESB 5.0.0 to the upgraded database, configure the following files:</p> <ol> <li>Go to the /repository/conf/datasources directory and update the master-datasources.xml file. See Configuring master-datasources.xml. <li> <p>Go to the /repository/conf directory and update the datasource references in the user-mgt.xml and registry.xml files to match the updated configurations in the  master-datasources.xml file that you made in the above step. See Configuring user-mgt.xml and Configuring registry.xml. <li> <p>Check for any other configurations that were done for ESB 4.8.1 based on your solution and update the configuration files in ESB 5.0.0 accordingly. For example, configurations related to external user stores, caching, mounting, transports, etc.</p> <p>Note</p> <p>The following files have changed from ESB 4.8.1 to ESB 5.0.0:</p> <ul> <li>axis2.xml</li> <li>axis2_nhttp.xml</li> <li>axis2_pt.xml</li> <li>tenant-axis2.xml</li> <li>cache.xml</li> <li>config-validation.xml</li> <li>logging-bridge.properties</li> <li>osgi-debug.option</li> <li>cloud-services-desc.xml</li> <li>authenticators.xml</li> <li>ciper-tool.properties</li> <li>catalina-server.xml</li> <li>carbon.xml</li> <li>identity.xml</li> <li>nhttp.properties</li> <li>passthru-http.properties</li> <li>synapse.properties</li> <li>user-mgt.xml</li> </ul> </li> <li> <p>If there are any third-party libraries used with ESB 4.8.1 that you want to migrate, copy the contents of the following directories as applicable from ESB 4.8.1 to ESB 5.0.0: </p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents of /repository/components/lib <li>If you have used OSGi bundles such as SVN kit, etc, copy the contents of /repository/components/dropins"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#migrating-artifacts","title":"Migrating artifacts","text":"<p>You should manually deploy Composite Application Archive (CAR) files that you have in ESB 4.8.1 to ESB 5.0.0. If you have a mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR. See Deploying Composite Applications in the Server in WSO2 Admin Guide for further details.</p> <p>Note</p> <p>To migrate deployment artifacts including ESB message flow configurations.</p> <ul> <li> <p>Copy the required Synapse artifacts from the /repository/deployment/server directory of ESB 4.8.1 to ESB 5.0.0. If you do not have axis2 modules or axis2 services, you can copy the required Synapse artifacts from the /repository/deployment/server/synapse-configs/default directory of ESB 4.8.1 to ESB 5.0.0. <ul> <li>If you have used the Script mediator within your synapse configuration with the setProperty() method, you will need to modify the configuration as described here.</li> <li>Ensure that there are no mediator configurations after Send mediator in the same sequence, because WSO2 ESB does not process them. Any mediator configuration after the Send mediator should go to the outSequence or receive sequence.</li> </ul> <li> <p>If multi-tenancy is used, copy the /repository/tenants directory from ESB 4.8.1 to ESB 5.0.0. <p>Warning</p> <p>The org.wso2.caching.digest.REQUESTHASHGenerator interface, which is supported by WSO2 ESB 4.8.1 is not supported by later versions. Therefore, change the artifacts to use the org.wso2.carbon.mediator.cache.digest.DOMHASHGenerator as the hash generator when migrating artifacts related to the Cache mediator from WSO2 ESB 4.8.1 to a later version.</p> <p>Warning</p> <p>Prior to copying the above folders, remove all secured services from the folder.</p> <p>With the removal of QoS features from the ESB management console, enabling security for services hosted in ESB has changed from ESB 4.9.0 onwards. You now need to secure your services using ESB Tooling before you can migrate them to ESB 5.0.0. </p> <p>See Applying Security to a Proxy Service for instructions on how to create secured services and deploy them in ESB.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.8.1-to-5.0.0/#testing-the-upgrade","title":"Testing the upgrade","text":"<p>Verify that all the required scenarios are working as expected in ESB 5.0.0. This confirms that the upgrade is successful.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/","title":"Upgrading from WSO2 ESB 4.9.0 to 5.0.0","text":"<p>This page walks you through the process of upgrading to ESB 5.0.0 from ESB 4.9.0.</p> <p>If you are upgrading from a version older than ESB 4.9.0, you will need to first upgrade to ESB 4.9.0 and then upgrade to ESB 5.0.0.</p> <p>From WSO2 ESB 5.0.0 onwards, it does not support processing any mediators added after the send mediator in a given sequence because it may lead to erroneous behaviors when the message stream is consumed by the send mediator in passthrough scenarios. Therefore, if you have sequences with mediators after the send mediator, you need to change those sequences to have the send mediator inside a clone mediator, thereby, it will clone the message and process it separately. For example, see below.</p> <pre><code>&lt;clone sequential=\"true\"&gt;\n    &lt;target&gt;\n         &lt;sequence&gt;\n              &lt;send&gt;\n                   &lt;endpoint key=\"ABC\"/&gt;\n               &lt;/send&gt;\n         &lt;/sequence&gt;\n     &lt;/target&gt;\n     &lt;target&gt;\n         &lt;sequence&gt;\n             &lt;switch xmlns:ns=\"http://org.apache.synapse/xsd\" source=\"get-property('XYZ')\"&gt;\n                  &lt;case regex=\"CASE1 \"&gt;\n                       &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### CASE ####\" value=\"IN CASE1\"/&gt;\n                       &lt;/log&gt;\n                       &lt;sequence key=\"TEST.PQR \"/&gt;\n                        &lt;drop/&gt;\n                     &lt;/case&gt;\n                     &lt;default&gt;\n                        &lt;log level=\"custom\"&gt;\n                           &lt;property name=\"#### DEFAULT ####\" value=\"IN DEFAULT\"/&gt;\n                        &lt;/log&gt;\n                        &lt;drop/&gt;\n                     &lt;/default&gt;\n                  &lt;/switch&gt;\n           &lt;/sequence&gt;\n     &lt;/target&gt;\n&lt;/clone&gt;\n</code></pre> <p>The followings steps describe how you can upgrade data and configurations when upgrading from ESB 4.9.0 to ESB 5.0.0. For more information on release versions, see the Release Matrix.</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the database in your ESB instance.</li> <li>Copy the  directory to back up the ESB product configurations. Download ESB 5.0.0 from http://wso2.com/products/enterprise-service-bus/. <p>Note</p> <p>The downtime is limited to the time taken for switching databases in the production environment</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#upgrading-the-database","title":"Upgrading the database","text":"<p>The instructions in this section describe how you can perform a data migration to upgrade the 4.9.0 database for use in ESB 5.0.0.</p> <p>Note</p> <p>Before you upgrade to ESB 5.0.0, create a new database and restore the backup of the ESB 4.9.0 database in this new database.</p> <p>It is not mandatory that you migrate the user management database when upgrading from ESB 4.9.0 to ESB 5.0.0.</p> If you choose to proceed without migrating: <p>Set the following property to true in the <code>&lt;ESB_5.0.0_HOME&gt;/repository/conf/user-mgt.xml</code> file as shown below.</p> <p><code>&lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;</code></p> If you choose to migrate: <ol> <li> <p>Get the WSO2 Identity Server Migration Client provided by the WSO2 team. This client will migrate the user management database schemas that are used by WSO2 ESB. Unzip the downloaded file to the local file system, and you will have a directory named  wso2is-5.1.0-migration . Then do the following:</p> <p>The user management database is where information about the users and user roles are stored, e.g., login name, password, first name, last name, e-mail address, etc. The user management database of every Carbon based product is handled by a feature that comes with WSO2 Identity Server. Therefore, to migrate the user management database schemas we have to use the WSO2 Identity Server Migration Client.</p> <ol> <li>Copy the wso2is-5.1.0-migration/dbscripts/migration\u00ad-5.0.0_to_5.1.0 directory to the /dbscripts directory. <li>Copy the wso2is-5.1.0-migration/dbscripts/identity/migration\u00ad-5.0.0SP1_to_5.1.0 directory and the wso2is-5.1.0-migration/dbscripts/identity/migration-5.0.0_to_5.0.0SP1 directory to the /dbscripts/identity directory. <li>Copy the wso2is-5.1.0-migration/dropins/org.wso2.carbon.is.migrate.client-\u00ad5.1.0.jar file to the /repository/components/dropins directory. <li> <p>Start WSO2 ESB 5.0.0 using the command line with the options given below in the following order:</p> <pre><code>-Dmigrate -DmigrateUMDB -Dcomponent=identity\n-Dmigrate -DmigrateUMData -Dcomponent=identity\n</code></pre> <p>There is a known issue where an exception is thrown when you run the -Dmigrate -DmigrateUMData -Dcomponent=identity command and this will be fixed soon. However, based on our testing this has no impact on the migration process.</p> </li> <p>This will carry out the migration of the user management database.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#migrating-the-configuration-files","title":"Migrating the configuration files","text":"<p>Note</p> <p>Configurations should not be copied directly between servers.</p> <p>To connect ESB 5.0.0 to the upgraded database, configure the following files:</p> <ol> <li>Go to the /repository/conf/datasources directory and update the master-datasources.xml file. See Configuring master-datasources.xml. <li> <p>Go to the /repository/conf directory and update the datasource references in the user-mgt.xml and registry.xml files to match the updated configurations in the  master-datasources.xml file that you made in the above step. See Configuring user-mgt.xml and Configuring registry.xml. <li> <p>Check for any other configurations that were done for ESB 4.9.0 based on your solution and update the configuration files in ESB 5.0.0 accordingly. For example, configurations related to external user stores, caching, mounting, transports, etc.</p> <p>Note</p> <p>The following files have changed from ESB 4.9.0 to ESB 5.0.0:</p> <ul> <li>axis2.xml</li> <li>axis2_nhttp.xml</li> <li>axis2_pt.xml</li> <li>tenant-axis2.xml</li> <li>cache.xml</li> <li>config-validation.xml</li> <li>logging-bridge.properties</li> <li>osgi-debug.option</li> <li>cloud-services-desc.xml</li> <li>authenticators.xml</li> <li>ciper-tool.properties</li> <li>catalina-server.xml</li> <li>carbon.xml</li> <li>identity.xml</li> <li>nhttp.properties</li> <li>passthru-http.properties</li> <li>synapse.properties</li> <li>user-mgt.xml</li> </ul> </li> <li> <p>If there are any third-party libraries used with ESB 4.9.0 that you want to migrate, copy the contents of the following directories as applicable from ESB 4.9.0 to ESB 5.0.0: </p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents of /repository/components/lib <li>If you have used OSGi bundles such as SVN kit, etc, copy the contents of /repository/components/dropins"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#migrating-artifacts","title":"Migrating artifacts","text":"<p>You should manually deploy Composite Application Archive (CAR) files that you have in ESB 4.9.0 to ESB 5.0.0. If you have a mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR. See Deploying Composite Applications in the Server in WSO2 Admin Guide for further details.</p> <p>Note</p> <p>To migrate deployment artifacts including ESB message flow configurations.</p> <ul> <li> <p>Copy the required Synapse artifacts from the /repository/deployment/server directory of ESB 4.9.0 to ESB 5.0.0. If you do not have axis2 modules or axis2 services, you can copy the required Synapse artifacts from the /repository/deployment/server/synapse-configs/default directory of ESB 4.9.0 to ESB 5.0.0. <ul> <li>If you have used the Script mediator within your synapse configuration with the setProperty() method, you will need to modify the configuration as described here.</li> <li>Ensure that there are no mediator configurations after Send mediator in the same sequence, because WSO2 ESB does not process them. Any mediator configuration after the Send mediator should go to the outSequence or receive sequence.</li> </ul> <li> <p>If multi-tenancy is used, copy the /repository/tenants directory from ESB 4.9.0 to ESB 5.0.0. <p>Warning</p> <p>The org.wso2.caching.digest.REQUESTHASHGenerator interface, which is supported by WSO2 ESB 4.9.0 is not supported by later versions. Therefore, change the artifacts to use the org.wso2.carbon.mediator.cache.digest.DOMHASHGenerator as the hash generator when migrating artifacts related to the Cache mediator from WSO2 ESB 4.9.0 to a later version.</p> <p>Warning</p> <p>Prior to copying the above folders, remove all secured services from the folder.</p> <p>With the removal of QoS features from the ESB management console, enabling security for services hosted in ESB has changed from ESB 4.9.0 onwards. You now need to secure your services using ESB Tooling before you can migrate them to ESB 5.0.0. </p> <p>See Applying Security to a Proxy Service for instructions on how to create secured services and deploy them in ESB.</p>"},{"location":"enterprise-integrator/migration-docs/upgrading-from-esb-4.9.0-to-5.0.0/#testing-the-upgrade","title":"Testing the upgrade","text":"<p>Verify that all the required scenarios are working as expected in ESB 5.0.0. This confirms that the upgrade is successful.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/","title":"Upgrading from WSO2 EI 6.4.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.5.0 from WSO2 EI 6.4.0. This will cover the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile </li> <li>Business Process profile </li> <li>Analytics profile</li> </ul> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>If you are upgrading from a version older than WSO2 EI 6.4.0, you should first upgrade to WSO2 EI 6.4.0, and then upgrade to WSO2 EI 6.5.0.</li> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default ports of WSO2 Products. The default ports in WSO2 EI are listed under Enterprise Integrator.</li> </ul> <p>See the following topics for details: - Preparing to upgrade  - Upgrading the databases  - ESB profile   - Migrating configurations of the ESB profile   - Migrating artifacts of the ESB profile  - Message Broker profile   - Migrating configurations of the Message Broker profile   - Migrating artifacts of the Message Broker profile  - Business Process profile   - Migrating configurations of the Business Process profile   - Migrating artifacts of the Business Process profile  - Analytics profile - Starting the profiles</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.4.0 instance.</li> <li>Copy the <code>&lt;EI_6.4.0_HOME&gt;</code> directory to back up the product configurations. </li> <li>Download the product installer from here, and install WSO2 EI 6.5.0.</li> </ul> <p>Let's call the installation location of your product the <code>&lt;EI_HOME&gt;</code> directory.</p> <p>If you installed the product using the installer, this is located in a place specific to your OS as shown below:</p> OS Home directory MacOS <code>/Library/WSO2/EnterpriseIntegrator/6.5.0</code> Windows <code>C:\\Program Files\\WSO2\\EnterpriseIntegrator\\6.5.0\\</code> Ubuntu <code>/usr/lib/wso2/EnterpriseIntegrator/6.5.0</code> CentOS <code>/usr/lib64/EnterpriseIntegrator/6.5.0</code> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for WSO2 EI 6.4.0 with WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.4.0 to WSO2 EI 6.5.0: 1. Copy the database connector JAR files stored in the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.5.0. 2. Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.4.0 from the <code>&lt;EI_6.4.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.5.0. 3. If you have secondary user stores created for the ESB profile of WSO2 EI 6.4.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.5.0. 4. If there are any third-party libraries used with WSO2 EI 6.4.0 that you want to migrate, copy the relevant libraries from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:    - If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.5.0.    - If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.4.0_HOME&gt;/dropins</code> directory to the same directory in WSO2 EI 6.5.0. </p> <p>To migrate the configurations from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for WSO2 EI 6.4.0 based on your solution, and update the configuration files in WSO2 EI 6.5.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>To migrate connector artifacts:</li> <li>Create a folder named synapse-libs in the <code>&lt;EI_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of WSO2 EI 6.5.0, and copy the JARs from the directory by the same name in WSO2 EI 6.4.0. Note that this directory will not exist in your WSO2 EI 6.4.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>To migrate the data service artifacts, copy the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.5.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/repository/tenants</code> directory to the same directory in WSO2 EI 6.5.0:</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory WSO2 EI 6.5.0.</li> <li>Copy the keystores and truststores used in the Message Broker profile of WSO2 EI 6.4.0 from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have secondary user stores created for the Message Broker profile of WSO2 EI 6.4.0, you need to copy the 'userstore' folder in the /wso2/broker/repository/deployment/server/ directory to the same directory in WSO2 EI 6.5.0. <p>To migrate the configurations from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. See Changing the Carbon Database for instructions.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any further configurations that were done for the Message Broker profile in WSO2 EI 6.4.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of WSO2 EI 6.5.0:</li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from WSO2 EI 6.4.0 to WSO2 EI 6.5.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.5.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of WSO2 EI 6.4.0 from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business- process/repository/resources/security</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have secondary user stores created for the Business Process profile of WSO2 EI 6.4.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6 .4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.5.0.</li> </ol> <p>To migrate the configurations from WSO2 EI 6.4.0 to WSO2 EI 6.5.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry .xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database: If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.    If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.    For instructions, see Changing the Default Databases for BPMN and BPEL.</li> <li>Open the <code>&lt;EI_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change <code>GenerateDdl</code> to <code>false</code>. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of WSO2 EI 6.4.0 based on your solution. For example, check and update the following configurations in WSO2 EI 6.5.0:</li> <li><code>humantask.xml</code> </li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code></li> <li><code>Activiti.xml</code> </li> <li><code>Tenant-mgt.xml</code></li> <li><code>b4p-coordination-config.xml</code></li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in WSO2 EI 6.5.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.5.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in WSO2 EI 6.5.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#analytics-profile","title":"Analytics profile","text":"<p>If you have configured EI 6.4.0 to publish ESB data to the Analytics profile, you need to enable the same in EI 6.5.0. To do this, follow the instructions in Publishing ESB Data to the Analytics Profile.</p> <p>Info:</p> <p>Note that from EI 6.5.0 onwards, you need to configure the <code>&lt;EI_HOME&gt;/conf/carbon.xml</code> file to enable the ESB server to publish statistics to the Analytics profile, whereas in the EI 6.4.0 and older versions you need to configure the <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code> and <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code> files instead.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.5.0/ei-6.4.0-to-ei-6.5.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the WSO2 EI 6.5.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/","title":"Upgrading from WSO2 Data Services Server","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.6.0 from WSO2 Data Services Server (WSO2 DSS) 3.5.1.</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>If you are upgrading from a version older than WSO2 DSS 3.5.1, you should first upgrade to WSO2 DSS 3.5.1 and then upgrade to WSO2 EI 6.6.0.</li> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> <li>The distribution folder structure has changed from WSO2 DSS 3.5.1 to WSO2 EI 6.6.0.</li> </ul> Data Service Server 3.5.1 Enterprise Integrator 6.6.0 <code>&lt;DSS_HOME&gt;/repository/conf</code> <code>&lt;EI_HOME&gt;/conf</code> <code>&lt;DSS_HOME&gt;/repository/conf/axis2</code> <code>&lt;EI_HOME&gt;/conf/axis2</code> <code>&lt;DSS_HOME&gt;/repository/conf/datasources</code> <code>&lt;EI_HOME&gt;/conf/datasources</code> <code>&lt;DSS_HOME&gt;/repository/components/dropins</code> <code>&lt;EI_HOME&gt;/dropins</code> <code>&lt;DSS_HOME&gt;/repository/components/extensions</code> <code>&lt;EI_HOME&gt;/extensions</code> <code>&lt;DSS_HOME&gt;/repository/components/lib</code> <code>&lt;EI_HOME&gt;/lib</code> <p>See the following topics for instructions:</p> <ul> <li>Preparing to upgrade </li> <li>Upgrading the database </li> <li>Migrating configurations </li> <li>Migrating artifacts </li> <li>Starting the server</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading: - Create a backup of the databases in your WSO2 DSS 3.5.1 instance. - Copy the <code>&lt;DSS_HOME&gt;</code> directory to back up the product configurations. - Download the product installer from here, and install WSO2 EI 6.6.0.</p> <p>Let's call the installation location of your product the <code>&lt;EI_HOME&gt;</code> directory. This is located in a place specific to your OS as shown below:</p> OS Home directory MacOS <code>/Library/WSO2/EnterpriseIntegrator/6.6.0</code> Ubuntu <code>C:\\Program Files\\WSO2\\EnterpriseIntegrator\\6.6.0\\</code> Ubuntu <code>/usr/lib/wso2/EnterpriseIntegrator/6.6.0</code> CentOS <code>/usr/lib64/EnterpriseIntegrator/6.6.0</code> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#upgrading-the-database","title":"Upgrading the database","text":"<p>In WSO2 EI 6.6.0, you can use the same database that you used for WSO2 DSS 3.5.1. Therefore, you can simply restore the backup of the existing databases to use with WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#migrating-configurations","title":"Migrating configurations","text":"<p>Warning</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 DSS 3.5.1 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;DSS_HOME&gt;/repository/components/lib</code> directory to the <code>&lt;EI_HOME&gt;/lib</code> directory.</li> <li>Copy the keystores and truststores from the <code>&lt;DSS_HOME&gt;/repository/resources/security</code> directory to the <code>&lt;EI_HOME&gt;/repository/resources/security</code> directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for WSO2 DSS 3.5.1, you need to copy the 'userstore' folder in the <code>&lt;DSS_HOME&gt;/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If there are any third-party libraries used with WSO2 DSS 3.5.1 that you want to migrate, copy the relevant libraries to WSO2 EI 6.6.0:</li> <li>If you have used JMS libraries, JDBC libraries, etc., copy the files from <code>&lt;DSS_HOME&gt;/repository/components/lib</code> directory to the <code>&lt;EI_HOME&gt;/lib</code> directory.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents of <code>&lt;DSS_HOME&gt;/repository/components/dropins</code> director y to the <code>&lt;EI_HOME&gt;/dropins</code> directory.</li> </ol> <p>To migrate the configuration files from WSO2 DSS 3.5.1 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. See Configuring Keystores in WSO2 products for more information.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the master-datasources.xml file with the details of the Carbon database. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_HOME&gt;/conf</code> directory and update the datasource references in the user-mgt.xml and registry.xml files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any configurations that were done for WSO2 DSS 3.5.1 based on your solution. For example, update the following configurations in WSO2 EI 6.6.0 accordingly:</li> </ol> <p>a. <code>axis2.xml</code>    b. <code>axis2_client.xml</code>    c. <code>carbon.xml</code></p> <ol> <li>Check the configurations related to external user stores, caching, mounting, transports, etc.</li> </ol> <p>WSO2 EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead. Follow the instructions given below to migrate from log4j (in WSO2 DSS 3.5.1) to log4j2 (in WSO2 EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in WSO2 DSS 3.5.1, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#migrating-artifacts","title":"Migrating artifacts","text":"<ul> <li>To migrate the data service artifacts, copy the <code>&lt;DSS_HOME&gt;/repository/deployment/server/dataservices</code> directory of WSO2 DSS 3.5.1 to WSO2 EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;DSS_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant directory packages from the <code>&lt;DSS_HOME&gt;/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/dss-3.5.1-ei-6.6.0/#starting-the-server","title":"Starting the server","text":"<p>Once you have completed the migration, you can start the ESB profile of WSO2 EI. For details see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/","title":"Upgrading from WSO2 Message Broker","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.6.0 from WSO2 Message Broker (WSO2 MB) 3.1.0.</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>If you are upgrading from a version older than WSO2 MB 3.1.0, you should first upgrade to WSO2 MB 3.1.0 and then upgrade to WSO2 EI 6.6.0.</li> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> <li>The distribution folder structure has changed from WSO2 MB 3.1.0 to WSO2 EI 6.6.0.</li> </ul> Message Broker 3.1.0 Enterprise Integrator 6.6.0 <code>&lt;MB_HOME&gt;/repository/conf</code> <code>&lt;EI_HOME&gt;/wso2/broker/conf</code> <code>&lt;MB_HOME&gt;/repository/conf/axis2</code> <code>&lt;EI_HOME&gt;/wso2/broker/conf/axis2</code> <code>&lt;MB_HOME&gt;/repository/conf/datasources</code> <code>&lt;EI_HOME&gt;/wso2/broker/conf/datasources</code> <code>&lt;MB_HOME&gt;/repository/components/dropins</code> <code>&lt;EI_HOME&gt;/dropins</code> <code>&lt;MB_HOME&gt;/repository/components/extensions</code> <code>&lt;EI_HOME&gt;/extensions</code> <code>&lt;MB_HOME&gt;/repository/components/lib</code> <code>&lt;EI_HOME&gt;/lib</code> <code>&lt;MB_HOME&gt;/repository/components/patches</code> <code>&lt;EI_HOME&gt;/patches</code> <p>See the following topics for instructions: - Preparing to upgrade  - Upgrading the databases   - Upgrading the Carbon database   - Upgrading the broker-specifc database  - Migrating the configurations - Migrating tenant artifacts  - Configuring the JMS client  - Starting the server</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Be sure to stop the publishers that are connected to WSO2 MB 3.1.0 before commencing the migration process. </li> <li>Create a backup of the databases in your WSO2 MB 3.1.0 instance.</li> <li>Copy the <code>&lt;MB_HOME&gt;</code> directory to back up the product configurations.</li> <li>Download the product installer from here and install WSO2 EI 6.6.0. Let's call the installation location of your product the <code>&lt;EI_HOME&gt;</code> directory. This is located in a place specific to your OS as shown below:</li> </ul> OS Home directory MacOS <code>/Library/WSO2/EnterpriseIntegrator/6.6.0</code> Windows <code>C:\\Program Files\\WSO2\\EnterpriseIntegrator\\6.6.0\\</code> Ubuntu <code>/usr/lib/wso2/EnterpriseIntegrator/6.6.0</code> CentOS <code>/usr/lib64/EnterpriseIntegrator/6.6.0</code> <p>Info:</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>See the following topics for information on upgrading the databases of WSO2 MB 3.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#upgrading-the-carbon-database","title":"Upgrading the Carbon database","text":"<p>In WSO2 EI 6.6.0, you can use the same Carbon database that you used for MB 3.1.0. Therefore, you can simply restore the backup of the existing Carbon database to use with WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#upgrading-the-broker-specifc-database","title":"Upgrading the broker-specifc database","text":"<p>The Message Broker profile of WSO2 EI comes with several changes to the broker-specific database, and therefore you must upgrade this database as explained below. We are providing a simple tool that you can easily download and run to carry out this upgrade. Follow the steps given below.</p> <ol> <li>Disconnect all the subscribers and publishers of WSO2 MB 3.1.0. </li> <li>Shut down the server.</li> <li>Run the migration script to update the database:</li> <li>Open a terminal and navigate to the <code>&lt;EI_HOME&gt;/wso2/broker/dbscripts/mb-store/migration-3.1.0_to_3.2.0</code> directory, which contains scripts for each database type.</li> <li>Run the migration script relevant to your database type. For example, if you are using Oracle, use the following script: <code>oracle-mb.sql</code>.</li> <li>Run the migration tool:</li> <li>Use the migration tool (<code>org.wso2.mb.migration.tool-2.0.zip</code>) provided by WSO2 Support.</li> <li>Unzip the <code>org.wso2.mb.migration.tool-2.0.zip</code> file. The directory structure of the unzipped folder is as follows:</li> </ol> <code>&lt;TOOL_HOME&gt;</code> <code>lib &lt;folder&gt;</code> <code>config.properties &lt;file&gt;</code> <code>tool.sh &lt;file&gt;</code> <code>README.txt &lt;file&gt;</code> <code>org.wso2.carbon.mb.migration.tool.jar</code> <ol> <li>Download the relevant database connector and copy it to the lib directory in the above folder structure. For example, if you are upgrading your MySQL databases, you can download the MySQL connector JAR from http://dev.mysql.com/downloads/connector/j/5.1.html and copy it to the lib directory.</li> <li> <p>Open the <code>config.properties</code> file from the folder structure shown above and update the database connection details shown below.</p> <pre><code>#Configurations for the database\ndburl=\ndriverclassname=\ndbuser=\ndbpassword=\n</code></pre> <p>The parameters in the above file are as follows:</p> dburl The URL for your broker-specific database. For example, <code>jdbc:mysql://localhost/wso2_mb</code>. driverclassname The database driver class. For example, <code>com.mysql.jdbc.Driver</code> for MySQL. dbuser The user name for connecting to the database. dbpassword The password for connecting to the database. </li> <li> <p>Run the migration tool:</p> <ol> <li>If you are on a Linux environment, open a command prompt and execute the following command: tool.sh.</li> <li>If you are on a non-Linux environment, execute the <code>org.wso2.carbon.mb.migration.tool.jar</code> manually.</li> </ol> </li> </ol> <p>The database is now upgraded with the changes relevant to the Message Broker profile of WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#migrating-the-configurations","title":"Migrating the configurations","text":"<p>To migrate all the required folders, files, libraries, etc. from WSO2 MB 3.1.0 to WSO2 EI 6.6.0:</p> <p>Warning:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;MB_HOME&gt;/repository/components/lib</code> directory to the <code>&lt;EI_HOME&gt;/lib</code> directory of WSO2 EI 6.6.0.</li> <li>Copy the keystores and truststores from the <code>&lt;MB_HOME&gt;/repository/resources/security</code> directory to the <code>&lt;EI_HOME&gt;/wso2/broker/respository/resources/security</code> directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for WSO2 MB 3.1.0, you need to copy the 'userstore' folder in the <code>&lt;MB_HOME&gt;/repository/deployment/server/</code> directory to the <code>&lt;EI_HOME&gt;/wso2/broker/repository/deployment/server</code> directory in WSO2 EI 6.6.0.</li> </ol> <p>To migrate the configurations from WSO2 MB 3.1.0 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. See Configuring Keystores in WSO2 products for more information.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. See Changing the Carbon Database for instructions.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and registry.xml files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li> <p>Check for any further configurations that were done for WSO2 MB 3.1.0 based on your solution. For example, update the following configurations in the Message Broker profile of WSO2 EI 6.6.0:</p> </li> <li> <p><code>broker.xml</code></p> </li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check the configurations related to external user stores, caching, mounting, transports etc.</p> </li> </ol> <p>WSO2 EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead. Follow the instructions given below to migrate from log4j (in WSO2 MB 3.1.0) to log4j2 (in WSO2 EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in WSO2 MB 3.1.0, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If commons.logging is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#migrating-tenant-artifacts","title":"Migrating tenant artifacts","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;MB_HOME&gt;/repository/tenants</code> directory to the <code>&lt;EI_HOME&gt;/wso2/broker/repository/tenants</code> directory of WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#configuring-the-jms-client","title":"Configuring the JMS client","text":"<p>To be able to connect the queues, topics, and durable topic subscribers to the Message Broker profile, change the AMQP transport port of the JMS client to 5675.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/mb-3.1.0-to-ei-6.6.0/#starting-the-server","title":"Starting the server","text":"<p>Once you have completed the migration, you can start the Message Broker profile of WSO2 EI. For details see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/","title":"Upgrade WSO2 Enterprise Integrator","text":"<p>This document walks you through the process of upgrading WSO2 Enterprise Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/#why-upgrade","title":"Why upgrade?","text":"<p>There are multiple reasons why you would want to upgrade the WSO2 product to the latest version. These reasons include but are not limited to the following.</p> <ul> <li>The current product version you are using is reaching its end of life. To see if this is the case, view the support matrix documentation.</li> <li>You want to leverage the new features of the latest version of the product.</li> <li>The version of the product you have does not have certain security and bug fixes that you require.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/#what-has-changed","title":"What has changed","text":"<p>Over the course of its lifetime, WSO2 Enterprise Integrator has changed significantly and some of the features you were using in an older version may not work the same way.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/upgrading-wso2-ei/#get-started","title":"Get started","text":"<p>To make sure that the upgrade process is smooth and you have the best experience, WSO2 recommends that you reach out to WSO2 Support in order to upgrade WSO2 Enterprise Integrator with minimal difficulty.</p> <p>If you are ready to start the migration process, follow the instructions given below.</p> <p>If you already have a WSO2 subscription, create a support ticket with your migration requirements and one of our support engineers will get in touch with you.</p> <ul> <li>Create a ticket</li> </ul> <p>If you are not a WSO2 customer and still need migration assistance and resources, please contact us through the following link. One of our Account Managers will get in touch with you to help.</p> <ul> <li>Contact us</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/","title":"Upgrading from WSO2 EI 6.1.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.1.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile</li> <li>Business Process profile</li> <li>Analytics profile</li> </ul> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <p>See the following topics for details:</p> <ul> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases<ul> <li>Update the database structure</li> <li>Update the data</li> </ul> </li> <li>Migrating configurations of the ESB profile</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.1.0 instance.</li> <li>Copy the <code>&lt;EI_6.1.0_HOME&gt;</code> directory to back up the product configurations.</li> <li>Go to the WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.1.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for the ESB profile of EI 6.1.0 with EI 6.6.0. However, you need to apply the following updates. </p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to update some of the data in the database before you use it with EI 6.6.0.</p> <ul> <li>Re-encrypt (using OAEP) the internally-encrypted information in the database.</li> </ul> <p>As per the Security Advisory (WSO2-2017-0345), EI 6.6.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in the ESB profile of EI 6.1.0). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> <ul> <li>Remove any instances of Message Processor Tasks that were stored in the registry database by EI 6.1.0.</li> </ul> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX + messageProcessorName + taskNumber</code> (in EI 6.1.0) to <code>TASK_PREFIX + messageProcessorName + SYMBOL_UNDERSCORE + taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task  references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.1.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Re-encrypt all internally-encrypted data using OAEP </p> <p>First, let's re-encrypt all the internally-encrypted data by using OAEP.</p> <ol> <li>Get the latest WUM updates (later than the update level released on 18/04/2018) for your EI 6.1.0. This will give you a new EI distribution with the latest updates.</li> <li>Connect the WUM-updated EI distribution to your existing databases (which are used for registry data and user management data):</li> </ol> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may have separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf</code> directory) and specify the datasource name.</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> </ol> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (<code>master-datasources.xml</code>, <code>user-mgt.xml</code>, etc.).</li> <li>Be sure that the <code>carbon.properties file</code> which you received from WSO2 Support is included in the <code>&lt;WUM_UPDATED_EI_6.1.0_HOME&gt;/conf/</code> directory with the following parameter:</li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the WUM-updated ESB server of EI 6.1.0. This will re-encrypt the data in the databases.</li> </ol> <p>Step 2: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <ol> <li>Connect the ESB profile of EI 6.6.0 to your existing databases (which are used for registry data and user management data):</li> </ol> <ol> <li>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</li> </ol> <p>Tip:</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. <ol> <li>Open the <code>registry.xml</code> file (stored in the &lt;<code>EI_6.6.0_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').     <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre></li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"</code>&gt; section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> </ol> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Migrate the keystores from from EI 6.1.0 to EI 6.6.0 .</li> </ol> <p>Tip:</p> <p>These keystores are required when you perform data re-encryption later in this guide.</p> <ol> <li>Move the keystore and truststore files by copying the <code>&lt;EI_6.1.0_HOME&gt;/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li> <p>Open the <code>carbon.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory) and update the details of the keystore used for data encryption.</p> <p>Update the following configuration element:</p> <pre><code>&lt;KeyStore&gt;\n    &lt;Location&gt;${carbon.home}/resources/security/wso2carbon.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n&lt;TrustStore&gt;\n    &lt;!-- trust-store file location --&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;!-- trust-store type (JKS/PKCS12 etc.) --&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;!-- trust-store password --&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre> <p>Add the following configuration element under  in the carbon.xml file, and update the values: <pre><code>&lt;CryptoService&gt;\n  &lt;Enabled&gt;true&lt;/Enabled&gt;\n  &lt;InternalCryptoProviderClassName&gt;org.wso2.carbon.crypto.provider.\nKeyStoreBasedInternalCryptoProvider&lt;/InternalCryptoProviderClassName&gt;\n  &lt;ExternalCryptoProviderClassName&gt;org.wso2.carbon.core.encryption.\nKeyStoreBasedExternalCryptoProvider&lt;/ExternalCryptoProviderClassName&gt;\n  &lt;KeyResolvers&gt;\n    &lt;KeyResolver className=\"org.wso2.carbon.crypto.defaultProvider.resolver.\nContextIndependentKeyResolver\" priority=\"-1\"/&gt;\n  &lt;/KeyResolvers&gt;\n&lt;/CryptoService&gt;\n&lt;InternalKeyStore&gt;  &lt;Location&gt;${carbon.home}/repository/resources/security/internal.jks&lt;\n/Location&gt;\n  &lt;Type&gt;JKS&lt;/Type&gt;\n  &lt;Password&gt;wso2carbon&lt;/Password&gt;\n  &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n  &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre> <p>See Configuring Keystores in WSO2 Products for more information.</p> <p>Step 3: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client re-encrypts plain text strings with OAEP and also changes any message processor data according to the new naming convention.</p> <ol> <li>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</li> <li>Copy the <code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update the following properties:</li> </ol> admin.user.name The user name of the system administrator. keystore.identity.location The location of the keystore that is used for data encryption in the EI 6.6.0. By default, this is <code>&lt;EI_6.6.0_HOME&gt;/repository/resources/security/wso2carbon.jks</code>. keystore.identity.key.password The key password of the default keystore. By default, this is <code>wso2carbon</code>. <ol> <li>Get the migration JAR file which you received from WSO2 Support, and copy it to the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> <li>Open a terminal and navigate to the <code>&lt;EI_6.6.0_HOME&gt;/bin/</code> directory.</li> <li>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei610</code> command as shown below.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command: <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei610\n</code></pre> On Windows</p> <p>Open a terminal and execute the following command: ``` integrator.bat -Dmigrate.from.product.version=ei610</p> <ol> <li>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar</code>) from the <code>&lt;EI _6.6.0_HOME&gt;/dropins/</code> directory.</li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Warning:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Verify that the keystores are migrated. See Configuring Keystores in WSO2 products.</p> </li> </ol> <p>Note:</p> <p>If you successfully followed the instructions on upgrading the databases, the keystore configurations should already be migrated by now.</p> <ol> <li>If you have secondary user stores created for the ESB profile of EI 6.1.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> <li>If there are any third-party libraries used with EI 6.1.0 that you want to migrate, copy the relevant libraries from EI 6.1.0 to EI 6.6.0:</li> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.1.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for EI 6.1.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the ESB profile.</li> </ol> <p>Note:</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the <code>jcifs-1.3.17.jar</code> from here and then place it in <code>&lt;EI_6.6.0_HOME/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.1.0 to EI 6.6.0.</p> <p>Note:</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:</li> <li>Create a folder named <code>synapse-libs</code> in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.1.0. Note that this directory will not exist in your EI 6.1.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> <li>To migrate the data service artifacts, copy the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.1.0_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/repository/tenants</code> directory to the same directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.1.0, the Analytics profile is based on WSO2 Data Analytics Server (WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on WSO2 Stream Processor (WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.1.0 to EI 6.6.0.</p> <p>WSO2 Data Analytics Server is the predecessor of WSO2 Stream Processor. Similar to WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime. In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.1.0 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.1.0.</p> <p>Warning:</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the <code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based Analytics profile in EI 6.1.0, and then transfer the data that you have in EI 6.1.0.</p> <p>Follow the steps given below.</p> <ol> <li>Fork the wos2/product-ei repository.</li> <li>Then, download this repository from your fork.</li> </ol> <p>Info:</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>. 3. In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</p> <pre><code>mvn clean install\n</code></pre> <p>A new JAR named <code>migEI.one-jar.jar</code> is now created inside the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory. The dependencies of this JAR are also created within the same directory.</p> <ol> <li>Copy the <code>migEIAnalytics.bat</code> and <code>migEIAnalytics.sh</code> files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory.</li> <li>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory and execute the Analytics migration script:</li> </ol> <p>On MacOS/Linux/CentOS</p> <pre><code>sh migEIAnalytics.sh\n</code></pre> <p>On Windows</p> <p><pre><code>migEIAnalytics.bat\n</code></pre> 6. As shown below, you must provide the database type.</p> <p>Note:</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>Database types... 1) MySQL 2) Oracle 3) PostgreSQL 4) MSSQL 5) Enter no. of your database type:</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> <ol> <li>To run the Analytics profile of EI 6.1.0, open the terminal, navigate to the <code>&lt;EI-6.1.0_HOME&gt;/wso2/analytics/bin</code> directory, and issue the following command.</li> </ol> <p>On MacOS/Linux/CentOS:</p> <pre><code>sh wso2server.sh\n</code></pre> <p>On Windows:</p> <p><pre><code>wso2server.bat\n</code></pre> </p> <ol> <li>To migrate data related to the Analytics profile, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory and execute the <code>migEIAnalyticsSpark.sql</code> Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.1.0 Analytics profile, you need to add them in the EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li>To start the Analytics profile of EI 6.6.0, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p><pre><code>sh worker.sh\n</code></pre> </p> <p>On Windows</p> <pre><code>worker.bat \n</code></pre> <ol> <li>To view the migrated statistics, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command:</li> </ol> <p>On MacOS/Linux/CentOS</p> <pre><code>sh dashboard.sh\n</code></pre> <p>On Windows</p> <pre><code>dashboard.bat\n</code></pre> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.1.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Note:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.0 to EI 6.6.0: 1. Copy the database connector JAR files stored in the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory EI 6.6.0. 2. Copy the keystores and truststores used in the Message Broker profile of EI 6.1.0 from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in EI 6.6.0. 3. If you have secondary user stores created for the Message Broker profile of EI 6.1.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/broker/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</p> <p>To migrate the configurations from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the  <code>master-datasources.xml</code>  file.</li> <li>Check for any further configurations that were done for the Message Broker profile in EI 6.1.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> <li>See the instructions on migrating log4j configurations for the Message Broker profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.1.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Info:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually. To migrate all the required folders, files, libraries, etc. from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of EI 6.1.0 from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Business Process profile of EI 6.1.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.0 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database:</li> <li>If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.</li> <li>If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.</li> </ol> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> <ol> <li>Open the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change <code>GenerateDdl</code> to <code>false</code>. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of EI 6.1.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</li> <li><code>humantask.xml</code></li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code></li> <li><code>Activiti.xml</code></li> <li><code>Tenant-mgt.xml</code></li> <li><code>b4p-coordination-config.xml</code></li> <li><code>process-cleanup.properties</code></li> <li>Check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the Business Process profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.0_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>Note:</p> <p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.1.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.1.0, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt; \n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt; \n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <p> org.ops4j.pax.logging pax-logging-log4j2 ${pax.logging.log4j2.version} </p> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging; \nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/","title":"Upgrading from WSO2 EI 6.1.1","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.1.1. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile</li> <li>Business Process profile</li> <li>Analytics profile</li> </ul> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release. </li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <p>See the following topics for details:</p> <ul> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases<ul> <li>Update the database structure</li> <li>Update the data</li> </ul> </li> <li>Migrating configurations of the ESB profile</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.1.1 instance.</li> <li>Copy the <code>&lt;EI_6.1.1_HOME&gt;</code> directory to back up the product configurations.</li> <li>Go to the WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.1.1 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for the ESB profile of EI 6.1.1 with EI 6.6.0. However, you need to apply the following updates. </p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to update some of the data in the database before you use it with EI 6.6.0.</p> <ul> <li>Re-encrypt (using OAEP) the internally-encrypted information in the database.</li> </ul> <p>As per the Security Advisory (WSO2-2017-0345), EI 6.6.0 uses OAEP for data encryption in addition to the RSA algorithm (which is used in the ESB profile of EI 6.1.1). Therefore, the internally-encrypted data in your current databases (such as datasource configurations, syslog passwords, user store configurations, keystore registry entries, service security policies, event publisher configurations, event receiver configurations, and event sink configurations), as well as data encrypted using secure vault (such as plain text passwords in configuration files and synapse configurations) should be re-encrypted using OAEP.</p> <ul> <li>Remove any instances of Message Processor Tasks that were stored in the registry database by EI 6.1.1.</li> </ul> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX + messageProcessorName + taskNumber</code> (in EI 6.1.1) to <code>TASK_PREFIX + messageProcessorName + SYMBOL_UNDERSCORE + taskNumber</code> (in EI 6.6.0). </p> <p>When you run the migration client, the existing Task  references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.1.1 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Re-encrypt all internally-encrypted data using OAEP </p> <p>First, let's re-encrypt all the internally-encrypted data by using OAEP.</p> <ol> <li>Get the latest WUM updates (later than the update level released on 18/04/2018) for your EI 6.1.1. This will give you a new EI distribution with the latest updates.</li> <li> <p>Connect the WUM-updated EI distribution to your existing databases (which are used for registry data and user management data):</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> </ol> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> <ol> <li>Encrypt the plain text passwords that you added to the configuration files (master-datasources.xml, user-mgt.xml, etc.).</li> </ol> </li> <li> <p>Be sure that the <code>carbon.properties file</code> which you received from WSO2 Support is included in the <code>&lt;WUM_UPDATED_EI_6.1.1_HOME&gt;/conf/</code> directory with the following parameter:</p> </li> </ol> <pre><code>org.wso2.CipherTransformation=RSA/ECB/OAEPwithSHA1andMGF1Padding\n</code></pre> <ol> <li>Start the WUM-updated ESB server of EI 6.1.1. This will re-encrypt the data in the databases.</li> </ol> <p>Step 2: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <ol> <li> <p>Connect the ESB profile of EI 6.6.0 to your existing databases (which are used for registry data and user management data):</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> </li> <li> <p>Migrate the keystores from from EI 6.1.1 to EI 6.6.0.</p> </li> </ol> <p>Note</p> <p>These keystores are required when you perform data re-encryption later in this guide. </p> <pre><code>1. Move the keystore and truststore files by copying the `&lt;EI_6.1.1_HOME&gt;/repository/resources/security` directory to the same directory in EI 6.6.0.\n2. Open the `carbon.xml` file (stored in the `&lt;EI_6.6.0_HOME&gt;/conf/` directory) and update the details of the keystore used for data encryption.\n\n   &gt; Update the following configuration element:\n   &gt; \n   &gt; ```\n   &gt; &lt;KeyStore&gt;    \n   &gt;    &lt;Location&gt;${carbon.home}/resources/security/wso2carbon.jks&lt;/Location&gt;\n   &gt;    &lt;Type&gt;JKS&lt;/Type&gt;\n   &gt;    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n   &gt;    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n   &gt;    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n   &gt; &lt;/KeyStore&gt;    \n   &gt; ``` \n   &gt; ``` \n   &gt; &lt;TrustStore&gt;\n   &gt;    &lt;!-- trust-store file location --&gt;\n   &gt;    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;     &lt;!-- trust-store type (JKS/PKCS12 etc.) --&gt;\n   &gt;    &lt;Type&gt;JKS&lt;/Type&gt;\n   &gt;    &lt;!-- trust-store password --&gt;\n   &gt;    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n   &gt; &lt;/TrustStore&gt;\n   &gt; ``` \n   &gt; Add the following configuration element under `&lt;Security&gt;` in the `carbon.xml` file, and update the values:\n   &gt; \n   &gt; ```\n   &gt; &lt;CryptoService&gt;\n   &gt;    &lt;Enabled&gt;true&lt;/Enabled&gt;\n   &gt;    &lt;InternalCryptoProviderClassName&gt;org.wso2.carbon.crypto.provider. KeyStoreBasedInternalCryptoProvider&lt;/InternalCryptoProviderClassName&gt;\n   &gt;    &lt;ExternalCryptoProviderClassName&gt;org.wso2.carbon.core.encryption. KeyStoreBasedExternalCryptoProvider&lt;/ExternalCryptoProviderClassName&gt;\n   &gt;    &lt;KeyResolvers&gt;\n   &gt;    &lt;KeyResolver className=\"org.wso2.carbon.crypto.defaultProvider.resolver. ContextIndependentKeyResolver\" priority=\"-1\"/&gt;\n   &gt;    &lt;/KeyResolvers&gt;\n   &gt; &lt;/CryptoService&gt;\n   &gt; ```\n   &gt; ```\n   &gt; &lt;InternalKeyStore&gt;  \n   &gt;    &lt;Location&gt;${carbon.home}/repository/resources/security/internal.jks&lt;/Location&gt;\n   &gt;    &lt;Type&gt;JKS&lt;/Type&gt;\n   &gt;    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n   &gt;    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n   &gt;    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n   &gt; &lt;/InternalKeyStore&gt;\n   &gt; ```\n   &gt; \n   &gt; See [Configuring Keystores in WSO2 Products](https://wso2docs.atlassian.net/wiki/spaces/EI660/pages/6522317/Configuring+Keystores+in+WSO2+Products) for more information.\n</code></pre> <p>Step 3: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client re-encrypts plain text strings with OAEP and also changes any message processor data according to the new naming convention.</p> <ol> <li>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</li> <li> <p>Copy the <code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update the following properties:</p> admin.user.name The user name of the system administrator. keystore.identity.location The location of the keystore that is used for data encryption in the EI 6.6.0. By default, this is <code>&lt;EI_6.6.0_HOME&gt;/repository/resources/security/wso2carbon.jks</code>. keystore.identity.key.password The key password of the default keystore. By default, this is <code>wso2carbon</code>. </li> <li> <p>Get the migration JAR file which you received from WSO2 Support, and copy it to the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</p> </li> <li>Open a terminal and navigate to the <code>&lt;EI_6.6.0_HOME&gt;/bin/</code> directory.</li> <li>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei611</code> command as shown below.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command: <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei611\n</code></pre> On Windows</p> <p>Open a terminal and execute the following command: <pre><code>integrator.bat -Dmigrate.from.product.version=ei611\n</code></pre></p> <ol> <li>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar</code>) from the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Warning:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</li> <li>Verify that the keystores are migrated. See Configuring Keystores in WSO2 products.</li> </ol> <p>Note:</p> <p>If you successfully followed the instructions on upgrading the databases, the keystore configurations should already be migrated by now.</p> <ol> <li>If you have secondary user stores created for the ESB profile of EI 6.1.1, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> <li>If there are any third-party libraries used with EI 6.1.1 that you want to migrate, copy the relevant libraries from EI 6.1.1 to EI 6.6.0:<ul> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.1.1_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> <p>To migrate the configurations from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for EI 6.1.1 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the ESB profile.</li> </ol> <p>Note:</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the  jcifs-1.3.17.jar from here and then place it in <code>&lt;EI_6.6.0_HOME/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.1.1 to EI 6.6.0.</p> <p>Note:</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in EI 6.6.0.</li> <li> <p>To migrate connector artifacts:</p> <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.1.1. Note that this directory will not exist in your EI 6.1.1 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li> <p>To migrate the data service artifacts, copy the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in EI 6.6.0.</p> </li> <li>If you have custom artifacts created in the <code>&lt;EI_6.1.1_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/repository/tenants</code> directory to the same directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.1.1, the Analytics profile is based on WSO2 Data Analytics Server (WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on WSO2 Stream Processor (WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.1.1 to EI 6.6.0.</p> <p>WSO2 Data Analytics Server is the predecessor of WSO2 Stream Processor. Similar to WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime. </p> <p>In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.1.1 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.1.1.</p> <p>Warning:</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the <code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based  Analytics profile in EI 6.1.1, and then transfer the data that you have in EI 6.1.1.</p> <p>Follow the steps given below.</p> <ol> <li>Fork the wos2/product-ei repository.</li> <li>Then, download this repository from your fork.</li> </ol> <p>Info:</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>.</p> <ol> <li>In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</li> </ol> <pre><code>mvn clean install\n</code></pre> <p>A new JAR named <code>migEI.one-jar.jar</code> is now created inside the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory. The dependencies of this JAR are also created within the same directory.</p> <ol> <li>Copy the <code>migEIAnalytics.bat</code> and <code>migEIAnalytics.sh</code> files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory.</li> <li>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code> directory and execute the Analytics migration script:</li> </ol> <p>On MacOS/Linux/CentOS</p> <pre><code>sh migEIAnalytics.sh\n</code></pre> <p>On Windows</p> <pre><code>migEIAnalytics.bat\n</code></pre> <ol> <li>As shown below, you must provide the database type.</li> </ol> <p>Note:</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>Database types... 1) MySQL 2) Oracle 3) PostgreSQL 4) MSSQL 5) Enter no. of your database type:</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> <ol> <li>To run the Analytics profile of EI 6.1.1, open the terminal, navigate to the <code>&lt;EI-6.1.1_HOME&gt;/wso2/analytics/bin</code> directory, and issue the following command.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>sh wso2server.sh</p> <p>On Windows</p> <p>wso2server.bat</p> <ol> <li>To migrate data related to the Analytics profile, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code> directory and execute the migEIAnalyticsSpark.sql Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.1.1 Analytics profile, you need to add them in the EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li>To start the Analytics profile of EI 6.6.0, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command.</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>sh worker.sh </p> <p>On Windows</p> <p>worker.bat</p> <ol> <li>To view the migrated statistics, navigate to the <code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code> directory and execute the following command:</li> </ol> <p>On MacOS/Linux/CentOS</p> <p>sh dashboard.sh </p> <p>On Windows</p> <p>dashboard.bat</p> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.1.1 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Note:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory EI 6.6.0.</li> <li>Copy the keystores and truststores used in the Message Broker profile of EI 6.1.1 from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.1.1, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/broker/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Default Broker Database for instructions.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the  <code>master-datasources.xml</code>  file.</li> <li>Check for any further configurations that were done for the Message Broker profile in EI 6.1.1 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> <li>See the instructions on migrating log4j configurations for the Message Broker profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.1.1 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Info:</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.1.1_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of EI 6.1.1 from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/resources/security</code> directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Business Process profile of EI 6.1.1, you need to copy the 'userstore' folder in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.1.1 to EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database:</li> <li>If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.</li> <li>If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.</li> </ol> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> <ol> <li>Open the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change GenerateDdl to false. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of EI 6.1.1 based on your solution. For example, check and update the following configurations in EI 6.6.0:</li> <li><code>humantask.xml</code></li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code></li> <li><code>Activiti.xml</code></li> <li><code>Tenant-mgt.xml</code></li> <li><code>b4p-coordination-config.xml</code></li> <li><code>process-cleanup.properties</code></li> <li>Check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the Business Process profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.1.1_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>Note:</p> <p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.1.1) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.1.1, apply the following changes to your component:</p> </li> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt; \n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt; \n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <p> org.ops4j.pax.logging pax-logging-log4j2 ${pax.logging.log4j2.version} </p> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging; \nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.1.1-to-ei-6.6.0/upgrading-from-WSO2-EI-6.1.1/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/","title":"Upgrading from WSO2 EI 6.2.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.2.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <ul> <li>ESB\u00a0profile</li> <li>Message Broker\u00a0profile</li> <li>Business Process\u00a0profile</li> <li>Analytics\u00a0profile</li> </ul> <p>See the following topics for details:</p> <ul> <li>Upgrading from WSO2 EI 6.2.0</li> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases</li> <li>Update the database structure\u00a0</li> <li>Update the data</li> <li>Migrating configurations of the ESB profile</li> <li>Updating the configuration files manually</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the\u00a0databases\u00a0in your WSO2 EI 6.2.0 instance.</li> <li>Copy the\u00a0<code>&lt;EI_6.2.0_HOME&gt;</code>\u00a0directory to back up the product configurations.</li> <li>Go to the\u00a0WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.2.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same\u00a0 databases \u00a0that you used for the ESB profile of EI 6.2.0 with EI 6.6.0.\u00a0However, you need to apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks\u00a0that were stored in the registry database by EI 6.2.0.</p> <p>Info</p> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>taskNumber</code> (in EI 6.2.0) to <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>SYMBOL_UNDERSCORE</code> + <code>taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.2.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases\u00a0(which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the\u00a0<code>master-datasources.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code>\u00a0directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the\u00a0<code>master-datasources.xml</code>\u00a0file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the\u00a0<code>registry.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory) and specify the datasource name (as defined in step \\'a\\').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the\u00a0<code>user-mgt.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/</code>\u00a0directory), and update the following database connection parameters under the\u00a0<code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code>\u00a0section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the\u00a0system administrator configurations\u00a0and the\u00a0datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li> <p>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</p> </li> <li> <p>Copy the\u00a0<code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update\u00a0the following properties.</p> <p>admin.user.name   The user name of the system administrator.</p> <p>Note that you do not need to update the keystore-related properties given in the file.</p> </li> <li> <p>Copy the migration JAR file, which you received from WSO2 Support, into the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> <li> <p>Open a terminal and navigate to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/bin/</code>\u00a0directory.</p> </li> <li> <p>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei620</code> command as shown below.</p> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command:</p> <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei620\n</code></pre> <p>On Windows</p> <p>Open a terminal and execute the following command:</p> <pre><code>integrator.bat -Dmigrate.from.product.version=ei620\n</code></pre> </li> <li> <p>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar)</code>\u00a0from the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in     the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.2.0.\u00a0</p> </li> <li> <p>If you have secondary user stores created for the ESB profile of EI 6.2.0, you need to copy the \\'userstore\\' folder in     the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If there are any third-party libraries used with EI 6.2.0 that you want to migrate, copy the relevant libraries from EI 6.2.0 to EI 6.6.0:</p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc.,\u00a0copy the contents from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code> directory to the same     directory in EI 6.6.0.</li> <li>If\u00a0you have used OSGi bundles such as SVN kit etc., copy the contents from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> Updating the configuration files manually <p>To migrate the configurations from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in     the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available in.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory and update the\u00a0datasource\u00a0references in the\u00a0<code>user-mgt.xml</code>\u00a0and\u00a0<code>registry.xml</code>\u00a0files to match the updated configurations in the\u00a0<code>master-datasources.xml</code>\u00a0file. The instructions are available in.</p> </li> <li> <p>Check for any other configurations that were done for EI 6.2.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations configurations of the Message Broker profile) for the ESB profile.</p> </li> </ol> <p>Info</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the \u00a0jcifs-1.3.17.jar from here\u00a0and then place it in <code>&lt;EI_6.6.0_HOME&gt;/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in\u00a0this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.2.0 to EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:\u00a0 <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.2.0. Note that this directory will not exist in your EI 6.2.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/dataservices</code>     directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/repository/tenants</code>\u00a0directory to the same     directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.2.0, the Analytics profile is based on\u00a0WSO2 Data Analytics Server\u00a0(WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on\u00a0WSO2 Stream Processor\u00a0(WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.2.0 to EI 6.6.0.</p> <p>Info</p> <p>WSO2 Data Analytics Server is the\u00a0predecessor of WSO2 Stream Processor. Similar to\u00a0WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime.</p> <p>In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.2.0 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.2.0.</p> <p>Warning</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based\u00a0 Analytics profile in EI 6.2.0, and then transfer the data that you have in EI 6.2.0.</p> <p>Follow the steps given below.</p> <ol> <li> <p>Fork the     wos2/product-ei repository.</p> </li> <li> <p>Then, download this repository from your fork.</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>.</p> </li> <li> <p>In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</p> <p>mvn clean install</p> <p>A new JAR named\u00a0<code>migEI.one-jar.jar</code> is now created inside the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory. The dependencies of this JAR are also created within the same directory.</p> </li> <li> <p>Copy the\u00a0<code>migEIAnalytics.bat</code>\u00a0and\u00a0<code>migEIAnalytics.sh</code>\u00a0files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory.</p> </li> <li> <p>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory and execute the Analytics migration\u00a0script:</p> <p>On MacOS/Linux/CentOS <pre><code>sh migEIAnalytics.sh\n</code></pre> On Windows <pre><code>migEIAnalytics.bat\n</code></pre></p> </li> <li> <p>As shown below, you must provide the database type.</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> </li> <li> <p>To run the Analytics profile of EI 6.2.0, open the terminal, navigate to the\u00a0<code>&lt;EI-6.2.0_HOME&gt;/wso2/analytics/bin</code> directory, and     issue the following command.</p> <p>On MacOS/Linux/CentOS sh wso2server.sh On Windows wso2server.bat</p> </li> <li> <p>To migrate data related to the Analytics profile, navigate to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory and execute the\u00a0<code>migEIAnalyticsSpark.sql</code> Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.2.0 Analytics profile, you need to add them in the\u00a0EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li> <p>To start the Analytics profile of EI 6.6.0, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the     following command.</p> <p>On MacOS/Linux/CentOS <pre><code>sh worker.sh\n</code></pre></p> <p>On Windows <pre><code>worker.bat\n</code></pre></p> </li> <li> <p>To view the migrated statistics, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the following command:</p> <p>On MacOS/Linux/CentOS <pre><code>sh dashboard.sh\n</code></pre> On Windows <pre><code>dashboard.bat\n</code></pre></p> </li> </ol> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.2.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.2.0 to EI 6.6.0:</p> <ol> <li>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code>directory to the same directory EI 6.6.0.</li> <li>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Message Broker profile of EI 6.2.0 from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/broker/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.2.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/broker/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For instructions, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available     in.</p> </li> <li> <p>Update the configurations related to the broker-specific database in the\u00a0<code>master-datasources.xml</code>\u00a0file and other related configurations files. See\u00a0Changing the Default Broker for instructions.</p> </li> <li> <p>Go to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the\u00a0datasource\u00a0references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in EI 6.2.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</p> <ol> <li> <p><code>broker.xml</code></p> </li> <li> <p><code>metrics.xml</code></p> </li> <li> <p><code>metrics-properties.xml</code></p> </li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check configurations related to external user stores, caching,     mounting, transports etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations for the Message Broker profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/broker/repository/tenants</code>\u00a0directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.2.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/lib</code>\u00a0directory to the same directory in EI     6.6.0.\u00a0For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</p> </li> <li> <p>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Business Process profile of EI 6.2.0 from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have secondary user stores created for the Business Process profile of EI 6.2.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> </ol> <p>updating_configs_bp To migrate the configurations from EI 6.2.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For more information, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the Carbon\u00a0datasource configuration in the\u00a0<code>master-datasources.xml</code> file. The instructions are available in.</p> </li> <li> <p>Go\u00a0to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory\u00a0and update the\u00a0datasource references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files\u00a0to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the files relevant to your BPMN/BPEL database:\u00a0</p> <ul> <li>If you are using BPMN, update the\u00a0<code>activiti-datasources.xml</code>\u00a0file with the datasource connection details.</li> <li>If you are using BPEL, update the\u00a0<code>bps-datasources.xml</code>\u00a0file with the datasource connection details.</li> </ul> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> </li> <li> <p>Open the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code>\u00a0file and change\u00a0<code>GenerateDdl</code>\u00a0to\u00a0<code>false</code>.\u00a0You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</p> <pre><code>&lt;GenerateDdl\\&gt;false&lt;/GenerateDdl\\&gt;\n</code></pre> </li> <li> <p>Check for any further configurations that were done for the Business Process profile of EI 6.2.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</p> <ol> <li> <p><code>humantask.xml</code></p> </li> <li> <p><code>axis2.xml</code></p> </li> <li> <p><code>bps.xml</code></p> </li> <li> <p><code>Activiti.xml</code></p> </li> <li> <p><code>Tenant-mgt.xml</code></p> </li> <li> <p><code>b4p-coordination-config.xml</code></p> </li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores,     caching, mounting, transports, etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations\u00a0for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages\u00a0in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code>\u00a0directory     to the same directory in EI 6.6.0.<code></code></p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory,     copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.2.0_HOME&gt;/wso2/business-process/repository/tenants</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces\u00a0log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.2.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.2.0, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or\u00a0 <code>commons.logging</code> dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</p> </li> <li> <p>If\u00a0<code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> </ol> </li> <li> <p>Follow the instructions on configuring log4j2 \u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.2.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.2.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see\u00a0Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/","title":"Upgrading from WSO2 EI 6.3.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.3.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <ul> <li>ESB\u00a0profile</li> <li>Message Broker\u00a0profile</li> <li>Business Process\u00a0profile</li> <li>Analytics\u00a0profile</li> </ul> <p>See the following topics for details:</p> <ul> <li>Upgrading from WSO2 EI 6.3.0</li> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases</li> <li>Update the database structure\u00a0</li> <li>Update the data</li> <li>Migrating configurations of the ESB profile</li> <li>Updating the configuration files manually</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile<ul> <li>Upgrading the databases and migrating analytics-related data</li> <li>Migrating custom deployable artifacts</li> <li>Testing the migration</li> </ul> </li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the\u00a0databases\u00a0in your WSO2 EI 6.3.0 instance.</li> <li>Copy the\u00a0<code>&lt;EI_6.3.0_HOME&gt;</code>\u00a0directory to back up the product     configurations.</li> <li>Go to the\u00a0WSO2 Integration website     and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.3.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same\u00a0 databases \u00a0that you used for the ESB profile of EI 6.3.0 with EI 6.6.0.\u00a0However, you need to apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and s elect the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks\u00a0that were stored in the registry database by EI 6.3.0.</p> <p>Info</p> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>taskNumber</code> (in EI 6.3.0) to <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>SYMBOL_UNDERSCORE</code> + <code>taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.3.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases\u00a0(which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the\u00a0<code>master-datasources.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code>\u00a0directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the\u00a0<code>master-datasources.xml</code>\u00a0file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the\u00a0<code>registry.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory) and specify the datasource name (as defined in step \\'a\\').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the\u00a0<code>user-mgt.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/</code>\u00a0directory), and update the following database connection parameters under the\u00a0<code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code>\u00a0section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the\u00a0system administrator configurations\u00a0and the\u00a0datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li> <p>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</p> </li> <li> <p>Copy the\u00a0<code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update\u00a0the following properties.</p> <p>admin.user.name   The user name of the system administrator.</p> <p>Note that you do not need to update the keystore-related properties given in the file.</p> </li> <li> <p>Copy the migration JAR file, which you received from WSO2 Support, into the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> <li> <p>Open a terminal and navigate to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/bin/</code>\u00a0directory.</p> </li> <li> <p>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei630</code> command as shown below.</p> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command:</p> <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei630\n</code></pre> <p>On Windows</p> <p>Open a terminal and execute the following command:</p> <pre><code>integrator.bat -Dmigrate.from.product.version=ei630\n</code></pre> </li> <li> <p>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar)</code>\u00a0from the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in     the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.3.0.\u00a0</p> </li> <li> <p>If you have secondary user stores created for the ESB profile of EI 6.3.0, you need to copy the \\'userstore\\' folder in     the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If there are any third-party libraries used with EI 6.3.0 that you want to migrate, copy the relevant libraries from EI 6.3.0 to EI 6.6.0:</p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc.,\u00a0copy the contents from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code> directory to the same     directory in EI 6.6.0.</li> <li>If\u00a0you have used OSGi bundles such as SVN kit etc., copy the contents from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> Updating the configuration files manually <p>To migrate the configurations from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in     the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available in.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory and update the\u00a0datasource\u00a0references in the\u00a0<code>user-mgt.xml</code>\u00a0and\u00a0<code>registry.xml</code>\u00a0files to match the updated configurations in the\u00a0<code>master-datasources.xml</code>\u00a0file. The instructions are available in.</p> </li> <li> <p>Check for any other configurations that were done for EI 6.3.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations configurations of the Message Broker profile) for the ESB profile.</p> </li> </ol> <p>Info</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the \u00a0jcifs-1.3.17.jar from here\u00a0and then place it in <code>&lt;EI_6.6.0_HOME&gt;/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in\u00a0this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.3.0 to EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:\u00a0 <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.3.0. Note that this directory will not exist in your EI 6.3.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/dataservices</code>     directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/repository/tenants</code>\u00a0directory to the same     directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#analytics-profile","title":"Analytics profile","text":"<p>In EI 6.3.0, the Analytics profile is based on\u00a0WSO2 Data Analytics Server\u00a0(WSO2 DAS). In EI 6.6.0 and later versions, the Analytics profile is based on\u00a0WSO2 Stream Processor\u00a0(WSO2 SP). Because of this change, you need to follow the instructions given below when migrating the Analytics profile from EI 6.3.0 to EI 6.6.0.</p> <p>Info</p> <p>WSO2 Data Analytics Server is the\u00a0predecessor of WSO2 Stream Processor. Similar to\u00a0WSO2 SP, WSO2 DAS processed events via an event flow that consisted of event streams, receivers, publishers, and execution plans. These elements of the event flow are defined separate from each other via the DAS Management Console. WSO2 SP defines the complete event flow within a single application created via a Siddhi file. The application is then deployed in a SP worker node and executed at runtime.</p> <p>In EI 6.6.0, the Siddhi application required to process EI statistics is already created and deployed in the SP-based EI Analytics profile. Similarly, datasources required for storing data are pre-configured. This setup functions the same way the pre-configured DAS artifacts functioned together in EI Analytics 6.6.0. Therefore, unless you have configured any custom DAS artifacts in your EI Analytics 6.3.0 setup, you do not need to migrate any artifacts. However, you need to setup the databases and migrate the analytics data that you have already saved in EI Analytics 6.3.0.</p> <p>Warning</p> <p>You cannot roll back the upgrade process. However, it is possible to restore a backup of the previous database so that you can restart the upgrade progress.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#upgrading-the-databases-and-migrating-analytics-related-data","title":"Upgrading the databases and migrating analytics-related data","text":"<p>The default databases for the SP-based Analytics profile in EI 6.6.0 are available in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/analytics/wso2/&lt;PROFILE&gt;/database</code> directory. However, you need to create the same databases and tables that you currently have in the DAS-based\u00a0 Analytics profile in EI 6.3.0, and then transfer the data that you have in EI 6.3.0.</p> <p>Follow the steps given below.</p> <ol> <li> <p>Fork the     wos2/product-ei repository.</p> </li> <li> <p>Then, download this repository from your fork.</p> <p>In the following steps, the directory that is downloaded into your machine is referred to as <code>&lt;PROJECT_HOME&gt;</code>.</p> </li> <li> <p>In your terminal, navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics</code> sub directory and issue the following command.</p> <p>mvn clean install</p> <p>A new JAR named\u00a0<code>migEI.one-jar.jar</code> is now created inside the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory. The dependencies of this JAR are also created within the same directory.</p> </li> <li> <p>Copy the\u00a0<code>migEIAnalytics.bat</code>\u00a0and\u00a0<code>migEIAnalytics.sh</code>\u00a0files from the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory.</p> </li> <li> <p>Navigate to the <code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources/mig-ei-analytics/target</code>\u00a0directory and execute the Analytics migration\u00a0script:</p> <p>On MacOS/Linux/CentOS <pre><code>sh migEIAnalytics.sh\n</code></pre> On Windows <pre><code>migEIAnalytics.bat\n</code></pre></p> </li> <li> <p>As shown below, you must provide the database type.</p> <p>This should be the same database that is configured for EI Analytics 6.6.0.</p> <p>The system creates the tables related to EI Analytics in the database you specify.</p> </li> <li> <p>To run the Analytics profile of EI 6.3.0, open the terminal, navigate to the\u00a0<code>&lt;EI-6.3.0_HOME&gt;/wso2/analytics/bin</code> directory, and     issue the following command.</p> <p>On MacOS/Linux/CentOS sh wso2server.sh On Windows wso2server.bat</p> </li> <li> <p>To migrate data related to the Analytics profile, navigate to the\u00a0<code>&lt;PROJECT_HOME&gt;/distribution/src/analytics/migration/migration-EI6.x.x-6.4.0/resources</code>\u00a0directory and execute the\u00a0<code>migEIAnalyticsSpark.sql</code> Spark script. As a result, the migrated data is stored in the RDBMS database that you specified in step 6.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-custom-deployable-artifacts","title":"Migrating custom deployable artifacts","text":"<p>If you have created any custom DAS artifacts in your EI 6.3.0 Analytics profile, you need to add them in the\u00a0EI 6.6.0 Analytics profile. For detailed instructions, see WSO2 Stream Processor Documentation - Upgrading from a previous release - Deployable artifacts.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#testing-the-migration","title":"Testing the migration","text":"<p>To test whether the EI Analytics profile is successfully migrated, follow the steps below:</p> <ol> <li> <p>To start the Analytics profile of EI 6.6.0, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the     following command.</p> <p>On MacOS/Linux/CentOS <pre><code>sh worker.sh\n</code></pre></p> <p>On Windows <pre><code>worker.bat\n</code></pre></p> </li> <li> <p>To view the migrated statistics, navigate to the\u00a0<code>&lt;EI-6.6.0_HOME&gt;/wso2/analytics/bin</code>\u00a0directory and execute the following command:</p> <p>On MacOS/Linux/CentOS <pre><code>sh dashboard.sh\n</code></pre> On Windows <pre><code>dashboard.bat\n</code></pre></p> </li> </ol> <p>Once you run one of these scripts, you can access the dashboard via the dashboard URL displayed in the terminal.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.3.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.3.0 to EI 6.6.0:</p> <ol> <li>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code>directory to the same directory EI 6.6.0.</li> <li>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Message Broker profile of EI 6.3.0 from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/broker/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.3.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/broker/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For instructions, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available     in.</p> </li> <li> <p>Update the configurations related to the broker-specific database in the\u00a0<code>master-datasources.xml</code>\u00a0file and other related configurations files. See\u00a0Changing the Default Broker for instructions.</p> </li> <li> <p>Go to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the\u00a0datasource\u00a0references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in EI 6.3.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</p> <ol> <li> <p><code>broker.xml</code></p> </li> <li> <p><code>metrics.xml</code></p> </li> <li> <p><code>metrics-properties.xml</code></p> </li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check configurations related to external user stores, caching,     mounting, transports etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations for the Message Broker profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/broker/repository/tenants</code>\u00a0directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.3.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/lib</code>\u00a0directory to the same directory in EI     6.6.0.\u00a0For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</p> </li> <li> <p>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Business Process profile of EI 6.3.0 from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have secondary user stores created for the Business Process profile of EI 6.3.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> </ol> <p>updating_configs_bp To migrate the configurations from EI 6.3.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For more information, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the Carbon\u00a0datasource configuration in the\u00a0<code>master-datasources.xml</code> file. The instructions are available in.</p> </li> <li> <p>Go\u00a0to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory\u00a0and update the\u00a0datasource references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files\u00a0to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the files relevant to your BPMN/BPEL database:\u00a0</p> <ul> <li>If you are using BPMN, update the\u00a0<code>activiti-datasources.xml</code>\u00a0file with the datasource connection details.</li> <li>If you are using BPEL, update the\u00a0<code>bps-datasources.xml</code>\u00a0file with the datasource connection details.</li> </ul> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> </li> <li> <p>Open the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code>\u00a0file and change\u00a0<code>GenerateDdl</code>\u00a0to\u00a0<code>false</code>.\u00a0You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</p> <pre><code>&lt;GenerateDdl\\&gt;false&lt;/GenerateDdl\\&gt;\n</code></pre> </li> <li> <p>Check for any further configurations that were done for the Business Process profile of EI 6.3.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</p> <ol> <li> <p><code>humantask.xml</code></p> </li> <li> <p><code>axis2.xml</code></p> </li> <li> <p><code>bps.xml</code></p> </li> <li> <p><code>Activiti.xml</code></p> </li> <li> <p><code>Tenant-mgt.xml</code></p> </li> <li> <p><code>b4p-coordination-config.xml</code></p> </li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores,     caching, mounting, transports, etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations\u00a0for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages\u00a0in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code>\u00a0directory     to the same directory in EI 6.6.0.<code></code></p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory,     copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.3.0_HOME&gt;/wso2/business-process/repository/tenants</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces\u00a0log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.3.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.3.0, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or\u00a0 <code>commons.logging</code> dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</p> </li> <li> <p>If\u00a0<code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> </ol> </li> <li> <p>Follow the instructions on configuring log4j2 \u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.3.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.3.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see\u00a0Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/","title":"Upgrading from WSO2 EI 6.4.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (EI) 6.6.0 from WSO2 EI 6.4.0. This covers the steps for upgrading all of the following profiles in WSO2 EI:</p> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release.</li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <ul> <li>ESB\u00a0profile</li> <li>Message Broker\u00a0profile</li> <li>Business Process\u00a0profile</li> <li>Analytics\u00a0profile</li> </ul> <p>See the following topics for details:</p> <ul> <li>Upgrading from WSO2 EI 6.4.0</li> <li>Preparing to upgrade</li> <li>ESB profile<ul> <li>Upgrading the databases</li> <li>Update the database structure\u00a0</li> <li>Update the data</li> <li>Migrating configurations of the ESB profile</li> <li>Updating the configuration files manually</li> <li>Migrating artifacts of the ESB profile</li> </ul> </li> <li>Analytics profile</li> <li>Message Broker profile<ul> <li>Migrating configurations of the Message Broker profile</li> <li>Migrating artifacts of the Message Broker profile</li> </ul> </li> <li>Business Process profile<ul> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> </ul> </li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the\u00a0databases\u00a0in your WSO2 EI 6.4.0 instance.</li> <li>Copy the\u00a0<code>&lt;EI_6.4.0_HOME&gt;</code>\u00a0directory to back up the product configurations.</li> <li>Go to the\u00a0WSO2 Integration website     and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from EI 6.4.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same\u00a0 databases \u00a0that you used for the ESB profile of EI 6.4.0 with EI 6.6.0.\u00a0However, you need to apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the downloaded file and s elect the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks\u00a0that were stored in the registry database by EI 6.4.0.</p> <p>Info</p> <p>EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>taskNumber</code> (in EI 6.4.0) to <code>TASK_PREFIX</code> + <code>messageProcessorName</code> + <code>SYMBOL_UNDERSCORE</code> + <code>taskNumber</code> (in EI 6.6.0).</p> <p>When you run the migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.4.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases\u00a0(which are used for registry data and user management data):</p> <p>Connecting to the database</p> <ol> <li> <p>Open the\u00a0<code>master-datasources.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code>\u00a0directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the\u00a0<code>master-datasources.xml</code>\u00a0file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the\u00a0<code>registry.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory) and specify the datasource name (as defined in step \\'a\\').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;   \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt;\n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the\u00a0<code>user-mgt.xml</code>\u00a0file (stored in the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/</code>\u00a0directory), and update the following database connection parameters under the\u00a0<code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code>\u00a0section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the\u00a0system administrator configurations\u00a0and the\u00a0datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li> <p>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</p> </li> <li> <p>Copy the\u00a0<code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update\u00a0the following properties.</p> <p>admin.user.name   The user name of the system administrator.</p> <p>Note that you do not need to update the keystore-related properties given in the file.</p> </li> <li> <p>Copy the migration JAR file, which you received from WSO2 Support, into the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> <li> <p>Open a terminal and navigate to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/bin/</code>\u00a0directory.</p> </li> <li> <p>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei640</code> command as shown below.</p> <p>On MacOS/Linux/CentOS</p> <p>Open a terminal and execute the following command:</p> <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei640\n</code></pre> <p>On Windows</p> <p>Open a terminal and execute the following command:</p> <pre><code>integrator.bat -Dmigrate.from.product.version=ei640\n</code></pre> </li> <li> <p>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar)</code>\u00a0from the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/dropins/</code>\u00a0directory.</p> </li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in     the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.4.0.\u00a0</p> </li> <li> <p>If you have secondary user stores created for the ESB profile of EI 6.4.0, you need to copy the \\'userstore\\' folder in     the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If there are any third-party libraries used with EI 6.4.0 that you want to migrate, copy the relevant libraries from EI 6.4.0 to EI 6.6.0:</p> <ul> <li>If you have used JMS libraries, JDBC libraries, etc.,\u00a0copy the contents from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code> directory to the same     directory in EI 6.6.0.</li> <li>If\u00a0you have used OSGi bundles such as SVN kit etc., copy the contents from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/dropins</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> </ol> Updating the configuration files manually <p>To migrate the configurations from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in     the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available in.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/conf</code>\u00a0directory and update the\u00a0datasource\u00a0references in the\u00a0<code>user-mgt.xml</code>\u00a0and\u00a0<code>registry.xml</code>\u00a0files to match the updated configurations in the\u00a0<code>master-datasources.xml</code>\u00a0file. The instructions are available in.</p> </li> <li> <p>Check for any other configurations that were done for EI 6.4.0 based on your solution, and update the configuration files in EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations configurations of the Message Broker profile) for the ESB profile.</p> </li> </ol> <p>Info</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the \u00a0jcifs-1.3.17.jar from here\u00a0and then place it in <code>&lt;EI_6.6.0_HOME&gt;/lib</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in\u00a0this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in EI 6.4.0 to EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>To migrate connector artifacts:\u00a0 <ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of EI 6.6.0, and copy the JARs from the directory by the same name in EI 6.4.0. Note that this directory will not exist in your EI 6.4.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/dataservices</code>     directory to the same directory in EI 6.6.0.</li> <li>If you have custom artifacts created in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/deployment/server/</code>\u00a0directory, copy them to the same directory in EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/repository/tenants</code>\u00a0directory to the same     directory in EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#analytics-profile","title":"Analytics profile","text":"<p>If you have configured EI 6.4.0 to publish ESB data to the Analytics profile, you need to enable the same in EI 6.4.0. To do this, follow the instructions in Publishing ESB Data to Analytics.</p> <p>Note</p> <p>Note that from EI 6.6.0 onwards, you need to configure the <code>&lt;EI_6.6.0_HOME&gt;/conf/carbon.xml</code> file to enable the ESB server to publish statistics to the Analytics profile, whereas in the EI 6.4.0 and older versions you need to configure the <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code> and <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code> files instead.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from EI 6.4.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.4.0 to EI 6.6.0:</p> <ol> <li>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code>directory to the same directory EI 6.6.0.</li> <li>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Message Broker profile of EI 6.4.0 from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of EI 6.4.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</li> </ol> <p>To migrate the configurations from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For instructions, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code>\u00a0directory\u00a0and update the Carbon\u00a0datasource\u00a0configuration in the\u00a0<code>master-datasources.xml</code>\u00a0file.\u00a0The instructions are available     in.</p> </li> <li> <p>Update the configurations related to the broker-specific database in the\u00a0<code>master-datasources.xml</code>\u00a0file and other related configurations files. See\u00a0Changing the Default Broker for instructions.</p> </li> <li> <p>Go to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the\u00a0datasource\u00a0references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in EI 6.4.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of EI 6.6.0:</p> <ol> <li> <p><code>broker.xml</code></p> </li> <li> <p><code>metrics.xml</code></p> </li> <li> <p><code>metrics-properties.xml</code></p> </li> <li> <p><code>messaging-event-broker.xml</code></p> </li> <li> <p>Check configurations related to external user stores, caching,     mounting, transports etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations for the Message Broker profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/broker/repository/tenants</code>\u00a0directory to the same directory in EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from EI 6.4.0 to EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Copy the database\u00a0connector JAR files stored in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/lib</code>\u00a0directory to the same directory in EI     6.6.0.\u00a0For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</p> </li> <li> <p>Copy the\u00a0keystores\u00a0and\u00a0truststores\u00a0used in the Business Process profile of EI 6.4.0 from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/resources/security</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have secondary user stores created for the Business Process profile of EI 6.4.0, you need to copy the <code>userstore</code> folder in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory to the same directory in EI 6.6.0.</p> </li> </ol> <p>updating_configs_bp To migrate the configurations from EI 6.4.0 to EI 6.6.0:</p> <ol> <li> <p>Update the configuration files with information of the migrated\u00a0keystores\u00a0and\u00a0truststores. For more information, see\u00a0Configuring Keystores in WSO2 products.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the Carbon\u00a0datasource configuration in the\u00a0<code>master-datasources.xml</code> file. The instructions are available in.</p> </li> <li> <p>Go\u00a0to\u00a0the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory\u00a0and update the\u00a0datasource references in\u00a0the\u00a0<code>user-\u00admgt.xml</code> and\u00a0<code>registry.xml</code> files\u00a0to match the updated configurations in\u00a0the <code>master\u00ad-datasources.xml</code> file.</p> </li> <li> <p>Go to the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code>\u00a0directory and update the files relevant to your BPMN/BPEL database:\u00a0</p> <ul> <li>If you are using BPMN, update the\u00a0<code>activiti-datasources.xml</code>\u00a0file with the datasource connection details.</li> <li>If you are using BPEL, update the\u00a0<code>bps-datasources.xml</code>\u00a0file with the datasource connection details.</li> </ul> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> </li> <li> <p>Open the\u00a0<code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code>\u00a0file and change\u00a0<code>GenerateDdl</code>\u00a0to\u00a0<code>false</code>.\u00a0You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</p> <pre><code>&lt;GenerateDdl\\&gt;false&lt;/GenerateDdl\\&gt;\n</code></pre> </li> <li> <p>Check for any further configurations that were done for the Business Process profile of EI 6.4.0 based on your solution. For example, check and update the following configurations in EI 6.6.0:</p> <ol> <li> <p><code>humantask.xml</code></p> </li> <li> <p><code>axis2.xml</code></p> </li> <li> <p><code>bps.xml</code></p> </li> <li> <p><code>Activiti.xml</code></p> </li> <li> <p><code>Tenant-mgt.xml</code></p> </li> <li> <p><code>b4p-coordination-config.xml</code></p> </li> <li> <p><code>process-cleanup.properties</code></p> </li> <li> <p>Check the configurations related to external user stores,     caching, mounting, transports, etc.</p> </li> </ol> </li> <li> <p>See the instructions on migrating log4j configurations\u00a0for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li> <p>Copy the <code>BPEL.zip</code> packages\u00a0in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>Copy the <code>BPMN.bar</code> packages in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code>\u00a0directory     to the same directory in EI 6.6.0.<code></code></p> </li> <li> <p>Copy the <code>humantask.zip</code> packages in the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> <li> <p>If you have custom artifacts created in\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code>\u00a0directory,     copy them to the same directory in EI 6.6.0.</p> </li> <li> <p>If multitenancy is used, copy the tenant artifacts from\u00a0the\u00a0<code>&lt;EI_6.4.0_HOME&gt;/wso2/business-process/repository/tenants</code>\u00a0directory     to the same directory in EI 6.6.0.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>All profiles of EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces\u00a0log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in EI 6.4.0) to log4j2 (in EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.4.0, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or\u00a0 <code>commons.logging</code> dependencies with pax-logging dependency as shown below.</p> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n   &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n   &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</p> </li> <li> <p>If\u00a0<code>commons.logging</code> is imported using Import-Package add the version range.</p> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> </ol> </li> <li> <p>Follow the instructions on configuring log4j2 \u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.4.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.4.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the EI 6.6.0 product. For instructions on starting each of the profiles in the product, see\u00a0Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/","title":"Upgrading from WSO2 EI 6.5.0","text":"<p>This page walks you through the process of upgrading to WSO2 Enterprise Integrator (WSO2 EI) 6.6.0 from WSO2 EI 6.5.0. This will cover the steps for upgrading all of the following profiles in WSO2 EI:</p> <ul> <li>ESB profile</li> <li>Message Broker profile</li> <li>Business Process profile</li> <li>Analytics profile</li> </ul> <p>Info</p> <ul> <li>For information on what is new in this release and why you should upgrade, see About this Release. </li> <li>For more information on ports, see Default Ports of WSO2 Enterprise Integrator.</li> </ul> <p>See the following topics for details:</p> <ul> <li>Preparing to upgrade </li> <li>ESB profile</li> <li>Upgrading the databases<ul> <li>Update the database structure </li> <li>Update the data</li> </ul> </li> <li>Migrating configurations of the ESB profile</li> <li>Migrating artifacts of the ESB profile</li> <li>Analytics profile</li> <li>Message Broker profile</li> <li>Migrating configurations of the Message Broker profile </li> <li>Migrating artifacts of the Message Broker profile</li> <li>Business Process profile</li> <li>Migrating configurations of the Business Process profile</li> <li>Migrating artifacts of the Business Process profile</li> <li>Migrating Log4j configurations</li> <li>Starting the profiles</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites must be completed before upgrading:</p> <ul> <li>Create a backup of the databases in your WSO2 EI 6.5.0 instance.</li> <li>Copy the <code>&lt;EI_6.5.0_HOME&gt;</code> directory to back up the product configurations.</li> <li>Go to the WSO2 Integration website and download WSO2 EI 6.6.0.</li> <li>Install WSO2 EI 6.6.0.</li> </ul> <p>Info</p> <p>The downtime is limited to the time taken for switching databases in the production environment.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#esb-profile","title":"ESB profile","text":"<p>Follow the instructions given below to upgrade the ESB profile from WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#upgrading-the-databases","title":"Upgrading the databases","text":"<p>You can use the same databases that you used for the ESB profile of WSO2 EI 6.5.0 with WSO2 EI 6.6.0. However, you need to first apply the following updates.</p> Update the database structure <p>There may be changes in the database structure (schema) that is used in EI 6.6.0. To update the database schema:</p> <ol> <li>Navigate to the database migration scripts, which you received from WSO2 Support.</li> <li>Unzip the file and select the script relevant to your database type.</li> <li>Connect to the database and run the script.</li> </ol> <p>Your database schema is now updated for EI 6.6.0.</p> Update the data <p>You need to remove any instances of Message Processor Tasks that were stored in the registry database by WSO2 EI 6.5.0.</p> <p>Info</p> <p>WSO2 EI 6.6.0 requires Message Processor Tasks to be stored in the registry using a new naming convention. The naming convention has changed from <code>TASK_PREFIX + messageProcessorName + taskNumber</code> (in WSO2 EI 6.5.0) to <code>TASK_PREFIX + messageProcessorName + SYMBOL_UNDERSCORE + taskNumber</code> (in WSO2 EI 6.6.0). </p> <p>When you run the following migration client, the existing Task references in the registry will be removed. Later in this migration guide, when you migrate the integration artifacts from your EI 6.5.0 instance to EI 6.6.0, new records will be created in the registry with the new naming convention.</p> <p>Step 1: Set up the WSO2 EI 6.6.0 server</p> <p>Apply the following updates to your EI 6.6.0 server.</p> <p>Connect the ESB profile of EI 6.6.0 to your existing databases (which are used for registry data and user management data):</p> <ol> <li> <p>Open the <code>master-datasources.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources/</code> directory) and update the parameters given below.</p> <p>Tip</p> <p>By default, registry and user management data are stored in one database and is configured in the <code>master-datasources.xml</code> file. If you have separate databases for registry and user management data, you may need separate datasource configurations.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Open the <code>registry.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory) and specify the datasource name (as defined in step 'a').</p> <pre><code>&lt;dbConfig name=\"wso2registry\"&gt;    \n    &lt;dataSource&gt;jdbc/MY_DATASOURCE_NAME&lt;/dataSource&gt; \n&lt;/dbConfig&gt;\n</code></pre> </li> <li> <p>If a JDBC user store is used, open the <code>user-mgt.xml</code> file (stored in the <code>&lt;EI_6.6.0_HOME&gt;/conf/</code> directory), and update the following database connection parameters under the <code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;</code> section.</p> Element Description url The URL of the database. username and password The name and password of the database user. driverClassName The class name of the database driver. </li> <li> <p>Further, update the system administrator configurations and the datasource name in the <code>user-mgt.xml</code> file. See Configuring a JDBC user store for instructions.</p> </li> </ol> <p>Step 2: Run the migration client</p> <p>Now, let's run the migration client from EI 6.6.0. This client changes any message processor data according to the new naming convention.</p> <ol> <li>Create a folder named <code>migration</code> inside <code>&lt;EI_6.6.0_HOME&gt;</code>.</li> <li>Copy the <code>migration-conf.properties</code> file, which you received from WSO2 Support, to the <code>&lt;EI_6.6.0_HOME&gt;/migration</code> folder and update the following properties:</li> </ol> admin.user.name The user name of the system administrator. <p>Note </p> <p>You do not need to update the keystore-related properties given in the file.</p> <ol> <li>Copy the migration JAR file, which you received from WSO2 Support, into the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> <li>Open a terminal and navigate to the <code>&lt;EI_6.6.0_HOME&gt;/bin/</code> directory.</li> <li>Execute the product startup script with the <code>-Dmigrate.from.product.version=ei650</code> command as shown below.</li> </ol> <p>On MacOS/Linux/CentOS Open a terminal and execute the following command:     <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei650\n</code></pre></p> <p>On Windows Open a terminal and execute the following command:     <pre><code>integrator.bat -Dmigrate.from.product.version=ei650\n</code></pre></p> <ol> <li>Once the migration is successful, stop the server and delete the migration JAR (<code>org.wso2.carbon.ei.migration-6.6.0.jar</code>) from the <code>&lt;EI_6.6.0_HOME&gt;/dropins/</code> directory.</li> </ol> <p>You can now migrate the configurations and artifacts for the ESB profile as explained below and start the ESB profile.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-configurations-of-the-esb-profile","title":"Migrating configurations of the ESB profile","text":"<p>Info</p> <p>Do not copy configuration files directly between servers. Instead, update the files manually.</p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.5.0_HOME&gt;/lib</code>  directory to the same directory in WSO2 EI 6.6.0.</li> <li>Copy the keystores and truststores used in the ESB profile of WSO2 EI 6.5.0 from the <code>&lt;EI_6.5.0_HOME&gt;/repository/resources/security</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for the ESB profile of WSO2 EI 6.5.0, you need to copy the 'userstore' folder in the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If there are any third-party libraries used with WSO2 EI 6.5.0 that you want to migrate, copy the relevant libraries from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</li> <li>If you have used JMS libraries, JDBC libraries, etc., copy the contents from the <code>&lt;EI_6.5.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have used OSGi bundles such as SVN kit etc., copy the contents from the <code>&lt;EI_6.5.0_HOME&gt;/dropins</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ol> Updating the configuration files manually <p>To migrate the configurations from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Check for any other configurations that were done for WSO2 EI 6.5.0 based on your solution, and update the configuration files in WSO2 EI 6.6.0 accordingly. For example, check the configurations related to external user stores, caching, mounting, transports, etc.</li> <li>See the instructions on migrating log4j configurations for the ESB profile.</li> </ol> <p>Info:</p> <p>WSO2 EI no longer packs the smb provider by default. If you need to use the VFS SMB feature, you can download the <code>jcifs-1.3.17.jar</code> from here and then place it in <code>&lt;EI_6.6.0_HOME/lib&gt;</code> directory. Please note that (since the above library is licensed under LGPL version 2.1) by downloading and installing the library you have to comply with the terms of LGPL version 2.1 and its restrictions as found in this page.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-artifacts-of-the-esb-profile","title":"Migrating artifacts of the ESB profile","text":"<p>You should manually deploy the Composite Application Archive (C-APP) files that you have in WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p> <p>Warning</p> <p>If you have a class mediator packed in a CAR, all the artifacts using that mediator should also be included in the same CAR.</p> <ul> <li>To migrate mediation artifacts including message flow configurations, copy the required Synapse artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>To migrate connector artifacts:<ul> <li>Create a folder named synapse-libs in the <code>&lt;EI_6.6.0_HOME&gt;/repository/deployment/server/synapse-configs/default/</code> directory of WSO2 EI 6.6.0, and copy the JARs from the directory by the same name in WSO2 EI 6.5.0. Note that this directory will not exist in your WSO2 EI 6.5.0 distribution if no connectors are used.</li> <li>Copy the JARs from the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/synapse-configs/default/imports</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul> </li> <li>To migrate the data service artifacts, copy the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/dataservices</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.5.0_HOME&gt;/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#analytics-profile","title":"Analytics profile","text":"<p>If you have configured EI 6.5.0 to publish ESB data to the Analytics profile, you need to enable the same in EI 6.6.0. To do this, follow the instructions in Publishing ESB Data to Analytics.</p> <p>Note:</p> <p>From EI 6.6.0 onwards, you need to configure the <code>&lt;EI_HOME&gt;/conf/carbon.xml</code> file to enable the ESB server to publish statistics to the Analytics profile, whereas in the EI 6.5.0 and older versions you need to configure the <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code> and <code>&lt;EI_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code> files instead.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#message-broker-profile","title":"Message Broker profile","text":"<p>Follow the instructions given below to upgrade the Message Broker profile from WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-configurations-of-the-message-broker-profile","title":"Migrating configurations of the Message Broker profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.5.0_HOME&gt;/lib</code>  directory to the same directory WSO2 EI 6.6.0.</li> <li>Copy the keystores and truststores used in the Message Broker profile of WSO2 EI 6.5.0 from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/broker/repository/resources/security</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for the Message Broker profile of WSO2 EI 6.5.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/broker/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ol> <p>To migrate the configurations from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For instructions, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. See Changing the Carbon Database for instructions.</li> <li>Update the configurations related to the broker-specific database in the <code>master-datasources.xml</code> file and other related configurations files. See Changing the Carbon Database for instructions.</li> <li> <p>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/broker/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</p> </li> <li> <p>Check for any further configurations that were done for the Message Broker profile in WSO2 EI 6.5.0 based on your solution. For example, check and update the following configurations in the Message Broker profile of WSO2 EI 6.6.0:</p> </li> <li><code>broker.xml</code></li> <li><code>metrics.xml</code></li> <li><code>metrics-properties.xml</code></li> <li><code>messaging-event-broker.xml</code></li> <li>Check configurations related to external user stores, caching, mounting, transports etc.</li> <li>See the instructions on migrating log4j configurations for the Message Broker profile.</li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-artifacts-of-the-message-broker-profile","title":"Migrating artifacts of the Message Broker profile","text":"<p>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/broker/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#business-process-profile","title":"Business Process profile","text":"<p>Follow the instructions given below to upgrade the Business Process profile from WSO2 EI 6.5.0 to WSO2 EI 6.6.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-configurations-of-the-business-process-profile","title":"Migrating configurations of the Business Process profile","text":"<p>Do not copy configuration files directly between servers. Instead, update the files manually. </p> <p>To migrate all the required folders, files, libraries, etc. from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Copy the database connector JAR files stored in the <code>&lt;EI_6.5.0_HOME&gt;/lib</code> directory to the same directory in WSO2 EI 6.6.0. For example, the JAR for the Oracle database (<code>ojdbc7.jar</code>) can be copied.</li> <li>Copy the keystores and truststores used in the Business Process profile of WSO2 EI 6.5.0 from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/resources/security</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have secondary user stores created for the Business Process profile of WSO2 EI 6.5.0, you need to copy the <code>userstore</code> folder in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ol> <p>To migrate the configurations from WSO2 EI 6.5.0 to WSO2 EI 6.6.0:</p> <ol> <li>Update the configuration files with information of the migrated keystores and truststores. For more information, see Configuring Keystores in WSO2 products.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the Carbon datasource configuration in the <code>master-datasources.xml</code> file. For instructions, see Changing the Carbon Database and select your database type.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf</code> directory and update the datasource references in the <code>user-mgt.xml</code> and <code>registry.xml</code> files to match the updated configurations in the <code>master-datasources.xml</code> file. The instructions are available in Changing the Carbon Database.</li> <li>Go to the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/datasources</code> directory and update the files relevant to your BPMN/BPEL database:</li> <li>If you are using BPMN, update the <code>activiti-datasources.xml</code> file with the datasource connection details.</li> <li>If you are using BPEL, update the <code>bps-datasources.xml</code> file with the datasource connection details.</li> </ol> <p>For instructions, see Changing the Default Databases for BPMN and BPEL.</p> <ol> <li>Open the <code>&lt;EI_6.6.0_HOME&gt;/wso2/business-process/conf/humantask.xml</code> file and change <code>GenerateDdl</code> to <code>false</code>. You can see the deployed human task packages with the version in the console. A migration success message is printed once the migration completes successfully.</li> </ol> <pre><code>&lt;GenerateDdl&gt;false&lt;/GenerateDdl&gt;\n</code></pre> <ol> <li>Check for any further configurations that were done for the Business Process profile of WSO2 EI 6.5.0 based on your solution. For example, check and update the following configurations in WSO2 EI 6.6.0:<ol> <li><code>humantask.xml</code></li> <li><code>axis2.xml</code></li> <li><code>bps.xml</code> </li> <li><code>Activiti.xml</code> </li> <li><code>Tenant-mgt.xml</code> </li> <li><code>b4p-coordination-config.xml</code> </li> <li><code>process-cleanup.properties</code></li> </ol> </li> <li> <p>Check the configurations related to external user stores, caching, mounting, transports, etc.</p> </li> <li> <p>See the instructions on migrating log4j configurations for the Business Process profile.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-artifacts-of-the-business-process-profile","title":"Migrating artifacts of the Business Process profile","text":"<p>Follow the steps given below:</p> <ul> <li>Copy the <code>BPEL.zip</code> packages in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpel</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>Copy the <code>BPMN.bar</code> packages in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/bpmn</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>Copy the <code>humantask.zip</code> packages in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/humantasks</code> directory to the same directory in WSO2 EI 6.6.0.</li> <li>If you have custom artifacts created in the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/deployment/server/</code> directory, copy them to the same directory in WSO2 EI 6.6.0.</li> <li>If multitenancy is used, copy the tenant artifacts from the <code>&lt;EI_6.5.0_HOME&gt;/wso2/business-process/repository/tenants</code> directory to the same directory in WSO2 EI 6.6.0.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#migrating-log4j-configurations","title":"Migrating Log4j configurations","text":"<p>Note:</p> <p>All profiles of WSO2 EI 6.6.0 use log4j2 instead of log4j. Therefore, the following configurations apply to all profiles of WSO2 EI.</p> <p>WSO2 EI 6.6.0 is based on Carbon Kernel 4.5.0, which introduces log4j2. Also, the carbon.logging jar is not packed with the EI 6.6.0 distribution and the pax-logging-api is used instead.</p> <p>Follow the instructions given below to migrate from log4j (in WSO2 EI 6.5.0) to log4j2 (in WSO2 EI 6.6.0).</p> <ol> <li> <p>If you have used a custom log4j component in EI 6.5.0, apply the following changes to your component:</p> <ol> <li>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.</li> </ol> <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n    &lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n    &lt;version&gt;${pax.logging.api.version}&lt;/version&gt; \n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt; \n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre> <ol> <li>If log4j dependency is directly used, apply one of the options given below.</li> </ol> <p>Option 1</p> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.</p> <pre><code>&lt;dependency&gt; \n    &lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n    &lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n    &lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt; \n&lt;/dependency&gt;\n</code></pre> <p>Option 2</p> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> <ol> <li>If commons.logging is imported using Import-Package add the version range.</li> </ol> <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\" \n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre> </li> <li> <p>Follow the instructions on configuring log4j2 to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-6.6.0/ei-6.5.0-to-ei-6.6.0/upgrading-from-WSO2-EI-6.5.0/#starting-the-profiles","title":"Starting the profiles","text":"<p>You can now start the WSO2 EI 6.6.0 product. For instructions on starting each of the profiles in the product, see Running the Product.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/","title":"Migrating from WSO2 EI 6.x to WSO2 EI 7.0","text":"<p>This guide provides an overview of the recommended migration strategy for migrating from WSO2 EI 6.x to WSO2 EI 7.0. Note that these guidelines are only applicable when you are migrating the ESB profile of EI 6.x to the Micro Integrator in EI 7.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#before-you-begin","title":"Before you begin","text":"<p>See the following topics to understand the benefits of moving to EI 7.0 from EI 6.x:</p> <ul> <li>Comparison: EI 6.x vs EI 7.0</li> <li>Advantages of using the Micro Integrator in EI 7.0</li> <li>Comparison: ESB profile of EI 6.x vs Micro Integrator of EI 7.0</li> <li>Features removed from the Micro Integrator of EI 7.0</li> </ul> <p>Note that EI 7 is a WUM-only release, which means that manual patches are not allowed. You can use WSO2 Update Manager(WUM) to get the latest fixes or updates for this release.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#why-migrate-to-ei-70","title":"Why migrate to EI 7.0?","text":"<p>If you are an EI 6.x user, migration is recommended for the following requirements:</p> <ul> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, container-friendly runtime.</li> <li>You need native support for Kubernetes.</li> </ul> <p>The decision on migration to the new platform needs to be taken by considering several factors including the preferred architectural style (centralized vs microservices), deployment environment in your organization, and the effort it takes to migrate existing integration configurations.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Both the ESB profile of EI 6.x and the Micro Integrator of EI 7.0 uses the same ESB runtime and the same developer tool (WSO2 Integration Studio) for developing integrations. Most of the mediation(ESB) and data integration features available in the ESB profile of EI 6.x are available in the Micro Integrator as well. Some of the features are removed from WSO2 Micro Integrator as they are not needed for microservice deployments or they are not frequently used.</p> <p>In summary, all the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes. However, EI 7.0 introduces a Toml-based configuration strategy to replace XML configurations, which simplifies your product configurations.</p> <p>See the detailed comparison of EI 6.5 and EI 7.0 to understand what has changed between the ESB profile of EI 6.x.x and the Micro Integrator of EI 7.0.</p> <p>Follow the instructions below to start the migration!</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the existing database used by the current EI 6.x.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li>Download and install EI 7.0 in your environment. The home directory of your installation will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.<ul> <li>On a VM</li> <li>On Docker</li> <li>On Kubernetes</li> </ul> </li> <li> <p>You can use WSO2 Update Manager to get the latest available updates.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-databases","title":"Migrating databases","text":"<p>If you are already using a JDBC user store with EI 6.x.x, you can connect the same database to the Micro Integrator of EI 7 by simply updating the user store configurations in the Micro Integrator.</p> <p>Note</p> <p>You cannot manage users and roles when you use a JDBC user store with the Micro Integrator. Therefore, be sure that your database is already up-to-date before connecting it to the Micro Integrator. Alternatively, you can shift to an LDAP user store. Read more about user stores in the Micro Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file based registry instead of a database (which is used in EI 6.x.x). Note the following when migrating the registry:</p> <ul> <li>If the artifacts in EI 6.x.x are added in carbon applications developed using WSO2 Integration Studio, you can directly migrate the artifacts to the Micro Integrator of EI 7.</li> <li>If the artifacts are added through the management console in EI 6.x.x, first download the artifacts from the management console, and then add to the <code>&lt;MI_HOME&gt;/registry/</code> folder by maintaining the same resource structure.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside <code>&lt;EI_6.x.x_HOME&gt;/repository/deployment</code> to the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_6.x.x_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;OLD_EI_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files in the <code>&lt;EI_6.x.x_HOME&gt;/repository/resources/security</code> directory to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/migrating-from-ei-6.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>WSO2 EI 6.x.x versions supported multiple configuration files such as carbon.xml, synapse.properties, and axis2.xml. With the new configuration model in the Micro Integrator of EI 7, product configurations are primarily handled by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory). The log4j2 configurations are handled in the <code>log4j2.properties</code>.</p> <p>Migrating to TOML configurations</p> <p>See the product configuration catalog for the complete list of configurations that are available for the Micro Integrator.</p> <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to reach WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Migrating Log4j configurations</p> <p>Older versions of the WSO2 EI 6.x.x family (EI 6.5.0 and earlier) use log4j. In  WSO2 EI 7 Micro Integrator, the <code>carbon.logging.jar</code> file is not packed and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>Therefore, you need to follow the instructions given below to migrate from log4j (in EI 6.5.0 or earlier version) to log4j2 (in EI 7 Micro Integrator).</p> <p>If you have used a custom log4j component in you you older EI version, apply the following changes to your component:</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.         <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li> <p>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> </li> <li> <p>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</p> </li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.         <pre><code>org.apache.commons.logging; \nversion=\"${commons.logging.version.range}\"\n&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2\u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/","title":"Upgrade WSO2 Enterprise Integrator","text":"<p>This document walks you through the process of upgrading WSO2 Enterprise Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/#why-upgrade","title":"Why upgrade?","text":"<p>There are multiple reasons why you would want to upgrade the WSO2 product to the latest version. These reasons include but are not limited to the following.</p> <ul> <li>The current product version you are using is reaching its end of life. To see if this is the case, view the support matrix documentation.</li> <li>You want to leverage the new features of the latest version of the product.</li> <li>The version of the product you have does not have certain security and bug fixes that you require.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/#what-has-changed","title":"What has changed","text":"<p>Over the course of its lifetime, WSO2 Enterprise Integrator has changed significantly and some of the features you were using in an older version may not work the same way.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.0.0/upgrading-wso2-ei/#get-started","title":"Get started","text":"<p>To make sure that the upgrade process is smooth and you have the best experience, WSO2 recommends that you reach out to WSO2 Support in order to upgrade WSO2 Enterprise Integrator with minimal difficulty.</p> <p>If you are ready to start the migration process, follow the instructions given below.</p> <p>If you already have a WSO2 subscription, create a support ticket with your migration requirements and one of our support engineers will get in touch with you.</p> <ul> <li>Create a ticket</li> </ul> <p>If you are not a WSO2 customer and still need migration assistance and resources, please contact us through the following link. One of our Account Managers will get in touch with you to help.</p> <ul> <li>Contact us</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/","title":"Migrating from WSO2 EI 6.x to WSO2 EI 7.1","text":"<p>This guide provides the recommended strategy for migrating from the ESB profile of WSO2 EI 6.x to the Micro Integrator of WSO2 EI 7.1.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#why-migrate-to-ei-71","title":"Why migrate to EI 7.1?","text":"<p>Listed below are some of the advantages of moving to EI 7.1 from the ESB.</p> <ul> <li> <p>The Micro Integrator of EI 7.1 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, as well as the Micro Integrator of WSO2 EI 7.x contains versions of the same WSO2 ESB runtine.</p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The most significant change in EI 7.1 is the Toml-based configuration strategy, which replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used. </p> </li> </ul> <p>Migration from WSO2 ESB is recommended for the following requirements:</p> <ul> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of EI 7.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of EI 7.1 contains changes that will impact your migration process. Be sure to read the following resources before you start. </p> <ul> <li>Comparison: ESB vs the Micro Integrator</li> <li>Features removed from the Micro Integrator</li> </ul> </li> <li> <p>Note that EI 7.x is a WUM-only release, which means that manual patches are not allowed. You can use WSO2 Update Manager(WUM) to get the latest fixes or updates for this release.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the EI 6.x distribution (<code>&lt;EI_6.x.x_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current EI 6.x.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install EI 7.1 in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> <ul> <li>Install the product using the Installer.</li> <li>Install the product using the binary distribution.</li> </ul> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your EI 7.1 distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are already using a JDBC or LDAP user store with EI 6.x, you can simply connect the same to the Micro Integrator.</p> <p>Note that secondary user stores are currently not supported in the Micro Integrator of EI 7.1.0.</p> <p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing ESB user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> </ul> <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>Update the <code>[user_store]</code> section and other configurations as given below.</p> <p>RDBMS User Store <pre><code>[user_store]\ntype = \"database\"\nread_only = \"false\"\n\n[[datasource]]\nid = \"WSO2_USER_DB\"\nurl= \"jdbc:mysql://localhost:3306/userdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n[realm_manager]\ndata_source = \"WSO2_USER_DB\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Only LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_only_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Write LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Your EI 6.x registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of EI 6.x among multiple nodes, you can do the same for the file-based registry of EI 7.1. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of EI 7.1.</li> </ul> <p>The Micro Integrator uses a file-based registry instead of a database (which is used in EI 6.x). Note the following when migrating the registry:</p> <ul> <li>If the registry resources in EI 6.x are added via carbon applications developed using WSO2 Integration Studio, you can directly migrate the artifacts to the Micro Integrator of EI 7.1. Copy the carbon applications from the <code>&lt;EI_6.x.x_HOME&gt;/repository/deployment/server/carbonapps</code> folder to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li> <p>If the registry resources are added through the management console in EI 6.x.x, you need to convert them to a Registry Resources module in WSO2 Integration Studio and deploy them via a Carbon Application.</p> <p>Warning</p> <p>Known Issues</p> <p>A registry migration using this method is currently not possible due to the known issues listed below. Please contact WSO2 if you\u00a0require a registry migration.</p> <ul> <li> <p>issue1258</p> </li> <li> <p>issue19770</p> </li> <li> <p>issue1257</p> </li> </ul> <p>Use one of the following approaches:</p> <ul> <li>Checkout the Registry Resources from the EI 6.x.x server directly into the Registry Resources module in WSO2 Integration Studio.</li> <li>Download the Registry Resources from EI 6.x.x and import them into the Registry Resources module in WSO2 Integration Studio.</li> </ul> <p>Note</p> <p>Once you have imported the Registry Resources into WSO2 Integration Studio, open the resource editor and make sure that the media type of the resource is set properly.    </p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective from EI 6.4.0 onwards. Therefore, if you are migrating from an EI version older than EI 6.4.0, you need to apply these changes to the artifacts before the migration.</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>The recommended way to create integration artifacts (in EI 6.x or EI 7.x ) is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;EI_6.x.x_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of EI 6.x, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to EI 6.x via a composite application with the Connector Exporter Project, the same can be used in EI 7.1 seamlessly. Simply copy the CAR file in EI 6.x to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 5.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in EI 7.1.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;EI_6.x.x_HOME&gt;/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;EI_6.x.x_HOME&gt;/lib</code> directory, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>WSO2 EI no longer packs the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator of EI 7.1. Therefore, if you used multiple tenants in your EI 6.x deployment, you can replicate the set up in EI 7.1 by using separate Micro Integrator nodes.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;EI_6.x.x_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in EI 6.x.x via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, <code>axis2.xml</code>, etc.</li> <li>Micro Integrator of EI 7.1 provides a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2, which are configured in the <code>log4j2.properties</code> file. Prior to EI 6.6.0, all ESB versions use log4j instead of log4j2.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to reach WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous EI versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code>&lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n&lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n&lt;/clustering&gt;\n</code></pre></p> <p>TOML configuration <pre><code># Cluster coordination database connection.\n[[datasource]]\nid = \"WSO2_COORDINATION_DB\"\nurl= \"jdbc:mysql://localhost:3306/clusterdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n# Identifying nodes in the cluster.\n[cluster_config]\nnode_id = \"node-1\"\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB profile, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;EI_6.x.x_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;E1_6.x.x_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuraton files in the ESB profile of EI 6.x.x. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n      &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> </li> </ul> <p>TOML configuration <pre><code>  [server]\n  offset  = 0\n</code></pre></p> <pre><code>Find more [parameters](https://ei.docs.wso2.com/en/7.1.0/micro-integrator/references/config-catalog/#deployment).\n</code></pre> <ul> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/&gt;wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters. </p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n     &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n     &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n     &lt;jndiConfig&gt;\n         &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n     &lt;/jndiConfig&gt;\n     &lt;definition type=\"RDBMS\"&gt;\n         &lt;configuration&gt;\n             &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n             &lt;username&gt;wso2carbon&lt;/username&gt;\n             &lt;password&gt;wso2carbon&lt;/password&gt;\n             &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n             &lt;maxActive&gt;50&lt;/maxActive&gt;\n             &lt;maxWait&gt;60000&lt;/maxWait&gt;\n             &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n         &lt;/configuration&gt;\n     &lt;/definition&gt;\n &lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\nid = \"WSO2_CARBON_DB\"\nurl= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\nusername=\"username\"\npassword=\"password\"\ndriver=\"org.h2.Driver\"\npool_options.maxActive=50\npool_options.maxWait = 60000 # wait in milliseconds\npool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\"\n                          class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\"\n                          class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\"\n                          class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\"\n                         class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\"\n                         class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\"\n                          class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\"\n                          class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\" class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\" class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\" class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\" class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\" class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\" class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <pre><code>  Do not duplicate the `[transport.http]` TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (`listener_enabled` and `sender_enabled`).\n</code></pre> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <ul> <li>JMS transport sender</li> </ul> <pre><code>  **XML configuration**\n  ```\n  &lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n  ```\n\n  **TOML configuration**\n  ```\n  [transport.jms]\n  sender_enable = true\n  ```\n\n  Find more [parameters](https://ei.docs.wso2.com/en/7.1.0/micro-integrator/references/config-catalog/#jms-transport-sender-non-blocking-mode).\n</code></pre> <ul> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code> synapse.threads.core = 20\n synapse.threads.max = 100\n ```\n\n**TOML configuration**\n</code></pre>   [mediation]    synapse.core_threads = 20    synapse.max_threads = 100   ```</p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\n worker_pool_size_max=400\n worker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\n max_worker_pool_size = 400          # inferred default: 400\n worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code>http.user.agent.preserve=false\nhttp.server.preserve=true\nhttp.headers.preserve=Content-Type\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\npreserve_http_user_agent = false\npreserve_http_server_name = true\npreserve_http_headers = [\"Content-Type\"]\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\nconnectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code>queue.JMSMS=JMSMS\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.queue]\nJMSMS = \"JMSMS\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code>topic.MyTopic = example.MyTopic\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.topic]\nMyTopic = \"example.MyTopic\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n &lt;defaultLocationResolver&gt;\n     &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n &lt;/defaultLocationResolver&gt;     \n ```\n\n**TOML configuration**\n</code></pre>   [task_handling]    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"</p> <p>[[task_resolver]]    task_server_count = \"3\"    ```</p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>All ESB versions prior to EI 6.6.0 use log4j. In the WSO2 EI 7 Micro Integrator, the <code>carbon.logging.jar</code> file is not packed and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in EI 7 Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older EI version.</p> <ol> <li> <p>Replace carbon logging or commons.logging dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using commons.logging accordingly.</li> </ul> </li> <li> <p>If commons.logging is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\u00a0&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2\u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from EI 6.x, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in EI 7. See Encrypt Secrets for instructions.</p> <p>In case you need to obtain the plain-text passwords by decrypting the encrypted passwords in the EI 6.x, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> tool, which was provided by WSO2 Support, into the <code>&lt;EI_HOME&gt;/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>&lt;EI_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>migration-conf.properties</code> file, which was provided by WSO2 Support, into the migration directory and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh integrator.sh -Dmigrate.from.product.version=ei\n</code></pre></p> <p>On Windows <pre><code>integrator.bat -Dmigrate.from.product.version=ei\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;EI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;EI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in EI 6.x.</p> </li> </ol> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-6.x.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the Micro Integrator of EI 7.1.0. Therefore, see Configuring the HL7 transport to set up HL7 in the Micro Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/","title":"Migrating from WSO2 EI 7.0.x to WSO2 EI 7.1.x","text":"<p>This guide explains the recommended strategy for migrating from the Micro Integrator of WSO2 EI 7.0.0 to the Micro Integrator of WSO2 EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the database used by the current EI 7.0.x deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install EI 7.1 in your environment:</p> <ul> <li>Install the product using the Installer.</li> <li>Install the product using the binary distribution.</li> </ul> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your EI 7.0 distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are already using a JDBC or LDAP user store with the Micro Integrator of EI 7.0, you can simply connect the same to the Micro Integrator of EI 7.1 by updating the configuration details in <code>deployment.toml</code> file. Following is a set of high-level configurations. </p> <p>Tip</p> <p>See the instructions on configuring a user store for more information.</p> <p>```toml tab='RDBMS User Store' [user_store] type = \"database\" read_only = \"false\"</p> <p>[[datasource]] id = \"WSO2_USER_DB\" url= \"jdbc:mysql://localhost:3306/userdb\" username=\"root\" password=\"root\" driver=\"com.mysql.jdbc.Driver\"</p> <p>[realm_manager] data_source = \"WSO2_USER_DB\" </p> <p>[internal_apis.file_user_store] enable = false <pre><code>```toml tab='Read-Only LDAP User Store'\n[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_only_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>```toml tab='Read-Write LDAP User Store' [user_store] connection_url = \"ldap://localhost:10389\" connection_name = \"uid=admin,ou=system\" connection_password = \"admin\" user_search_base = \"ou=Users,dc=wso2,dc=org\" type = \"read_write_ldap\"</p> <p>[internal_apis.file_user_store] enable = false ```</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>The Micro Integrator uses a file-based registry. You can directly migrate the artifacts to the Micro Integrator of EI 7.1.0 by copying the carbon applications from the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0. </p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-artifacts","title":"Migrating artifacts","text":"<p>Copy the contents inside the <code>&lt;MI_HOME&gt;/repository/deployment</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy the jars inside the <code>&lt;MI_HOME&gt;/dropins</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0. The custom JARs can be copied to the <code>&lt;MI_HOME&gt;/lib</code> directory in EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder in the Micro Integrator of EI 7.0.0 to the same folder in EI 7.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Copy the configurations in the <code>deployment.toml</code> file of the Micro Integrator of EI 7.0.0 (such as database, transport, datasource configurations, etc.) to the <code>deployment.toml</code> file of the Micro Integrator in EI 7.1.0.</p> <p>Info</p> <p>If you have done any customization to the <code>&lt;MI_HOME&gt;/conf/internal-apis.xml</code> file in the Micro Integrator of EI 7.0.0, you have to move them to the <code>deployment.toml</code> file in EI 7.1.0. </p> <p>See the following topics for the TOML configurations that correspond to your configurations in the <code>internal-apis.xml</code> file:</p> <ul> <li>Management API Token Handler Parameters.</li> <li>Management API Token Store Parameters.</li> <li>Management API Token Parameters.</li> <li>Management API - Default User Store Parameters.</li> <li>Management API - Users Parameters.</li> <li>Management API - CORS Parameters.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>In version 7.0.0, secure vault was used to store sensitive information used in synapse configurations and the cipher tool was used for sensitive server configurations. In EI 7.1.0, all the sensitive information (in server configurations as well as synapse configuration) can simply be encrypted and stored using the cipher tool.</p> <p>To migrate the encrypted passwords from EI 7.0.0, you need to first obtain the plain-text passwords. We provide a migration tool, which allows you to decrypt already encrypted passwords in EI 7.0.0.  The plain-text values can then be added to the <code>[secrets]</code> section of the <code>deployment.toml</code> file of the Micro Integrator of EI 7.1.0 and re-encrypted by running the cipher tool. </p> <p>Follow the instructions given below.</p> <ol> <li>Download the tool.</li> <li> <p>Get the latest update for your existing EI 7.0.0 distribution by using WSO2 Update Manager.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> <li> <p>Copy the <code>org.wso2.mi.migration-1.2.0.jar</code> file to the <code>MI_HOME/dropins</code> folder in the Micro Integrator of EI 7.0.0.</p> </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p><code>bash tab='On Linux/Unix' sh micro-integrator.sh -Dmigrate.from.product.version=110</code></p> <p><code>bash tab='On Windows' micro-integrator.bat -Dmigrate.from.product.version=110</code></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to <code>&lt;MI_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;MI_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in the Micro Integrator of EI 7.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>Use the plain-text passwords and follow the normal procedure of encrypting secrets in EI 7.1 See Encrypting Secrets for instructions.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-ei-7.0.x/#migrating-hl7-transport","title":"Migrating Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the pack and the jars need to be added to the product manually. Please  refer Configuring the HL7 transport for more details.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/","title":"Migrating from WSO2 ESB 5.0 to WSO2 EI 7.1","text":"<p>This guide provides the recommended strategy for migrating from WSO2 ESB 5.0 to the Micro Integrator of WSO2 EI 7.1.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#why-migrate-to-ei-71","title":"Why migrate to EI 7.1?","text":"<p>Listed below are some of the advantages of moving to EI 7.1 from the ESB.</p> <ul> <li> <p>The Micro Integrator of EI 7.1 is now the most improved version of the battle-tested WSO2 ESB runtime.</p> <p>Tip</p> <p>WSO2 ESB 5.0, the ESB profile of WSO2 EI 6.x, as well as the Micro Integrator of WSO2 EI 7.x contains versions of the same WSO2 ESB runtine.</p> </li> <li> <p>All the ESB runtimes of WSO2 can use the same developer tool (WSO2 Integration Studio) for developing integrations. </p> </li> <li> <p>All the integration capabilities that you used in the ESB can be used in the Micro Integrator with minimal changes.</p> </li> <li> <p>The Micro Integrator contains improvements to ease your product experience.</p> <p>Note</p> <p>The most significant change in EI 7.1 is the Toml-based configuration strategy, which replaces the XML configurations in previous versions of the ESB runtime. Some of the features are removed from WSO2 Micro Integrator as they are not frequently used. </p> </li> </ul> <p>Migration from WSO2 ESB is recommended for the following requirements:</p> <ul> <li>You need to switch to a microservices architecture from the conventional centralized architecture.</li> <li>You need a more lightweight, user-friendly version of the battle-tested WSO2 ESB.</li> <li>You need a more lightweight, container-friendly runtime in a centralized architecture.</li> <li>You need native support for Kubernetes.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#before-you-begin","title":"Before you begin","text":"<p>Note the following:</p> <ul> <li>Ports are different in the Micro Integrator of EI 7.1.0. Find out about ports in the Micro Integrator.</li> <li> <p>The Micro Integrator of EI 7.1 contains changes that will impact your migration process. Be sure to read the following resources before you start. </p> <ul> <li>Comparison: ESB vs the Micro Integrator</li> <li>Features removed from the Micro Integrator</li> </ul> </li> <li> <p>Note that EI 7.x is a WUM-only release, which means that manual patches are not allowed. You can use WSO2 Update Manager(WUM) to get the latest fixes or updates for this release.</p> </li> <li> <p>If you are migrating from a version older than WSO2 ESB 5.0.0, you should first migrate to ESB 5.0.0 and then migrate to the Micro Integrator of EI 7.1.0.</p> </li> <li>The distribution folder structure has changed from ESB 5.0.0 to EI 7.1:                       WSO2 ESB 5.0.0                               Micro Integrator of EI 7.1.0              <code>/repository/conf <code>/conf <code>/repository/components/dropins <code>/dropins <code>/repository/components/extensions <code>/extensions <code>/repository/components/lib <code>/lib <code> <code>/repository/components/plugins <code>/wso2/components/plugins"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-to-the-micro-integrator","title":"Migrating to the Micro Integrator","text":"<p>Follow the instructions below to start the migration!</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#set-up-the-migration","title":"Set up the migration","text":"<ul> <li>Make a backup of the ESB 5.0 distribution (<code>&lt;ESB_5.0.0_HOME&gt;</code> folder) to back up the product configurations.</li> <li>Make a backup of the database used by the current ESB 5.0 deployment. This backup is necessary in case the migration causes any issues in the existing database.</li> <li> <p>Download and install EI 7.1 in your environment:</p> <p>Tip</p> <p>The home directory of your Micro Integrator will be referred to as <code>&lt;MI_HOME&gt;</code> from hereon.</p> <ul> <li>Install the product using the Installer.</li> <li>Install the product using the binary distribution.</li> </ul> </li> <li> <p>Use WSO2 Update Manager to get the latest available updates for your EI 7.1 distribution.</p> <p>Info</p> <p>Note that you need a valid WSO2 subscription to use updates in a production environment.</p> </li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-the-user-store","title":"Migrating the user store","text":"<p>If you are already using a JDBC or LDAP as the primary user store of your ESB 5.0, you can simply connect the same to the Micro Integrator.</p> <p>Note that secondary user stores are currently not supported in the Micro Integrator of EI 7.1.0.</p> <p>Info</p> <p>Before you begin</p> <p>Read about users and roles in the Micro Integrator and about how they function. Note the following important facts:</p> <ul> <li>Users in the Micro Intgrator are categorized as admin users and non-admin users.</li> <li>All admin users in your existing ESB user store will function as admin users in the Micro integrator.</li> <li>Tenant admins are no longer valid because the Micro Integrator does not support multitenancy.</li> </ul> <p>To connect the Micro Integrator to the primary user store:</p> <ol> <li>Open the <code>deployment.toml</code> file of your Micro Integrator.</li> <li> <p>Note that you have the <code>[user_store]</code> section enabled by default.</p> <pre><code>[user_store]\ntype = \"read_only_ldap\"\n</code></pre> </li> <li> <p>Update the <code>[user_store]</code> section and other configurations as given below.</p> <p>RDBMS User Store <pre><code>[user_store]\ntype = \"database\"\nread_only = \"false\"\n\n[[datasource]]\nid = \"WSO2_USER_DB\"\nurl= \"jdbc:mysql://localhost:3306/userdb\"\nusername=\"root\"\npassword=\"root\"\ndriver=\"com.mysql.jdbc.Driver\"\n\n[realm_manager]\ndata_source = \"WSO2_USER_DB\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Only LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_only_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> <p>Read-Write LDAP User Store <pre><code>[user_store]\nconnection_url = \"ldap://localhost:10389\"  \nconnection_name = \"uid=admin,ou=system\"\nconnection_password = \"admin\"  \nuser_search_base = \"ou=Users,dc=wso2,dc=org\"\ntype = \"read_write_ldap\"\n\n[internal_apis.file_user_store]\nenable = false\n</code></pre></p> </li> <li> <p>If your user store is an RDBMS, be sure to add the client JAR of your RDBMS to the <code>&lt;MI_HOME&gt;/lib</code> folder.</p> </li> </ol> <p>See the instructions on configuring a user store for more information.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-the-registry","title":"Migrating the registry","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Your ESB 5.0 registry may have the following partitions: Local, Config, and Gov. However, you only need to migrate the Config and Gov registry partitions. See the instructions on configuring registry partitions in the Micro Integrator.</li> <li>Message processor tasks stored in the registry should be stored with a new naming convention in the Micro Integrator. Therefore, all entries in the registry with the <code>MSMP</code> prefix (which correspond to message processor tasks) should not be migrated to the Micro Integrator. New entries will be automatically created when you start the Micro Integrator server.</li> <li>If you have shared the registry of ESB 5.0 among multiple nodes, you can do the same for the file-based registry of EI 7.1. However, note that registry mounting/sharing is only required for persisting message processor states among nodes of EI 7.1.</li> </ul> <p>You can migrate the registry resources by using the registry migration tool as follows:</p> <ol> <li> <p>Execute one of the commands given below to start the tool (<code>registry-migration-service-1.0.0.jar</code>), which you received from WSO2 Support.</p> <ul> <li> <p>To start the tool without a log file:</p> <pre><code>java -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> <li> <p>To start the tool with a log file:</p> <p>Tip   Replace <code>&lt;log_file_location&gt;</code> with the location where you want the log file to be created.</p> <pre><code>java -Dlog.file.location=&lt;log_file_location&gt; -jar &lt;path_to_jar&gt;/registry-migration-service-1.0.0.jar\n</code></pre> </li> </ul> </li> <li> <p>Specify the following input values to log in to your WSO2 EI server from the migration tool:</p> <p>              Input Value                       Description                       EI Server URL                        Specify the EI server URL with the servlet port. The default is <code>https://localhost:9443</code>.                       Internal Truststore Location of the EI Server                       Specify the location of the internal truststore used by the EI server.                       Internal Truststore Type of EI Server                       Specify the type of the internal Truststore used by the EI server. The default is <code>JKS</code>.                       Internal Truststore Password of EI Server                       Specify the password of the internal Truststore used by the EI server. The default is <code>wso2carbon</code>.                       Username of the EI Server          <code>admin</code>.                       Password of the EI Server          <code>admin</code>.          </p> </li> <li> <p>Select one of the following options and proceed.</p> <p>              Option                       Description                       Export as a Registry Resource Module          Recommended. If you select this option, the registry resources are exported as a Registry Resources module, which you import to WSO2 Integration Studio. You can then create a CAR file by selecting resources from the registry resources module.                       Export as a Carbon Application                       If you select this option, the registry resources in your WSO2 EI instance are exported as a single CAR file, which you directly copy to your Micro Integrator distribution.          </p> </li> <li> <p>Specify input values depending on which export option you selected.</p> <ul> <li> <p>If you selected Export as a Registry Resource Module, follow the steps given below.</p> <ol> <li> <p>Enter the following input values:</p> <p>              Input Value                       Description                       Integration Project Name                       Specify the name of the Integration project.                       Project\u2019s Group ID                       Specify the group ID of the integration project. The default value is <code>com.example</code>.                       Project\u2019s Artifact ID                       Specify the artifact ID of the integration project. The default value is the integration project name.                       Project Version                       Specify the version of the integration project. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the integration project should be created.          </p> </li> <li> <p>Verify the following:</p> <ul> <li>If the process is successful, the Registry Resource Project is created in the location you specified. </li> <li>A summary report is created at the export location with file name: <code>registry_export_summary_&lt;date&gt;.txt</code>. This report explains whether the registry resource is successfully exported and also provides reasons in case the exprot fails.</li> </ul> </li> <li> <p>Import the Registry Resource Project to the Registry Resources module in WSO2 Integration Studio.</p> </li> <li> <p>Open the resource editor and make sure that the media type of the resource is set properly.</p> <p></p> </li> <li> <p>Select the required resources from your registry resources project and export a CAR file.</p> <ul> <li> <p>If you selected Export as a Carbon Application, enter the following input values:</p> <p>              Input Value                       Description                       CAR File Name                       Specify the name of the Carbon application.                       CAR File Version                       Specify the version of the Carbon application. The default value is <code>1.0.0</code>.                       Export Location                       Specify the location where the CAR file should be created.          </p> </li> </ul> <p>You should now have a CAR file with the required registry resources.</p> </li> </ol> </li> </ul> </li> <li> <p>Copy the CAR file to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-integration-artifacts","title":"Migrating integration artifacts","text":"<p>Info</p> <p>Before you begin</p> <p>Note that the following changes are effective in the Micro Integrator of EI 7.1 when you migrate from WSO2 ESB 5.0.0 to the Micro Integrator.</p> <p>Removed mediators</p> <p>The following mediators and artifacts are removed in the ESB/Micro Integrator runtime after ESB 5.0.0.</p> <ul> <li>Priority Executors</li> <li>Enqueue Mediator</li> <li>Bean Mediator</li> <li>POJO Command Mediator</li> <li>Spring Mediator</li> <li>Conditional Router Mediator</li> <li>In, Out Mediators</li> <li>Event Mediator</li> <li>In memory Topics</li> <li>Router Mediator</li> <li>Publish Event Mediator </li> </ul> <p>Message mediation</p> <ul> <li>If you have used the <code>$ctx</code> function inline (in the Payload Factory mediator) to get property values, you need to change this to the full XPath. The <code>$ctx</code> function or the <code>get-property()</code> function can be used inside the argument (args) tags to get property values.</li> <li>The XSLT mediator writes response messages to the JSON stream. In ESB versions prior to EI 6.4.0, the XSLT mediator was not doing any changes to the JSON stream after message transformation.</li> <li>There are validations affecting the Enrich mediator, which prevents the source and target in the message body.</li> <li>If you have specified an XPath value in your mediation sequence, the response message generated by the ESB will include the element tags of your XPath value. For example, if your XPath value is \"//faultdescription\", the response message will be <code>&lt;faultdescription&gt;DESCRIPTION&lt;/faultdescription&gt;</code>. If you want the response message to contain only the DESCRIPTION, you need to specify the XPath value as \"//faultdescription/text()\".</li> <li>If you are using the MailTo transport to send emails through a mediation sequence, note that the email sender specified in the mediation sequence overrides the email sender configured in the Micro Integrator configurations.</li> </ul> <p>HTTP content negotiation</p> <p>HTTP content negotiation is enabled in the Micro Integrator by default. This setting transforms the message (at the time of building the message) according to the content type specified using the 'Accept' header of the request message. You can disable this behavior by updating the <code>deployment.toml</code> file as shown below.   <pre><code>[server]\nhostname = \"localhost\"\nhttp_content_negotiation = true\n</code></pre></p> <p>The recommended way to create integration artifacts (in ESB 5.0 or EI 7.x ) is to use WSO2 Integration Studio:</p> <ul> <li> <p>If the artifacts are created in the recommended way, copy the CAR files inside <code>&lt;ESB_5.0.0_HOME&gt;/repository/deployment/server/carbonapps</code> to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</p> <p>Warning</p> <p>Changed package names</p> <p>Note that some of the class names of packages used inside your integration artifacts have changed in the Micro Integrator. </p> <p>For example, if you have used a Token Store when applying security policy to a proxy service in the ESB, the token store class has changed from <code>org.wso2.carbon.security.util.SecurityTokenStore</code> to <code>org.wso2.micro.integrator.security.extensions.SecurityTokenStore</code> in the Micro Integrator. </p> <p>Therefore, these artifacts have to be updated with the correct class name and packaged into a new CAR file before migration.</p> </li> <li> <p>If you have a custom mediator packed in a CAR, do one of the following:</p> <ul> <li>Include all the artifacts (using that mediator) in the same CAR.</li> <li>Alternatively, you can add the JAR of the mediator to the <code>&lt;MI_HOME&gt;/lib/dropins</code> folder so that it can be shared by artifacts in multiple CARs.</li> </ul> </li> <li>If the artifacts are created using the management console of ESB 5.0, you need to recreate them using WSO2 Integration Studio and package them as a composite application. See the instructions on packaging artifacts.</li> </ul> <p>Tip</p> <p>For testing purposes, you can copy the artifacts to the same folder structure inside the <code>&lt;MI_HOME&gt;/repository/deployment/server/synapse-configs/default</code> directory.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-deployed-connectors","title":"Migrating deployed Connectors","text":"<ul> <li>If the connector is added to ESB 5.0 via a composite application with the Connector Exporter Project, the same can be used in EI 7.1 seamlessly. Simply copy the CAR file in ESB 5.0 to the <code>&lt;MI_HOME&gt;/repository/deployment/server/carbonapps</code> folder.</li> <li>If the connector is added to ESB 5.0 via the management console, pack them using the Connector Exporter Project and deploy via a composite application in EI 7.1.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-custom-components","title":"Migrating custom components","text":"<p>Copy custom OSGI components in the <code>&lt;ESB_5.0.0_HOME&gt;/repository/components/dropins</code> folder to the <code>&lt;MI_HOME&gt;/dropins</code> folder. If you have custom JARs in the <code>&lt;ESB_5.0.0_HOME&gt;/repository/components/lib</code> folder, copy those components to the <code>&lt;MI_HOME&gt;/lib</code> directory.</p> <p>Note</p> <ul> <li>To provide seamless integration with RabbitMQ, the Rabbitmq client lib is included in the Micro Integrator by default. Hence, you don't need to manually add any RabbitMQ components.</li> <li>WSO2 EI no longer packs the VFS/SMB provider by default. If you need to use the VFS SMB feature, download <code>jcifs-1.3.17.jar</code> and add it to the <code>&lt;MI_HOME/lib</code> folder. Since this library is licensed under LGPL version 2.1, you have to comply with the terms of LGPL version 2.1 and its restrictions.</li> <li>If you used an HL7 Message Store (custom message store) implementation, note that the Micro Integrator does not support this functionality. See the list of removed features for details.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-tenants","title":"Migrating tenants","text":"<p>Multitenancy within one JVM is not supported in the Micro Integrator of EI 7.1. Therefore, if you used multiple tenants in your ESB deployment, you can replicate the set up in EI 7.1 by using separate Micro Integrator nodes.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-keystores","title":"Migrating keystores","text":"<p>Copy the JKS files from the <code>&lt;ESB_5.0.0_HOME&gt;/repository/resources/security</code> folder to the <code>&lt;MI_HOME&gt;/repository/resources/security</code> folder.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-configurations","title":"Migrating configurations","text":"<p>Info</p> <p>Before you begin</p> <p>Note the following:</p> <ul> <li>Configuration management was handled in WSO2 ESB 5.0 versions via multiple files such as <code>carbon.xml</code>, <code>synapse.properties</code>, <code>axis2.xml</code>, etc.</li> <li>Micro Integrator of EI 7.1 provides a new configuration model where most of the product configurations are managed by a single configuration file named <code>deployment.toml</code> (stored in the <code>&lt;MI_HOME&gt;/conf</code> directory).</li> <li>Log configurations are managed with log4j2 (whereas the ESB 5.0 used log4j), which are configured in the <code>log4j2.properties</code> file.</li> </ul> <p>The following sections of this document will guide you to migrate the product configurations including log4j.</p> Migrating to TOML configurations <p>Tip</p> <p>If you have a WSO2 subscription, it is highly recommended to reach WSO2 Support before attempting to proceed with the configuration migration.</p> <p>Given below are main configurations that have changed in the Micro integrator. Expand the sections to find the TOML configurations corresponding to the XML configurations.</p> <p>Note</p> <p>Clustering configurations</p> <p>In the Micro Integrator, you don't need to enable clustering as you did with previous ESB versions. Instead, you need to configure all nodes in the cluster to coordinate through an RDBMS. Find out more about cluster coordination.</p> <p>XML configuration <pre><code> &lt;clustering class=\"org.wso2.carbon.core.clustering.hazelcast.HazelcastClusteringAgent\" enable=\"true\"&gt;\n &lt;parameter name=\"clusteringPattern\"&gt;nonWorkerManager&lt;/parameter&gt;\n &lt;/clustering&gt;\n ```\n\n**TOML configuration**\n</code></pre>   # Cluster coordination database connection.   [[datasource]]    id = \"WSO2_COORDINATION_DB\"    url= \"jdbc:mysql://localhost:3306/clusterdb\"    username=\"root\"    password=\"root\"    driver=\"com.mysql.jdbc.Driver\"</p> <p># Identifying nodes in the cluster.    [cluster_config]   node_id = \"node-1\"   ```</p> <p>Find more parameters.</p> <p>Note</p> <p>Analytics configurations</p> <p>If you used EI Analytics with your ESB, you have configured the following to be able to publish statistics to the Analytics server.</p> <ul> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml</code></li> <li><code>&lt;ESB_HOME&gt;/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml</code></li> </ul> <p>If you using EI Analytics with your new Micro Integrator solution, you can follow the instructions in Setting up the EI Analytics Profile for Observability.</p> <p>Given below are some of the most critical XML configuraton files in ESB 5.0. Expand each section to find the TOML configurations corresponding to the XML configurations in the file.</p> <p>Note</p> <p>carbon.xml</p> <ul> <li> <p>Hostname</p> <p>XML configuration <pre><code>&lt;HostName&gt;www.wso2.org&lt;/HostName&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhostname = \"www.wso2.org\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Port offset</p> <p>XML configuration <pre><code>&lt;Ports&gt;\n    &lt;Offset&gt;1&lt;/Offset&gt;\n&lt;/Ports&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\noffset  = 0\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Primary keystore</p> <p>XML configuration <pre><code>&lt;Security&gt;\n    &lt;KeyStore&gt;            \n        &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n        &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n    &lt;/KeyStore&gt;\n&lt;/Security&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.primary]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Internal keystore</p> <p>XML configuration <pre><code>&lt;InternalKeyStore&gt;\n     &lt;Location&gt;${carbon.home}/repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n        &lt;Type&gt;JKS&lt;/Type&gt;\n        &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n       &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/InternalKeyStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[keystore.internal]\nfile_name = \"wso2carbon.jks\"\ntype = \"JKS\"\npassword = \"wso2carbon\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Truststore</p> <p>XML configuration <pre><code>&lt;TrustStore&gt;\n    &lt;Location&gt;${carbon.home}/repository/resources/security/client-truststore.jks&lt;/Location&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n&lt;/TrustStore&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[truststore]\nfile_name = \"client-truststore.jks\"  \ntype = \"JKS\"                        \npassword = \"wso2carbon\"            \nalias = \"symmetric.key.value\"      \nalgorithm = \"AES\"\n</code></pre></p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>user-mgt.xml</p> <ul> <li> <p>Admin user</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n        &lt;AdminRole&gt;admin&lt;/AdminRole&gt;\n        &lt;AdminUser&gt;                \n            &lt;UserName&gt;admin&lt;/UserName&gt;                \n            &lt;Password&gt;admin&lt;/Password&gt;\n        &lt;/AdminUser&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[super_admin]\nusername = \"admin\"              # inferred\npassword = \"admin\"              # inferred\nadmin_role = \"admin\"            # inferred\n</code></pre></p> </li> <li> <p>User datasource</p> <p>XML configuration <pre><code>&lt;Realm&gt;\n    &lt;Configuration&gt;\n         &lt;Property name=\"isCascadeDeleteEnabled\"&gt;true&lt;/Property&gt;\n         &lt;Property name=\"dataSource\"&gt;jdbc/WSO2CarbonDB&lt;/Property&gt;\n    &lt;/Configuration&gt;\n&lt;/Realm&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[realm_manager]\ndata_source = \"WSO2CarbonDB\"       \nproperties.isCascadeDeleteEnabled = true   \n</code></pre></p> </li> <li> <p>LDAP userstore</p> <p>XML configuration <pre><code>&lt;UserStoreManager class=\"org.wso2.carbon.user.core.ldap.ReadOnlyLDAPUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.CommonHybridLDAPTenantManager&lt;/Property&gt;\n    &lt;Property name=\"ConnectionURL\"&gt;ldap://localhost:10389&lt;/Property&gt;\n    &lt;Property name=\"ConnectionName\"&gt;uid=admin,ou=system&lt;/Property&gt;\n&lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\ntype = \"read_only_ldap\" # inferred default read_only_ldap # OR  read_write_ldap\nclass = \"org.wso2.micro.integrator.security.user.core.ldap.ReadOnlyLDAPUserStoreManager\" # inferred\nconnection_url = \"ldap://localhost:10389\"   #inferred\nconnection_name = \"uid=admin,ou=system\"   #inferred\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JDBC userstore</p> <p>XML configuration <pre><code> &lt;UserStoreManager class=\"org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager\"&gt;\n    &lt;Property name=\"TenantManager\"&gt;org.wso2.carbon.user.core.tenant.JDBCTenantManager&lt;/Property&gt;\n &lt;/UserStoreManager&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[internal_apis.file_user_store]\nenable = false\n\n[user_store]\nclass = \"org.wso2.micro.integrator.security.user.core.jdbc.JDBCUserStoreManager\"\ntype = \"database\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>master-datasource.xml</p> <p>Carbon database (<code>WSO2_CARBON_DB</code>).</p> <p>XML configuration <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_CARBON_DB&lt;/name&gt;\n    &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/WSO2CarbonDB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n         &lt;configuration&gt;\n             &lt;url&gt;jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000&lt;/url&gt;\n             &lt;username&gt;wso2carbon&lt;/username&gt;\n             &lt;password&gt;wso2carbon&lt;/password&gt;\n             &lt;driverClassName&gt;org.h2.Driver&lt;/driverClassName&gt;\n             &lt;maxActive&gt;50&lt;/maxActive&gt;\n             &lt;maxWait&gt;60000&lt;/maxWait&gt;\n             &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n         &lt;/configuration&gt;\n     &lt;/definition&gt;\n &lt;/datasource&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[datasource]]\n id = \"WSO2_CARBON_DB\"\n url= \"jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=60000\"\n username=\"username\"\n password=\"password\"\n driver=\"org.h2.Driver\"\n pool_options.maxActive=50\n pool_options.maxWait = 60000 # wait in milliseconds\n pool_options.testOnBorrow = true\n</code></pre></p> <p>Find more parameters.</p> <p>Note</p> <p>axis2.xml</p> <ul> <li> <p>Hot deployment</p> <p>XML configuration <pre><code>&lt;parameter name=\"hotdeployment\" locked=\"false\"&gt;true&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nhot_deployment = true\n</code></pre></p> </li> <li> <p>Enable MTOM</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableMTOM\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_mtom = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Enable SWA</p> <p>XML configuration <pre><code>&lt;parameter name=\"enableSwA\" locked=\"false\"&gt;false&lt;/parameter&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[server]\nenable_swa = false\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message formatters</p> <p>XML configuration <pre><code>&lt;messageFormatters&gt;\n        &lt;messageFormatter contentType=\"application/x-www-form-urlencoded\" class=\"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"multipart/form-data\" class=\"org.apache.axis2.transport.http.MultipartFormDataFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/xml\" class=\"org.apache.axis2.transport.http.ApplicationXMLFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/xml\" class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/soap+xml\" class=\"org.apache.axis2.transport.http.SOAPMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"text/plain\" class=\"org.apache.axis2.format.PlainTextFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/octet-stream\" class=\"org.wso2.carbon.relay.ExpandingMessageFormatter\"/&gt;\n        &lt;messageFormatter contentType=\"application/json\" class=\"org.wso2.carbon.integrator.core.json.JsonStreamFormatter\"/&gt;\n&lt;/messageFormatters&gt;                         \n</code></pre></p> <p>TOML configuration <pre><code>[message_formatters]\nform_urlencoded =  \"org.apache.synapse.commons.formatters.XFormURLEncodedFormatter\"\nmultipart_form_data =  \"org.apache.axis2.transport.http.MultipartFormDataFormatter\"\napplication_xml = \"org.apache.axis2.transport.http.ApplicationXMLFormatter\"\ntext_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\nsoap_xml = \"org.apache.axis2.transport.http.SOAPMessageFormatter\"\ntext_plain = \"org.apache.axis2.format.PlainTextFormatter\"\napplication_json =  \"org.wso2.micro.integrator.core.json.JsonStreamFormatter\"\noctet_stream = \"org.wso2.carbon.relay.ExpandingMessageFormatter\"\n\n# Custom message formatters.\n[[custom_message_formatters]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishMessageFormatter\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Message builders</p> <p>XML configuration <pre><code>&lt;messageBuilders&gt;\n        &lt;messageBuilder contentType=\"application/xml\" class=\"org.apache.axis2.builder.ApplicationXMLBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/x-www-form-urlencoded\" class=\"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"multipart/form-data\" class=\"org.apache.axis2.builder.MultipartFormDataBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"text/plain\" class=\"org.apache.axis2.format.PlainTextBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/octet-stream\" class=\"org.wso2.carbon.relay.BinaryRelayBuilder\"/&gt;\n        &lt;messageBuilder contentType=\"application/json\" class=\"org.wso2.carbon.integrator.core.json.JsonStreamBuilder\"/&gt;\n&lt;/messageBuilders&gt;                                               \n</code></pre></p> <p>TOML configuration <pre><code>[message_builders]\napplication_xml = \"org.apache.axis2.builder.ApplicationXMLBuilder\"\nform_urlencoded = \"org.apache.synapse.commons.builders.XFormURLEncodedBuilder\"\nmultipart_form_data = \"org.apache.axis2.builder.MultipartFormDataBuilder\"\ntext_plain = \"org.apache.axis2.format.PlainTextBuilder\"\napplication_json = \"org.wso2.micro.integrator.core.json.JsonStreamBuilder\"\noctet_stream =  \"org.wso2.carbon.relay.BinaryRelayBuilder\"\n\n# Custom message builders\n[[custom_message_builders]]\ncontent_type = \"application/json/badgerfish\"\nclass = \"org.apache.axis2.json.JSONBadgerfishOMBuilder\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTP transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpListener\"&gt;\n        &lt;parameter name=\"port\" locked=\"false\"&gt;8280&lt;/parameter&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n        &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;      \n&lt;/transportReceiver&gt;                                             \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.enable = true                     \nlistener.port = 8280    \nlistener.wsdl_epr_prefix =\"https://apachehost:port/somepath\"\nlistener.bind_address = \"hostname or IP address\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLListener\"&gt;\n    &lt;parameter name=\"port\" locked=\"false\"&gt;8243&lt;/parameter&gt;\n    &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n    &lt;parameter name=\"HttpsProtocols\"&gt;TLSv1,TLSv1.1,TLSv1.2&lt;/parameter&gt;\n    &lt;parameter name=\"bind-address\" locked=\"false\"&gt;hostname or IP address&lt;/parameter&gt;\n    &lt;parameter name=\"WSDLEPRPrefix\" locked=\"false\"&gt;https://apachehost:port/somepath&lt;/parameter&gt;\n    &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n        &lt;KeyStore&gt;\n            &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n        &lt;/KeyStore&gt;\n    &lt;/parameter&gt;\n    &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n        &lt;TrustStore&gt;\n            &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n            &lt;Type&gt;JKS&lt;/Type&gt;\n            &lt;Password&gt;wso2carbon&lt;/Password&gt;\n        &lt;/TrustStore&gt;\n    &lt;/parameter&gt;\n&lt;/transportReceiver&gt;                                         \n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nlistener.secured_enable = true              \nlistener.secured_port = 8243        \nlistener.secured_wsdl_epr_prefix = \"https://apachehost:port/somepath\"  \nlistener.secured_bind_address = \"hostname or IP address\"\nlistener.secured_protocols = \"TLSv1,TLSv1.1,TLSv1.2\"   \nlistener.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nlistener.keystore.type = \"JKS\" listener.keystore.password = \"wso2carbon\"\nlistener.keystore.key_password = \"wso2carbon\"\nlistener.truststore.location = \"repository/resources/security/client-truststore.jks\"\nlistener.truststore.type = \"JKS\" listener.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportListener\"/&gt;                                            \n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Mailto transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportListener\"/&gt;    \n</code></pre></p> <p>TOML configuration <pre><code>[transport.mail.listener]\nenable = true\nname = \"mailto\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSListener\"&gt;\n        &lt;parameter name=\"myTopicConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"java.naming.factory.initial\" locked=\"false\"&gt;org.apache.activemq.jndi.ActiveMQInitialContextFactory&lt;/parameter&gt;\n            &lt;parameter name=\"java.naming.provider.url\" locked=\"false\"&gt;tcp://localhost:61616&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryJNDIName\" locked=\"false\"&gt;TopicConnectionFactory&lt;/parameter&gt;\n            &lt;parameter name=\"transport.jms.ConnectionFactoryType\" locked=\"false\"&gt;topic&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nlistener_enable = true\n\n[[transport.jms.listener]]\nname = \"myTopicListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"tcp://localhost:61616\"\nparameter.connection_factory_name = \"TopicConnectionFactory\"\nparameter.connection_factory_type = \"topic\" # [queue, topic]\nparameter.cache_level = \"consumer\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportListener\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nlistener.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport receiver</p> <p>XML configuration <pre><code>&lt;transportReceiver name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQListener\"&gt;\n        &lt;parameter name=\"AMQPConnectionFactory\" locked=\"false\"&gt;\n            &lt;parameter name=\"rabbitmq.server.host.name\" locked=\"false\"&gt;localhost&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.port\" locked=\"false\"&gt;5672&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.user.name\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n            &lt;parameter name=\"rabbitmq.server.password\" locked=\"false\"&gt;guest&lt;/parameter&gt;\n        &lt;/parameter&gt;\n&lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nlistener_enable = true\n\n[[transport.rabbitmq.listener]]\nname = \"AMQPConnectionFactory\"\nparameter.hostname = \"localhost\"\nparameter.port = 5672\nparameter.username = \"guest\"\nparameter.password = \"guest\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport listener</p> <p>XML configuration <pre><code>    &lt;transportReceiver name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportListener\"&gt;\n        &lt;parameter name=\"port\"&gt;9292&lt;/parameter&gt;\n    &lt;/transportReceiver&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.listener]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportListener\"\nprotocol = \"hl7\"\nparameter.'transport.hl7.TimeOut' = 10000\n</code></pre></p> </li> <li> <p>HTTP transport sender</p> <p>Warning</p> <p>Do not duplicate the <code>[transport.http]</code> TOML header when you enable both the JMS listener and sender. Use the TOML header once and add both parameters (<code>listener_enabled</code> and <code>sender_enabled</code>).</p> <p>XML configuration <pre><code>&lt;transportSender name=\"http\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\n#listener_enable = true\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HTTPS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"https\" class=\"org.apache.synapse.transport.passthru.PassThroughHttpSSLSender\"&gt;\n        &lt;parameter name=\"non-blocking\" locked=\"false\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"keystore\" locked=\"false\"&gt;\n            &lt;KeyStore&gt;\n                &lt;Location&gt;repository/resources/security/wso2carbon.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n                &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n            &lt;/KeyStore&gt;\n        &lt;/parameter&gt;\n        &lt;parameter name=\"truststore\" locked=\"false\"&gt;\n            &lt;TrustStore&gt;\n                &lt;Location&gt;repository/resources/security/client-truststore.jks&lt;/Location&gt;\n                &lt;Type&gt;JKS&lt;/Type&gt;\n                &lt;Password&gt;wso2carbon&lt;/Password&gt;\n            &lt;/TrustStore&gt;\n        &lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\nsender.secured_enable = true\nsender.keystore.location =\"repository/resources/security/wso2carbon.jks\"\nsender.keystore.type = \"JKS\"\nsender.keystore.password = \"wso2carbon\"\nsender.keystore.key_password = \"wso2carbon\"\nsender.truststore.location = \"repository/resources/security/client-truststore.jks\"\nsender.truststore.type = \"JKS\"\nsender.truststore.password = \"wso2carbon\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"vfs\" class=\"org.apache.synapse.transport.vfs.VFSTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.vfs]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>VFS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"mailto\" class=\"org.apache.axis2.transport.mail.MailTransportSender\"&gt;\n        &lt;parameter name=\"mail.smtp.host\"&gt;smtp.gmail.com&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.port\"&gt;587&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.starttls.enable\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.auth\"&gt;true&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.user\"&gt;synapse.demo.0&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.password\"&gt;mailpassword&lt;/parameter&gt;\n        &lt;parameter name=\"mail.smtp.from\"&gt;synapse.demo.0@gmail.com&lt;/parameter&gt;\n&lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[transport.mail.sender]]\nname = \"mailto\"\nparameter.hostname = \"smtp.gmail.com\"\nparameter.port = \"587\"\nparameter.enable_tls = true\nparameter.auth = true\nparameter.username = \"synapse.demo.0\"\nparameter.password = \"mailpassword\"\nparameter.from = \"synapse.demo.0@gmail.com\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>FIX transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"fix\" class=\"org.apache.synapse.transport.fix.FIXTransportSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.fix]\nsender.enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>RabbitMQ transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"rabbitmq\" class=\"org.apache.axis2.transport.rabbitmq.RabbitMQSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.rabbitmq]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS transport sender</p> <p>XML configuration <pre><code>&lt;transportSender name=\"jms\" class=\"org.apache.axis2.transport.jms.JMSSender\"/&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jms]\nsender_enable = true\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>HL7 transport sender</p> <p>XML configuration <pre><code>    &lt;transportSender name=\"hl7\" class=\"org.wso2.carbon.business.messaging.hl7.transport.HL7TransportSender\"&gt;\n    &lt;!--parameter name=\"non-blocking\"&gt;true&lt;/parameter--&gt;\n  &lt;/transportSender&gt;\n</code></pre></p> <p>TOML configuration <pre><code>[[custom_transport.sender]]\nclass=\"org.wso2.micro.integrator.business.messaging.hl7.transport.HL7TransportSender\"\nprotocol = \"hl7\"\n</code></pre></p> </li> </ul> <p>Note</p> <p>synapse.properties</p> <p>Synapse thread pool properties:</p> <p>XML configuration <pre><code> synapse.threads.core = 20\n synapse.threads.max = 100\n ```\n\n**TOML configuration**\n</code></pre>   [mediation]    synapse.core_threads = 20    synapse.max_threads = 100   ```</p> <p>Find more parameters.</p> <p>Note</p> <p>passthru-http.properties</p> <ul> <li> <p>HTTP/S worker pool properties</p> <p>XML configuration <pre><code>worker_pool_size_core=400\n worker_pool_size_max=400\n worker_pool_queue_length=-1\n</code></pre></p> <p>TOML configuration <pre><code>[transport.http]\ncore_worker_pool_size = 400         # inferred default: 400\n max_worker_pool_size = 400          # inferred default: 400\n worker_pool_queue_length = -1\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>Preserve headers</p> <p>XML configuration <pre><code> http.user.agent.preserve=false\n http.server.preserve=true\n http.headers.preserve=Content-Type\n ```\n\n **TOML configuration**\n</code></pre>    [transport.http]    preserve_http_user_agent = false    preserve_http_server_name = true    preserve_http_headers = [\"Content-Type\"]    ```</p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>jndi.properties</p> <ul> <li> <p>JMS connection factory</p> <p>XML configuration <pre><code>connectionfactory.QueueConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n connectionfactory.TopicConnectionFactory = amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\n</code></pre></p> <p>TOML configuration <pre><code>[transport.jndi.connection_factories]\n 'connectionfactory.QueueConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n 'connectionfactory.TopicConnectionFactory' = \"amqp://admin:admin@clientID/carbon?brokerlist='tcp://localhost:5675'\"\n</code></pre></p> <p>Find more parameters.</p> </li> <li> <p>JMS queue</p> <p>XML configuration <pre><code> queue.JMSMS=JMSMS\n ```\n\n **TOML configuration**\n</code></pre>    [transport.jndi.queue]    JMSMS = \"JMSMS\"    ```</p> <p>Find more parameters.</p> </li> <li> <p>JMS topic</p> <p>XML configuration <pre><code> topic.MyTopic = example.MyTopic\n ```\n\n **TOML configuration**\n</code></pre>    [transport.jndi.topic]    MyTopic = \"example.MyTopic\"    ```</p> <p>Find more parameters.</p> </li> </ul> <p>Note</p> <p>tasks-config.xml</p> <p>XML configuration <pre><code>&lt;taskServerCount&gt;1&lt;/taskServerCount&gt;\n &lt;defaultLocationResolver&gt;\n     &lt;locationResolverClass&gt;org.wso2.carbon.ntask.core.impl.RoundRobinTaskLocationResolver&lt;/locationResolverClass&gt;\n &lt;/defaultLocationResolver&gt;     \n ```\n\n**TOML configuration**\n</code></pre>   [task_handling]    resolver_class = \"org.wso2.micro.integrator.ntask.coordination.task.resolver.RoundRobinResolver\"</p> <p>[[task_resolver]]    task_server_count = \"3\"    ```</p> <p>Find more parameters.</p> <p>The complete list of TOML configurations for the Micro Integrator are listed in the product configuration catalog.</p> Migrating Log4j configurations <p>WSO2 ESB 5.0 (and all ESB versions prior to EI 6.6.0) use log4j. In  WSO2 EI 7 Micro Integrator, the <code>carbon.logging.jar</code> file is not packed and the <code>pax-logging-api</code> is used instead. With this upgrade, the log4j version is also updated to log4j2.</p> <p>See the topics given below to configure log4j2 in EI 7 Micro Integrator.</p> <ul> <li>Log4j2 properties</li> <li>Correlation logs</li> <li>Wire logs</li> <li>Service-level logs</li> <li>REST API Access logs</li> <li>Managing Log Growth</li> </ul> <p>Follow the instructions given below if you have used a custom log4j component in your older ESB version.</p> <ol> <li> <p>Replace carbon logging or <code>commons.logging</code> dependencies with pax-logging dependency as shown below.     <pre><code>&lt;!-- Pax Logging --&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-api&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.api.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- Pax Logging Version --&gt;\n&lt;pax.logging.api.version&gt;1.10.1&lt;/pax.logging.api.version&gt;\n</code></pre></p> </li> <li> <p>If log4j dependency is directly used, apply one of the options given below.</p> <ul> <li>Replace the log4j dependency (shown below) with log4j2 and rewrite the loggers accordingly.     <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;org.ops4j.pax.logging&lt;/groupId&gt;\n&lt;artifactId&gt;pax-logging-log4j2&lt;/artifactId&gt;\n&lt;version&gt;${pax.logging.log4j2.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></li> <li>Replace the log4j dependency with pax-logging dependency and rewrite the loggers using <code>commons.logging</code> accordingly.</li> </ul> </li> <li> <p>If <code>commons.logging</code> is imported using Import-Package, add the version range.     <pre><code>org.apache.commons.logging;\nversion=\"${commons.logging.version.range}\"\u00a0&lt;commons.logging.version.range&gt;[1.2.0,2.0.0)&lt;/commons.logging.version.range&gt;\n</code></pre></p> </li> <li> <p>Follow the instructions on configuring log4j2\u00a0to register the Appenders and Loggers.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-encrypted-passwords","title":"Migrating encrypted passwords","text":"<p>To migrate the encrypted passwords from ESB 5.0.0, you need to first obtain the plain-text passwords. Once you have them, follow the normal procedure of encrypting secrets in EI 7. See Encrypt Secrets for instructions.</p> <p>In case you need to obtain the plaintext passwords from the encrypted passwords in the WSO2 ESB 5.0.0, you can use the password decryption tool.</p> <p>Follow the instructions given below to use the password decryption tool.</p> <ol> <li> <p>Copy the tool (<code>org.wso2.mi.migration-1.2.0.jar</code>), which you received from WSO2 Support, into the <code>&lt;ESB_HOME&gt;/repository/components/dropins</code> folder in the server.</p> </li> <li> <p>Create a directory named migration in <code>ESB_HOME</code>.</p> </li> <li> <p>Copy the migration-conf.properties file into the migration directory, and update the following property.</p> Property Description admin.user.name The user name of the system administrator. </li> <li> <p>Start the server using the <code>migrate.from.product.version</code> system property as follows:</p> <p>On Linux/Unix <pre><code>sh wso2server.sh -Dmigrate.from.product.version=esb\n</code></pre></p> <p>On Windows <pre><code>wso2server.bat -Dmigrate.from.product.version=esb\n</code></pre></p> <p>Info</p> <p>Upon successful execution, the decrypted (plain-text) values in the <code>secure-vault.properties</code> and <code>cipher-text.properties</code> files will be written respectively to the <code>&lt;ESB_HOME&gt;/migration/secure-vault-decrypted.properties</code> file and the <code>&lt;ESB_HOME&gt;/migration/cipher-text-decrypted.properties</code> file in ESB 5.0.0.</p> <p>The encrypted passwords are now decrypted and you have access to the plain-text password values.</p> </li> <li> <p>You can now follow the instructions in Encrypting Secrets to re-encrypt the plain text secrets for the Micro Integrator.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/migrating-from-esb-5.x.x/#migrating-the-hl7-transport","title":"Migrating the Hl7 Transport","text":"<p>HL7 transport is not shipped by default in the Micro Integrator of EI 7.1.0. Therefore, see Configuring the HL7 transport to set up HL7 in the Micro Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/","title":"Upgrade WSO2 Enterprise Integrator","text":"<p>This document walks you through the process of upgrading WSO2 Enterprise Integrator.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/#why-upgrade","title":"Why upgrade?","text":"<p>There are multiple reasons why you would want to upgrade the WSO2 product to the latest version. These reasons include but are not limited to the following.</p> <ul> <li>The current product version you are using is reaching its end of life. To see if this is the case, view the support matrix documentation.</li> <li>You want to leverage the new features of the latest version of the product.</li> <li>The version of the product you have does not have certain security and bug fixes that you require.</li> </ul>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/#what-has-changed","title":"What has changed","text":"<p>Over the course of its lifetime, WSO2 Enterprise Integrator has changed significantly and some of the features you were using in an older version may not work the same way.</p>"},{"location":"enterprise-integrator/migration-docs/ei-7.1.0/upgrading-wso2-ei/#get-started","title":"Get started","text":"<p>To make sure that the upgrade process is smooth and you have the best experience, WSO2 recommends that you reach out to WSO2 Support in order to upgrade WSO2 Enterprise Integrator with minimal difficulty.</p> <p>If you are ready to start the migration process, follow the instructions given below.</p> <p>If you already have a WSO2 subscription, create a support ticket with your migration requirements and one of our support engineers will get in touch with you.</p> <ul> <li>Create a ticket</li> </ul> <p>If you are not a WSO2 customer and still need migration assistance and resources, please contact us through the following link. One of our Account Managers will get in touch with you to help.</p> <ul> <li>Contact us</li> </ul>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/","title":"Migrating from WSO2 Stream Processor","text":"<p>The Streaming Integrator performs all functions that are also performed by WSO2 Stream Processor. It also has additional features to trigger integration flows in order to take action in response to results derived after analyzing data.</p> <p>If you are currently using WSO2 Stream Processor to carry out any streaming integration/stream processing activities and want to carry them out in the Streaming Integrator, you can migrate your setup as follows:</p>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#preparing-to-upgrade","title":"Preparing to upgrade","text":"<p>The following prerequisites should be completed before upgrading.</p> <ul> <li>Make a backup of the SP 4.4.0 database and copy the  directory in order to backup the product configurations. <li>Download the Streaming Integrator from the Enterprise Integrator Home</li>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#migrating-databases","title":"Migrating Databases","text":"<p>To connect the Streaming Integrator to the same databases as WSO2 SP 4.4.0 so that the persisted data can be accessed, configure the data sources as follows:</p> <ul> <li>Configure the data sources in the <code>&lt;SI_HOME&gt;/conf/server/deployment.yaml</code> file the same way you have configured them in <code>&lt;SP_HOME&gt;/conf/wso2/worker/deployment.yaml</code> file.</li> <li>Configure the data sources in the <code>&lt;SI__TOOLING_HOME&gt;/conf/server/deployment.yaml</code> file the same way you have configured them in <code>&lt;SP_HOME&gt;/conf/wso2/editor/deployment.yaml</code> file.</li> <li> <p>Check the data source configured for Business Rules  in the <code>&lt;SP_HOME&gt;/conf/wso2/dashboard/deployment.yaml</code> file, and configure that data source with the same parameter values in the <code>&lt;SI__TOOLING_HOME&gt;/conf/server/deployment.yaml</code> file.</p> <p>Info</p> <p>The Business Rules feature which was a part of the <code>Dashboard</code> profile of the Stream Processor is now shipped with Streaming Integrator Tooling. Therefore, configurations related to this feature are added in the <code>&lt;SI__TOOLING_HOME&gt;/conf/server/deployment.yaml</code> file.</p> </li> </ul> <p>For the complete list of data sources configured for the Streaming Integrator, see Configuring Data sources.</p>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#migrating-siddhi-applications","title":"Migrating Siddhi applications","text":"<p>To migrate the Siddhi applications that you have deployed in WSO2 SP 4.4.0, follow the procedure below:</p> <ol> <li> <p>Copy all the Siddhi applications in the <code>&lt;SP_HOME/wso2/worker/deployment/siddhi-files</code> directory.</p> </li> <li> <p>Place the Siddhi applications you copied in the <code>&lt;SI_HOME/wso2/server/deployment/siddhi-files</code> directory.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/si/migrating-from-sp/#testing-the-migration","title":"Testing the migration","text":"<p>Simulate a few events to the Siddhi applications deployed in the Streaming Integrator to test whether they are generating the expected results.</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/","title":"Upgrading from Streaming Integrator 1.0.0","text":"<p>To upgrade from Streaming Integrator 1.0.0 to Streaming Integrator 1.1.0, follow the steps below:</p> <p>Before you begin</p> <p>Download Streaming Integrator 1.1.0 version from the Streaming Integrator Page</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-1-deploy-the-siddhi-applications","title":"Step 1: Deploy the Siddhi applications","text":"<p>To deploy the Siddhi applications you have been running in Streaming Integrator 1.0.0 to Streaming Integrator 1.1.0, follow the procedure below:</p> <ol> <li> <p>Open the <code>&lt;SI 1.0.0_HOME&gt;/wso2/server/deployment/siddhi-files</code> directory. Then copy all the siddhi files in it.</p> </li> <li> <p>Paste all the Siddhi files that you copied in the <code>&lt;SI 1.1.0_HOME&gt;/wso2/server/deployment/siddhi-files</code> directory.</p> </li> </ol> <p>Now your Siddhi applications are deployed in Streaming Integrator 1.1.0.</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-2-update-configuration-files","title":"Step 2: Update configuration files","text":"<p>To configure Streaming Integrator 1.1.0 the same way as Streaming Integrator 1.0.0, open the <code>&lt;SI 1.0.0_HOME&gt;/conf/server/deployment.yaml</code> file. Then read each line, and update the <code>&lt;SI 1.1.0_HOME&gt;/conf/server/deployment.yaml</code> file with the same values</p> <p>Note</p> <p>The deployment.yaml files must not be copied directly between servers due to certain differences in the parameters included in the two Streaming Integrator versions.</p>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-3-start-the-si-110-server-and-install-required-extensions","title":"Step 3: Start the SI 1.1.0 server and install required extensions","text":"<p>The purpose of this step is to Start the Streaming Integrator and identify any further reqirements to run the Siddhi applications that are deployed in it.</p> <ol> <li> <p>Navigate to the <code>&lt;SI 1.1.0_HOME&gt;/bin</code> directory and issue the appropriate command based on your operating system:</p> <ul> <li>For Windows     : <code>server.bat</code></li> <li>For Linux/MacOS :<code>./server.sh</code></li> </ul> <p>If any of the deployed Siddhi applications uses a Siddhi extension that is not currently installed, it is indicated via an error in the start up logs as shown in the example below:</p> <p></p> </li> <li> <p>To install all the missing extensions that are required to run the Siddhi applications currently deployed, navigate to the <code>&lt;SI 1.1.0_HOME&gt;/bin</code> directory and issue the appropriate command based on your operating system:</p> <ul> <li>For Windows     : <code>extension-installer.bat install</code></li> <li>For Linux/MacOS : <code>./extension-installer.sh install</code> </li> </ul> <p>As a result, the following message is logged.</p> <p></p> <p>If you enter <code>y</code> to specify that you want to proceed with the installation, the following message appears to inform you of the status of the installation and to prompt you to restart the WSO2 Streaming Integrator server once the installation is complete.</p> <p></p> <p>Info</p> <p>The Extension Installer tool is currently unable to install a few of the supported Siddhi applications. Therefore, if the start-up logs indicate a missing extension, but you are unable to install that extension via the Extension Installer tool, you can install it manually.We will be upgrading the Extension Installer to handle all the supported Siddhi extensions in a future release.</p> </li> </ol>"},{"location":"enterprise-integrator/migration-docs/si/upgrading-from-si-1.0.0-to-si-1.1.0/#step-4-test-the-migration","title":"Step 4: Test the migration","text":"<p>To test the migration, simulate events for the Siddhi applications you have deployed and verify whether they generate the expected results. For instructions to simulate events, see Testing Siddhi Applications. </p>"},{"location":"open-banking/","title":"Home","text":""},{"location":"open-banking/#document-to-nav-open-banking","title":"Document to nav Open Banking","text":""},{"location":"open-banking/migration-docs/ob-1.2.0-to-1.3.0/upgrading-wso2-ob-130-for%20uk/","title":"Upgrade the Solution to 1.3.0 for UK","text":"<p>Follow the steps below to upgrade WSO2 Open Banking from 1.2.0 to 1.3.0.</p>"},{"location":"open-banking/migration-docs/ob-1.2.0-to-1.3.0/upgrading-wso2-ob-130-for%20uk/#step-1-update-your-applications","title":"Step 1: Update your applications","text":"<p>In your new setup, update the following applications:</p> In WSO2 API Manager In Key Manager - API Store Jaggery App - Consent Revocations App - API Publisher Jaggery App - Authentication Endpoint App - API Admin Jaggery App"},{"location":"open-banking/migration-docs/ob-1.2.0-to-1.3.0/upgrading-wso2-ob-130-for%20uk/#step-2-migrate-your-data-to-the-new-setup","title":"Step 2: Migrate your data to the new setup","text":"<p>After the applications are updated, point to your databases from the new setup.</p> <p>Note</p> <p>If you want to configure the new setup with previously used databases, set up the <code>REGISTRY_DB</code> database separately.</p> <ol> <li> <p>Stop all Open Banking servers that are running.</p> </li> <li> <p>Take a backup of <code>WSO2_CONSENT_DB</code>, which is configured in <code>&lt;WSO2_OBKM_HOME&gt;/repository/conf/datasources/open-banking-datasources.xml</code> as shown in the example below.</p> <pre><code>&lt;datasources&gt;\n       &lt;datasource&gt;\n           &lt;name&gt;WSO2_CONSENT_DB&lt;/name&gt;\n           &lt;description&gt;The datasource used for registry and user manager&lt;/description&gt;\n           &lt;jndiConfig&gt;\n               &lt;name&gt;jdbc/WSO2ConsentDB&lt;/name&gt;\n           &lt;/jndiConfig&gt;\n           &lt;definition type=\"RDBMS\"&gt;\n               &lt;configuration&gt;\n                   &lt;url&gt;jdbc:mysql://localhost:3306/openbank_consentdb_dev?autoReconnect=true&amp;amp;useSSL=false&lt;/url&gt;\n</code></pre> </li> </ol> <p>Info</p> <ul> <li>Note that the migration scripts are available in the data-migration   directory. By default, the consent database's name is given as    <code>openbank_consentdb</code> in the migration scripts. If your consent database's  name is different to that, replace <code>openbank_consentdb</code> with your database's     name in the migration scripts.</li> <li>Note that the event-notification tables that existed in a separate database   in previous versions, were moved to the consent-db database.</li> </ul> <ol> <li>Execute the SQL script in the <code>&lt;WSO2_OBKM_HOME&gt;/dbscripts/finance/openbanking.org.uk/migration-from-1.2.0/</code> against <code>WSO2_CONSENT_DB</code>. It changes the existing database according to the requirements of WSO2 Open Banking version 1.3.0.</li> </ol> <p>Note</p> <p>This step is needed only if your database is MySQL.</p> <ol> <li>Execute the data migration script that is relevant to your database type in the <code>&lt;WSO2_OBKM_HOME&gt;/dbscripts/finance/openbanking.org.uk/migration-from-1.2.0/data-migration/ directory against WSO2_CONSENT_DB</code> to insert/ update existing data according to the requirements of WSO2 Open Banking version 1.3.0.</li> </ol> <p>Note</p> <p>Note that the migration scripts are compatible only with Oracle 12c release   2 or newer.</p> <ol> <li>Create table <code>AM_API_CLIENT_CERTIFICATE</code> under the datasource <code>WSO2AM_DB</code> by executing the following configuration based on your database.</li> </ol> <p>MySQL</p> <pre><code>CREATE TABLE IF NOT EXISTS `AM_API_CLIENT_CERTIFICATE` (\n `TENANT_ID` INT(11) NOT NULL,\n `ALIAS` VARCHAR(45) NOT NULL,\n `API_ID` INTEGER NOT NULL,\n `CERTIFICATE` BLOB NOT NULL,\n `REMOVED` BOOLEAN NOT NULL DEFAULT 0,\n `TIER_NAME` VARCHAR (512),\n FOREIGN KEY (API_ID) REFERENCES AM_API (API_ID) ON DELETE CASCADE ON UPDATE CASCADE,\n PRIMARY KEY (`ALIAS`, `TENANT_ID`, `REMOVED`)\n) ENGINE=InnoDB;\n</code></pre> <p>MSSQL</p> <pre><code>IF NOT  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[AM_API_CLIENT_CERTIFICATE]') AND TYPE IN (N'U'))\nCREATE TABLE AM_API_CLIENT_CERTIFICATE (\n   TENANT_ID INTEGER NOT NULL,\n   ALIAS VARCHAR(45) NOT NULL,\n   API_ID INTEGER NOT NULL,\n   CERTIFICATE VARBINARY(MAX) NOT NULL,\n   REMOVED BIT NOT NULL DEFAULT 0,\n   TIER_NAME VARCHAR(512),\n   PRIMARY KEY (ALIAS, TENANT_ID, REMOVED),\n   FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID) ON DELETE CASCADE\n);\n</code></pre> <p>Oracle</p> <pre><code>CREATE TABLE AM_API_CLIENT_CERTIFICATE (\n TENANT_ID INTEGER NOT NULL,\n ALIAS VARCHAR2(45) NOT NULL,\n API_ID INTEGER NOT NULL,\n CERTIFICATE BLOB NOT NULL,\n REMOVED INTEGER DEFAULT 0 NOT NULL,\n TIER_NAME VARCHAR2 (512),\n FOREIGN KEY (API_ID) REFERENCES AM_API (API_ID) ON DELETE CASCADE,\n PRIMARY KEY (ALIAS, TENANT_ID, REMOVED)\n)\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.2.0-to-1.3.0/upgrading-wso2-ob-130-for-berlin/","title":"Upgrade the Solution to 1.3.0 for Berlin","text":"<p>Follow the steps below to upgrade WSO2 Open Banking from 1.2.0 to 1.3.0.</p>"},{"location":"open-banking/migration-docs/ob-1.2.0-to-1.3.0/upgrading-wso2-ob-130-for-berlin/#step-1-update-your-applications","title":"Step 1: Update your applications","text":"<p>In your new setup, update the following applications:</p> In WSO2 API Manager In Key Manager - API Store Jaggery App - Consent Revocations App - API Publisher Jaggery App - Authentication Endpoint App - API Admin Jaggery App"},{"location":"open-banking/migration-docs/ob-1.2.0-to-1.3.0/upgrading-wso2-ob-130-for-berlin/#step-2-migrate-your-data-to-the-new-setup","title":"Step 2: Migrate your data to the new setup","text":"<p>After the applications are updated, point to your databases from the new setup.</p> <p>Note</p> <p>If you want to configure the new setup with previously used databases, set up the <code>REGISTRY_DB</code> database separately.</p> <ol> <li> <p>Stop all Open Banking servers that are running.</p> </li> <li> <p>Take a backup of <code>WSO2_CONSENT_DB</code>, which is configured in <code>&lt;WSO2_OBKM_HOME&gt;/repository/conf/datasources/open-banking-datasources.xml</code> as shown in the example below.</p> </li> </ol> <pre><code>&lt;datasources&gt;\n        &lt;datasource&gt;\n            &lt;name&gt;WSO2_CONSENT_DB&lt;/name&gt;\n            &lt;description&gt;The datasource used for registry and user  manager&lt;/description&gt;\n            &lt;jndiConfig&gt;\n                &lt;name&gt;jdbc/WSO2ConsentDB&lt;/name&gt;\n            &lt;/jndiConfig&gt;\n            &lt;definition type=\"RDBMS\"&gt;\n                &lt;configuration&gt;\n                    &lt;url&gt;jdbc:mysql://localhost:3306/   openbank_consentdb_dev?autoReconnect=true&amp;amp; useSSL=false&lt;/url&gt;\n</code></pre> <p>Info</p> <ul> <li>Note that the migration scripts are available in the data-migration directory. By default, the consent database's name is given as <code>openbank_consentdb</code> in the migration scripts. If your consent database's name is different to that, replace <code>openbank_consentdb</code> with your database's name in the migration scripts.</li> </ul> <ol> <li>Execute the relevant data migration script given below according to your database type against <code>WSO2_CONSENT_DB</code> to insert/ update existing data according to the requirements of WSO2 Open Banking version 1.3.0.</li> </ol> <p>MySQL</p> <pre><code>```\n&lt;obkm-home&gt;/dbscripts/finance/berlin-group.org/migration-1.2.0_to_1.3.0/mysql.sql\n```\n</code></pre> <p>MSSQL</p> <pre><code>```\n&lt;obkm-home&gt;/dbscripts/finance/berlin-group.org/migration-1.2.0_to_1.3.0/mssql.sql\n```\n</code></pre> <p>Oracle</p> <pre><code>```\n&lt;obkm-home&gt;/dbscripts/finance/berlin-group.org/oracle.sql\n```\n</code></pre> <ol> <li>Create table <code>AM_API_CLIENT_CERTIFICATE</code> under the datasource <code>WSO2AM_DB</code> by executing the following configuration based on your database.</li> </ol> <p>MySQL</p> <pre><code>```\nCREATE TABLE IF NOT EXISTS `AM_API_CLIENT_CERTIFICATE` (\n `TENANT_ID` INT(11) NOT NULL,\n `ALIAS` VARCHAR(45) NOT NULL,\n `API_ID` INTEGER NOT NULL,\n `CERTIFICATE` BLOB NOT NULL,\n `REMOVED` BOOLEAN NOT NULL DEFAULT 0,\n `TIER_NAME` VARCHAR (512),\n FOREIGN KEY (API_ID) REFERENCES AM_API (API_ID) ON DELETE CASCADE ON UPDATE CASCADE,\n PRIMARY KEY (`ALIAS`, `TENANT_ID`, `REMOVED`)\n) ENGINE=InnoDB;\n```\n</code></pre> <p>MSSQL</p> <pre><code>```\nIF NOT  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].  [AM_API_CLIENT_CERTIFICATE]') AND TYPE IN (N'U'))\nCREATE TABLE AM_API_CLIENT_CERTIFICATE (\n   TENANT_ID INTEGER NOT NULL,\n   ALIAS VARCHAR(45) NOT NULL,\n   API_ID INTEGER NOT NULL,\n   CERTIFICATE VARBINARY(MAX) NOT NULL,\n   REMOVED BIT NOT NULL DEFAULT 0,\n   TIER_NAME VARCHAR(512),\n   PRIMARY KEY (ALIAS, TENANT_ID, REMOVED),\n   FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID) ON DELETE CASCADE\n);\n```\n</code></pre> <p>Oracle</p> <pre><code>```\nCREATE TABLE AM_API_CLIENT_CERTIFICATE (\n TENANT_ID INTEGER NOT NULL,\n ALIAS VARCHAR2(45) NOT NULL,\n API_ID INTEGER NOT NULL,\n CERTIFICATE BLOB NOT NULL,\n REMOVED INTEGER DEFAULT 0 NOT NULL,\n TIER_NAME VARCHAR2 (512),\n FOREIGN KEY (API_ID) REFERENCES AM_API (API_ID) ON DELETE CASCADE,\n PRIMARY KEY (ALIAS, TENANT_ID, REMOVED)\n)\n```\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/authentication-script/","title":"Authentication Script","text":"<p>The <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/conf/finance/common.auth.script.js</code> authentication script is introduced, with the latest release of the Transactional Risk Analysis (TRA) module. The script supports the following functionalities.</p> <p>When the second factor is enabled:</p> <ul> <li>When TRA is enabled, the script executes the TRA functions and applies Strong Customer Authentication.</li> <li>Publishes authentication data for Data Reporting.</li> </ul> <p>Note</p> <p>If you have customized <code>&lt;WSO2_OB_APIM_130_HOME&gt;/repository/conf/finance/conditional.auth.script.js</code>, update your script with the new changes in the <code>common.auth.script.js</code>.</p> <p>Run the relevant migration script, to store common.auth.script.js as the new conditional auth script against the existing service providers.</p> <ul> <li>The migration scripts are available in the <code>&lt;WSO2_OB_KM_140_HOME&gt;/dbscripts/finance/openbanking.org.uk/migration-from-1.3.0</code> directory.</li> <li>Select the script, according to your database.</li> <li>Update path to conditional auth script variable as follows:</li> </ul> <p>MySQL</p> <pre><code>```\npath to conditional auth script: The path to common.auth.script.js (including the filename).\n```\n</code></pre> <p>MSSQL</p> <pre><code>```\npath to conditional auth script: The path to common.auth.script.js (including the filename).\n```\n</code></pre> <p>Oracle</p> <pre><code>```\npath to conditional auth script: The path to common.auth.script.js (excluding the filename).\n```\n</code></pre> <ul> <li>Run the relevant script against the <code>openbank_apimgtdb</code> database.</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/custom-configurations/","title":"Custom configurations","text":"<p>Copy the following configurations from WSO2 Open Banking 1.3.0 to WSO2 Open Banking 1.4.0:</p> Content Copy from Copy to Synapse configurations <code>&lt;WSO2_OB_APIM_130_HOME&gt;/repository/deployment/server/synapse-configs</code> <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/deployment/server/synapse-configs</code> Custom configurations <code>&lt;WSO2_OB_KM_130_HOME&gt;/repository/conf</code> <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/deployment/server/synapse-configs</code> Custom configurations <code>&lt;WSO2_OB_APIM_130_HOME&gt;/repository/conf</code> <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/conf</code> Custom OSGI bundles <code>&lt;WSO2_OB_KM_130_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_KM_140_HOME&gt;/repository/components/dropins</code> Custom OSGI bundles <code>&lt;WSO2_OB_APIM_130_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/components/dropins</code> Custom JAR files <code>&lt;WSO2_OB_KM_130_HOME&gt;/repository/components/lib</code> <code>&lt;WSO2_OB_KM_140_HOME&gt;/repository/components/lib</code> Custom JAR files <code>&lt;WSO2_OB_APIM_130_HOME&gt;/repository/components/lib</code> <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/components/lib</code>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/datasource-changes/","title":"Datasource changes","text":"<p>Warning</p> <p>The following datasource and database are renamed. - The <code>WSO2_CONSENT_DB</code> datasource is renamed as <code>WSO2_OPEN_BANKING_DB</code>. - The <code>openbank_consentdb</code> database is renamed as <code>openbank_openbankingdb</code>.</p> <p>Update the <code>WSO2_CONSENT_DB</code> datasource values and set them to <code>WSO2_OPEN_BANKING_DB</code> in the following files:</p> <ul> <li><code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/datasources/master-datasources.xml</code></li> <li><code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/finance/open-banking.xml</code></li> <li><code>&lt;WSO2_OB_APIM_HOME&gt;/repository/conf/datasources/master-datasources.xml</code></li> <li><code>&lt;WSO2_OB_APIM_HOME&gt;/repository/conf/finance/open-banking.xml</code></li> </ul>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/db-and-synapse-configurations/","title":"Databases and Synapse configurations","text":"<ul> <li>Take a backup of the existing database used by WSO2 Open Banking 1.3.0. This backup is necessary in case the migration causes issues in the existing database.</li> <li>Take a backup of the existing synapse configurations in WSO2 Open Banking 1.3.0. The synapse configuration is available in the <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/deployment/server/synapse-configs</code> directory.</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/fraud-detection/","title":"Fraud Detection","text":"<p>Fraud Detection is for transaction monitoring mechanisms to detect unauthorized or fraudulent transactions and generate alerts. It also exempts the security requirements of strong customer authentication based on the identified level of risk and recurrence of the payment transaction.</p> <p>Open the <code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/finance/open-banking.xml</code> and <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/conf/finance/open-banking.xml</code> files to enable Fraud Detection:</p> <ol> <li> <p>Set the <code>&lt;IsEnabled&gt;</code> property under <code>&lt;FraudDetection&gt;</code> to true to enable the feature.</p> </li> <li> <p>Replace the <code>&lt;WSO2_OB_BI_HOST&gt;</code> place holder with the hostname of the Business Intelligence server.</p> <pre><code>&lt;BIServer&gt;\n    &lt;!-- Include all configurations related to OBBI component --&gt;\n    &lt;FraudDetection&gt;\n        &lt;!-- Include all configurations related to Fraud Detection --&gt;\n\n        &lt;!-- Enable FD in WSO2 Open Banking--&gt;\n        &lt;IsEnabled&gt;true&lt;/IsEnabled&gt;\n        &lt;!-- Configurations related to FD Receivers--&gt;\n        &lt;Receivers&gt;\n            &lt;!-- Administrator username to login to the remote BI server. --&gt;\n            &lt;Username&gt;admin@wso2.com@carbon.super&lt;/Username&gt;\n            &lt;!-- Administrator password to login to the remote BI server. --&gt;\n            &lt;Password&gt;wso2123&lt;/Password&gt;\n            &lt;!-- Receiver URLs of the Siddhi Apps used to validate for FD.--&gt;\n            &lt;FraudDetectionURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8007/FraudDetectionApp/FraudDetectionStream&lt;/FraudDetectionURL&gt;\n            &lt;InvalidSubmissionURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8006/InvalidSubmissionsApp/InvalidSubmissionsStream&lt;/InvalidSubmissionURL&gt;\n        &lt;/Receivers&gt;\n    &lt;/FraudDetection&gt;\n&lt;/BIServer&gt;\n</code></pre> </li> <li> <p>Open the <code>&lt;WSO2_OB_BI_HOME&gt;/deployment/siddhi-files/FraudStatusUpdaterApp.siddhi</code> file and update <code>&lt;localhost&gt;</code> in the receiver URL with the hostname of your WSO2 OB BI server.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_BI_HOME&gt;/conf/dashboard/deployment.yaml</code>. Add the <code>APIM-alerts.enabled</code> and <code>wso2-is-analytics</code> configurations under <code>analytics.solutions</code> and set as <code>false</code>. Once you add the configurations, the <code>deployment.yaml</code> file should be as follows:</p> </li> </ol> <pre><code>    analytics.solutions:\n        IS-analytics.enabled: false\n        APIM-analytics.enabled: true\n        EI-analytics.enabled: false\n        APIM-alerts.enabled: false\n        wso2-is-analytics: false\n</code></pre> <ol> <li> <p>Open the <code>&lt;WSO2_OB_BI_HOME&gt;/conf/worker/deployment.yaml</code> file and configure <code>auth.configs</code>:</p> <ul> <li>username: <code>admin@wso2.com@carbon.super</code></li> <li>password: <code>d3NvMjEyMw==</code> (Password is <code>wso2123</code>. Make sure you encode the password with Base64).</li> </ul> <pre><code>auth.configs:\n    type: 'local'\n    userManager:\n        adminRole: admin\n        userStore:\n            users:\n            -\n                user:\n                    username: admin@wso2.com@carbon.super\n                    password: d3NvMjEyMw==\n                    roles: 1\n            roles:\n            -\n                role:\n                    id: 1\n                    displayName: admin\n</code></pre> </li> <li> <p>Once you configure the TRA and FD modules, start the servers in the order of:</p> <ol> <li>Dashboard profile in WSO2 OB BI</li> <li>Worker profile in WSO2 OB BI</li> <li>WSO2 OB KM</li> <li>WSO2 OB APIM</li> </ol> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/key-manager-extension/","title":"Key Manager Extension","text":"<p>The Key Manager Extension is upgraded for Data Reporting.</p> <p>If you have customized the default WSO2 Open Banking Key Manager extension:</p> <ul> <li>Extend it from the WSO2 Open Banking Keymanger extension.</li> <li>Set the authentication steps according to the WSO2 Open Banking Keymanger extension.</li> </ul> <p>For more information see, Customising Key Manager extension.</p>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/psd2-data-reporting/","title":"PSD2 Data Reporting","text":"<p>If you are using WSO2 Open Banking Business Intelligence (WSO2 OB BI) for PSD2 Data Reporting, execute the relevant database script against the mentioned database.</p> Database Script location <code>openbank_ob_reporting_statsdb</code> <code>&lt;WSO2_OB_BI_HOME&gt;/resources/finance/dbscripts/migration/stats_db/migration-1.3.0_to_1.4.0</code>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/request-payload-validation/","title":"Request Payload Validation","text":"<p>Request Payload Validation adds flexibility to validate an incoming request against any customisations done to the swagger definition. You need to republish the API to apply the swagger based validations.</p> <p>Note</p> <p>Follow the steps below to use the Request Payload Validation feature, if you haven't applied the WUM update released on June 25, 2019 (06-25-2019). </p> <ol> <li> <p>Go to the API Manager Management Console at https://:9443/carbon. <li> <p>Navigate to the Extensions tab and click Lifecycles.</p> </li> <p></p> <ol> <li> <p>Click View/Edit of APILifeCycle.</p> </li> <li> <p>Add the following changes to the XML file, under the respective tags to enable publishing the swagger as a local entry in the <code>&lt;WSO2_OB_APIM_HOST&gt;/repository/deployment/server/synapse-configs/default/local-entries</code> directory.</p> </li> <li> <p>In the <code>state id= \"Published\"</code> element, add a new execution element under <code>transitionExecution</code> data with the properties below:</p> <pre><code>&lt;state id=\"Published\"&gt;\n    &lt;datamodel&gt;\n        &lt;data name=\"transitionExecution\"&gt;\n            &lt;execution forEvent=\"Publish\"\n           class=\"com.wso2.finance.open.banking.api.executor.OBAPIPublisherExecutor\"&gt;&lt;/ execution&gt;\n        &lt;/data&gt;\n    &lt;/datamodel&gt;\n&lt;/state&gt;\n</code></pre> </li> <li> <p>In the state <code>id=\"Created\"</code> element, under <code>data name=\"transitionExecution\"</code> find the default execution class value for event <code>Publish</code>. Replace that default execution class with <code>com.wso2.finance.open.banking.api.executor.OBAPIPublisherExecutor</code> as follows:</p> <pre><code>&lt;state id=\"Created\"&gt;\n    &lt;datamodel&gt;\n        &lt;data name=\"transitionExecution\"&gt;\n            &lt;execution forEvent=\"Publish\"\n      class=\"com.wso2.finance.open.banking.api.executor.OBAPIPublisherExecutor\"&gt;&lt;/  execution&gt;\n        &lt;/data&gt;\n    &lt;/datamodel&gt;\n&lt;/state&gt;\n</code></pre> </li> <li> <p>Republish the APIs.</p> </li> </ol> <p>You need to republish the API to apply the swagger based validations. Therefore, follow the steps below:</p> <p>a. Sign in to the API Publisher at <code>https://&lt;WSO2_OB_APIM_HOST&gt;:9443/publisher</code>  using the credentials of a user, whose role is an API Publisher. For more information on users and roles, see here.</p> <p>b. Select the respective API and click Edit API.</p> <p></p> <p>c. You are redirected to the Design phase. Click the Edit Source button under   the API Definition section.</p> <p></p> <p>d. Click Apply Changes to save the changes and go back to the Design page.</p> <p></p> <p>e. Scroll down and click Save.</p> <p>f. Click Next: Implement &gt; Next: Manage and Save and Publish.</p>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/transaction-risk-analysis/","title":"Transaction Risk Analysis (TRA)","text":"<p>Transaction Risk Analysis enables analyzing the risk level based on predefined rules and exempts the user from having to provide the second factor.</p> <ol> <li>Open the <code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/finance/open-banking.xml</code> and <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/conf/finance/open-banking.xml</code> files to enable Transaction Risk Analysis (TRA):</li> </ol> <p>a. Set the <code>&lt;IsEnabled&gt;</code> property under <code>&lt;TRA&gt;</code> to true to enable the TRA feature.</p> <p>b. Replace the <code>&lt;WSO2_OB_BI_HOST&gt;</code> place holder with the hostname of the Business   Intelligence server.</p> <p>c. To enable TRA for:</p> <ul> <li>payments, set the <code>&lt;PaymentValidationEnabled&gt;</code> property to <code>true</code></li> <li>accounts, set the <code>&lt;AccountValidationEnabled&gt;</code> property to <code>true</code></li> </ul> <p>d. The configurations related to TRA Receivers are under the <code>&lt;Receivers&gt;</code> property. You may use the default WSO2 Open Banking Business Intelligence server username and password. Replace the placeholders in <code>&lt;TRAAccountValidationURL&gt;</code> and  <code>&lt;TRAPaymentValidationURL&gt;</code> properties to set the Account and Payment validation URLs respectively.</p> <pre><code>```\n&lt;BIServer&gt;\n    &lt;!-- Include all configurations related to OBBI component --&gt;\n    &lt;TRA&gt;\n        &lt;!-- Include all configurations related to Transaction Risk Analysis --&gt;\n\n        &lt;!-- Enable TRA in WSO2 Open Banking--&gt;\n        &lt;IsEnabled&gt;true&lt;/IsEnabled&gt;\n        &lt;!-- following configurations are used to enable TRA for specific flows only--&gt;\n        &lt;!-- Enable TRA for Payments--&gt;\n        &lt;PaymentValidationEnabled&gt;true&lt;/PaymentValidationEnabled&gt;\n        &lt;!-- Enable TRA for Accounts--&gt;\n        &lt;AccountValidationEnabled&gt;true&lt;/AccountValidationEnabled&gt;\n        &lt;!-- Configurations related to TRA Receivers--&gt;\n        &lt;Receivers&gt;\n            &lt;!-- Administrator username to login to the remote BI server. --&gt;\n            &lt;Username&gt;admin@wso2.com@carbon.super&lt;/Username&gt;\n            &lt;!-- Administrator password to login to the remote BI server. --&gt;\n            &lt;Password&gt;wso2123&lt;/Password&gt;\n            &lt;!-- Receiver URLs of the Siddhi Apps used to validate for TRA.--&gt;\n            &lt;TRAAccountValidationURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8007/    TRAAccountValidationApp/TRAValidationStream&lt;/TRAAccountValidationURL&gt;\n            &lt;TRAPaymentValidationURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8007/    TRAPaymentValidationApp/TRAValidationStream&lt;/TRAPaymentValidationURL&gt;\n        &lt;/Receivers&gt;\n        &lt;TimePeriodOfRecurringPayment&gt;90&lt;/TimePeriodOfRecurringPayment&gt;\n        &lt;MaxFrequencyOfTransactionsWithoutSCA&gt;5&lt;/MaxFrequencyOfTransactionsWithoutSCA&gt;\n        &lt;TotalAmountLimitOfTransactionsWithoutSCA&gt;100&lt;/    TotalAmountLimitOfTransactionsWithoutSCA&gt;\n        &lt;LastSCATimeLimit&gt;90&lt;/LastSCATimeLimit&gt;\n        &lt;TransactionAmountLimit&gt;30&lt;/TransactionAmountLimit&gt;\n    &lt;/TRA&gt;\n&lt;/BIServer&gt;\n```\n</code></pre> <ol> <li>Make the following changes to the files given below.</li> </ol> <p>a. Open the <code>&lt;WSO2_OB_BI_HOME&gt;/deployment/siddhi-files/TRAAccountValidationApp.siddhi</code> file.</p> <pre><code>- Update the `&lt;WSO2_OB_BI_HOST&gt;` placeholder in the receiver URL, with the hostname of your WSO2 OB BI server.\n\n    ```\n    receiver.url='http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAAccountValidationApp/TRAValidationStream'\n    ```\n</code></pre> <p>b. Open the <code>&lt;WSO2_OB_BI_HOME&gt;/deployment/siddhi-files/TRAPaymentValidationApp.siddhi</code> file.</p> <pre><code>- Update the `&lt;WSO2_OB_BI_HOSTNAME&gt;` placeholder in the receiver URL, with the hostname of your WSO2 OB BI server.\n\n    ```\n    receiver.url='http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAPaymentValidationApp/TRAValidationStream'\n    ```\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrade-the-solution/","title":"Upgrade the solution","text":"<p>Follow the steps below to upgrade WSO2 Open Banking from 1.3.0 to 1.4.0.</p> <ul> <li>Databases and Synapse configurations</li> <li>Datasource changes</li> <li>Custom configurations</li> <li>Request Payload Validation</li> <li>Authentication Script</li> <li>Key Manager Extension</li> <li>Transaction Risk Analysis (TRA)</li> <li>Fraud Detection</li> <li>PSD2 Data Reporting</li> <li>UK (Upgrading from v3.1 to v3.1.1)</li> <li>Berlin (Upgrading from 1.1.0 to 1.3.0)</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrading-wso2-ob-berlin/","title":"WSO2 Open Banking Berlin (Upgrading from 1.1.0 to 1.3.0)","text":""},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrading-wso2-ob-berlin/#accounts-and-payments-tables","title":"Accounts and Payments tables","text":"<ul> <li>A new column named <code>API_VERSION</code> is added to the <code>BG_ACCOUNT_INITIALIZATION</code> and <code>BG_PAYMENT_CONSENT</code> tables. These are used in the accounts and payments flows respectively.</li> <li>Run the relevant SQL migration script in the <code>&lt;WSO2_OB_KM_HOME&gt;/dbscripts/finance/berlin-group.org/migration-1.3.0_to_1.4.0</code> directory, against the <code>openbank_openbankingdb</code> database.</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrading-wso2-ob-berlin/#authorize-payment-cancellation","title":"Authorize payment cancellation","text":"<p>The AuthorizeCancellation property is introduced to configure whether PSU authorization is required for payment cancellation or not.</p> <ul> <li>Open the <code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/finance/open-banking.xml</code> file.</li> <li>Update the <code>&lt;AuthorizeCancellation&gt;</code> property, under <code>&lt;Berlin&gt;</code>.</li> <li> <p>The possible values are:</p> <ul> <li><code>true</code>: Required to authorize the cancellation by completing authorization flow.</li> <li><code>false</code>: Authorization is not required.</li> </ul> <pre><code>&lt;Berlin&gt;\n    &lt;AuthorizeCancellation&gt;false&lt;/AuthorizeCancellation&gt;\n&lt;/Berlin&gt;\n</code></pre> </li> </ul>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrading-wso2-ob-berlin/#configure-sca-methods","title":"Configure SCA methods","text":"<p>The <code>AuthenticationObject</code> property is introduced to configure the SCA methods for API responses.</p> <ul> <li>Open the <code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/finance/open-banking.xml</code> file and add the <code>AuthenticationObject</code> configurations.</li> <li>Depending on the risk management of the ASPSP this choice might be offered before or after the PSU has been identified with the first relevant factor, or if an access token is transported.</li> </ul> <p>Following are the possible SCA Authentication types:</p> SMS_OTP An SCA method, where an OTP linked to the transaction to be authorised is sent to the PSU through an SMS channel. CHIP_OTP An SCA method, where an OTP is generated by a chip card. PHOTO_OTP An SCA method, where the challenge is a QR code or similar encoded visual data which can be read in by a consumer device or specific mobile app. PUSH_OTP An OTP is pushed to a dedicated authentication APP and displayed to the PSU. <p>Given below is a sample configuration for a <code>SMS_OTP</code> authentication.</p> <pre><code>&lt;Berlin&gt;\n    &lt;SCA&gt;\n        &lt;SCAMethods&gt;\n            &lt;AuthenticationObject&gt;\n                &lt;AuthenticationType&gt;SMS_OTP&lt;/AuthenticationType&gt;\n                &lt;AuthenticationVersion&gt;1.0&lt;/AuthenticationVersion&gt;\n                &lt;AuthenticationMethodId&gt;sms-otp&lt;/AuthenticationMethodId&gt;\n                &lt;Name&gt;SMS OTP on Mobile&lt;/Name&gt;\n                &lt;Explanation&gt;SMS based one time password&lt;/Explanation&gt;\n                &lt;Default&gt;true&lt;/Default&gt;\n            &lt;/AuthenticationObject&gt;\n        &lt;/SCAMethods&gt;\n    &lt;/SCA&gt;\n&lt;/Berlin&gt;\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrading-wso2-ob-uk/","title":"WSO2 Open Banking UK (Upgrading from v3.1 to v3.1.1)","text":""},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrading-wso2-ob-uk/#uk_consent_rev-table","title":"<code>UK_CONSENT_REV</code> table","text":"<ul> <li>The <code>UK_CONSENT_REV</code> table is altered to have an auto increment field as the new primary key instead of the complex primary key used in v1.3.0.</li> <li>Run the relevant database script in the <code>&lt;WSO2_OB_KM_HOME&gt;/dbscripts/finance/openbanking.org.uk/migration-from-1.3.0</code> directory against the <code>openbank_openbankingdb</code> database.</li> </ul> <p>For Oracle database:</p> <p>When dropping the constraints, if there is more than one <code>UK_CONSENT_REV</code> table, change the SQL query as below and execute. Update the <code>&lt;ORACLE_USER&gt;</code> placeholder with the current database user.</p> <pre><code>SELECT * FROM all_constraints WHERE table_name = 'UK_CONSENT_REV' AND index_owner= '&lt;ORACLE_USER&gt;';\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.3.0-to-1.4.0/upgrading-wso2-ob-uk/#ob_dcr_details-table","title":"<code>OB_DCR_DETAILS</code> table","text":"<p>The following changes are done to support Dynamic Client Registration v3.2.</p> <ul> <li>Run the relevant SQL migration script in the <code>&lt;WSO2_OB_APIM_HOME&gt;/dbscripts/finance/dynamic-client-registration/migration-3.1_to_3.2</code> directory, against the <code>openbank_openbankingdb</code> database. The SQL script modifies the <code>OB_DCR_DETAILS</code> table by adding the following columns:<ul> <li><code>APPLICATION_ID</code></li> <li><code>SOFTWARE_ID</code></li> <li><code>CLID_ISSUED_AT</code></li> </ul> </li> </ul>"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/ReadMe/","title":"ReadME","text":""},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/ReadMe/#read-me-target-version-150","title":"Read Me Target Version 1.5.0","text":""},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/application-attribution-changes/","title":"Application attribute changes","text":"<p>WSO2 Open Banking 1.5.0 supports both regulatory and non-regulatory APIs. To use this feature, you need to update the application attributes. Run the relevant migration script in the given locations against the <code>openbank_apimgtdb</code> database.</p> Database Script location <code>openbank_apimgtdb</code> <code>&lt;WSO2_OB_KM_HOME&gt;/dbscripts/finance/apimgt/migration-1.4.0_to_1.5.0</code>"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/custom-configurations/","title":"Custom configurations","text":"<p>Copy the following content from WSO2 Open Banking 1.4.0 to WSO2 Open Banking 1.5.0:</p> Content Copy from Copy to Synapse configurations <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/deployment/server/synapse-configs</code> <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/deployment/server/synapse-configs</code> Custom configurations <code>&lt;WSO2_OB_KM_140_HOME&gt;/repository/conf</code> <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/conf</code> Custom configurations <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/conf</code> <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/conf</code> Custom OSGI bundles (manually added files) <code>&lt;WSO2_OB_KM_140_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/dropins</code> Custom OSGI bundles (manually added files) <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/components/dropins</code> Custom JAR files (manually added files) <code>&lt;WSO2_OB_KM_140_HOME&gt;/repository/components/lib</code> <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/lib</code> Custom JAR files (manually added files) <code>&lt;WSO2_OB_APIM_140_HOME&gt;/repository/components/lib</code> <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/components/lib</code>"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/db-and-synapse-configurations/","title":"Databases and Synapse configurations","text":"<ul> <li>Take a backup of the existing database used by WSO2 Open Banking 1.4.0. This backup is necessary in case the migration causes issues in the existing database.</li> <li>Take a backup of the existing synapse configurations in WSO2 Open Banking 1.4.0. The synapse configuration is available in the <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/deployment/server/synapse-configs</code> directory.</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/psd2-data-reporting/","title":"PSD2 Data Reporting","text":"<p>If you are using WSO2 Open Banking Business Intelligence (WSO2 OB BI) for PSD2 Data Reporting, execute the relevant database script against the mentioned databases:</p> Database Script location <code>openbank_ob_reporting_statsdb</code> <code>&lt;WSO2_OB_BI_150_HOME&gt;/resources/finance/dbscripts/migration-to-1.5.0/ob_stats_db</code> <code>openbank_ob_reporting_summarizeddb</code> <code>&lt;WSO2_OB_BI_150_HOME&gt;/resources/finance/dbscripts/migration-to-1.5.0/</code>ob_summarize_db`"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/upgrade-the-solution/","title":"Upgrade the solution","text":"<p>Follow the steps below to upgrade WSO2 Open Banking from 1.4.0 to 1.5.0.</p> <ul> <li>Databases and Synapse configurations</li> <li>Custom configurations</li> <li>Application attribute changes</li> <li>PSD2 Data Reporting</li> <li>WSO2 Open Banking UK</li> <li>WSO2 Open Banking Berlin (Upgrading from 1.3.0 to 1.3.3)</li> <li>WSO2 Open Banking AU (Upgrading from v1.0.0 to v1.2.0)</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/upgrading-wso2-ob-au/","title":"WSO2 Open Banking AU (Upgrading from v1.0.0 to v1.2.0)","text":"<ol> <li> <p>Run the relevant database script in the <code>&lt;WSO2_OB_KM_HOME&gt;/dbscripts/finance/openbanking.org.uk/migration-1.4.0_to_1.5.0</code> directory against the <code>openbank_openbankingdb</code> database.</p> </li> <li> <p>Add the following configurations to the open-banking.xml files, under the <code>&lt;Server&gt;</code> tag. The <code>open-banking.xml</code> files are in the below locations:</p> </li> <li> <p><code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/finance/open-banking.xml</code></p> </li> <li><code>&lt;WSO2_OB_APIM_HOME&gt;/repository/conf/finance/open-banking.xml</code></li> </ol> <p>These configurations are for:</p> <ul> <li>Metadata Cache Management</li> <li>Enable extended endpoints and holder specific versioning</li> <li>Cache the responses received for the Consumer Data Standards API requests</li> </ul> <pre><code>&lt;AU&gt;\n    &lt;MetaDataCache&gt;\n        &lt;EnableMetaDataCache&gt;true&lt;/EnableMetaDataCache&gt;\n        &lt;MetaDataCacheUpdatePeriod&gt;5&lt;/MetaDataCacheUpdatePeriod&gt;\n        &lt;DefaultCacheTimeout&gt;1&lt;/DefaultCacheTimeout&gt;\n        &lt;DataRecipientsDiscoveryURL&gt;DR_DISCOVERY_MOCK_URL&lt;/DataRecipientsDiscoveryURL&gt;\n        &lt;SoftwareProductsDiscoveryURL&gt;SP_DISCOVERY_MOCK_URL&lt;/SoftwareProductsDiscoveryURL&gt;\n        &lt;DCRInternalURL&gt;https://\n            &lt;WSO2_OB_APIM_HOST&gt;:9443/dynamic-client-registration/common/register/\n            &lt;/DCRInternalURL&gt;\n        &lt;/MetaDataCache&gt;\n        &lt;ResourcePaths&gt;\n            /banking/accounts,\n            /banking/accounts/balances,\n            /banking/accounts/direct-debits,\n            /banking/accounts/{AccountId}/balance,\n            /banking/accounts/{AccountId},\n            /banking/accounts/{AccountId}/transactions,\n            /banking/accounts/{AccountId}/transactions/{transactionId},\n            /banking/accounts/{AccountId}/direct-debits,\n            /banking/accounts/{AccountId}/payments/scheduled,\n            /banking/payments/scheduled,\n            /banking/payees,\n            /banking/payees/{payeeId},\n            /banking/products,\n            /banking/products/{productId},\n            /common/customer,\n            /common/customer/detail,\n            /discovery/status,\n            /discovery/outages\n        &lt;/ResourcePaths&gt;\n        &lt;HolderIdentifier&gt;\n            &lt;!--configure bank specific identifier--&gt;\n        &lt;/HolderIdentifier&gt;\n        &lt;Enforcement&gt;\n            &lt;Cache&gt;\n                &lt;CacheEnabled&gt;true&lt;/CacheEnabled&gt;\n                &lt;ModifiedExpiryMinutes&gt;15&lt;/ModifiedExpiryMinutes&gt;\n                &lt;AccessedExpiryMinutes&gt;15&lt;/AccessedExpiryMinutes&gt;\n            &lt;/Cache&gt;\n        &lt;/Enforcement&gt;\n&lt;/AU&gt;\n</code></pre> <ol> <li>Add the following configurations for Dynamic Client Registration under <code>&lt;Server&gt;</code> tag and update them accordingly. Remove any DCR configurations within the <code>&lt;UK&gt;</code> tags.</li> </ol> <pre><code>&lt;DCR&gt;\n    &lt;TokenAuthentication&gt;\n        &lt;Method&gt;private_key_jwt&lt;/Method&gt;\n        &lt;Method&gt;tls_client_auth&lt;/Method&gt;\n    &lt;/TokenAuthentication&gt;\n    &lt;ConnectionTimeout&gt;0&lt;/ConnectionTimeout&gt;\n    &lt;ReadTimeout&gt;0&lt;/ReadTimeout&gt;\n    &lt;!--The endpoint urls are to access the rest APIs of API manager in order to\n        create the application, service provider and generate keys for the application.\n         --&gt;\n    &lt;EndPointURL&gt;\n        &lt;ServiceProviderCreation&gt;/client-registration/v0.14/register&lt;/ServiceProviderCreation&gt;\n        &lt;Application&gt;/api/am/store/v0.14/applications&lt;/Application&gt;\n        &lt;Token&gt;/token&lt;/Token&gt;\n        &lt;KeyGeneration&gt;/api/am/store/v0.14/applications/generate-keys&lt;/KeyGeneration&gt;\n        &lt;ApiSearch&gt;/api/am/store/v0.14/apis&lt;/ApiSearch&gt;\n        &lt;ApiSubscribe&gt;/api/am/store/v0.14/subscriptions/multiple&lt;/ApiSubscribe&gt;\n    &lt;/EndPointURL&gt;\n    &lt;EnableURIValidation&gt;false&lt;/EnableURIValidation&gt;\n    &lt;EnableHostNameValidation&gt;false&lt;/EnableHostNameValidation&gt;\n    &lt;!-- Use SoftwareID in SSA as Application Name--&gt;\n    &lt;UseSoftwareIdAsApplicationName&gt;false&lt;/UseSoftwareIdAsApplicationName&gt;\n&lt;/DCR&gt;\n</code></pre> <ol> <li>Go to the API Publisher (<code>https://&lt;WSO2_OB_APIM_HOST&gt;:9443/publisher</code>), add the following API properties to the already deployed APIs and republish them. For more information, see Deploying APIs for AU.</li> </ol> API Property Name Property Value Consumer Data Standards API v1.2.0 <code>ob-spec</code> <code>au</code> Consumer Data Standards API v1.2.0 <code>ob-api-type</code> <code>account</code> Consumer Data Standards Administration API v1.2.0 N/A N/A Dynamic Client Registration API v0.1 <code>ob-spec</code> <code>au</code> Dynamic Client Registration API v0.1 <code>ob-api-type</code> <code>dcr</code>"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/upgrading-wso2-ob-berlin/","title":"WSO2 Open Banking Berlin (Upgrading from 1.3.0 to 1.3.3)","text":"<ul> <li>Go to the API Publisher (<code>https://&lt;WSO2_OB_APIM_HOST&gt;:9443/publisher</code>), add the following API properties to the already deployed APIs and republish them. For more information, see Deploying APIs for Berlin.</li> </ul> Property Name Property Value ob-spec berlin ob-api-type psd2"},{"location":"open-banking/migration-docs/ob-1.4.0-to-1.5.0/upgrading-wso2-ob-uk/","title":"WSO2 Open Banking UK","text":"<ol> <li>Run the relevant database script in the given locations against the <code>openbank_openbankingdb</code> database.</li> </ol> Database Script location <code>openbank_openbankingdb</code> <code>&lt;WSO2_OB_KM_HOME&gt;/dbscripts/finance/openbanking.org.uk/migration-1.4.0_to_1.5.0/</code> <code>openbank_openbankingdb</code> <code>&lt;WSO2_OB_KM_HOME&gt;/dbscripts/finance/event-notification/migration-1.4.0_to_1.5.0/</code> <ol> <li> <p>To disable validating and signing payload for x-jws-signature header, set the following configuration to <code>false</code> in the <code>open-banking.xml</code> files.</p> </li> <li> <p><code>&lt;WSO2_OB_KM_HOME&gt;/repository/conf/finance/open-banking.xml</code></p> </li> <li> <p><code>&lt;WSO2_OB_APIM_HOME&gt;/repository/conf/finance/open-banking.xml</code></p> <pre><code>&lt;SigningConfiguration&gt;\n&lt;Enable&gt;false&lt;/Enable&gt;\n</code></pre> </li> <li> <p>Changes for Dynamic Client Registration:</p> <ol> <li> <p>Add the following configurations for Dynamic Client Registration under <code>&lt;Server&gt;</code> tag and update them accordingly. Remove any DCR configurations within the <code>&lt;UK&gt;</code> tags. </p> <p>DCR v1.0.0</p> <p><pre><code>   &lt;DCR&gt;\n    &lt;TokenAuthentication&gt;\n        &lt;Method&gt;private_key_jwt&lt;/Method&gt;\n        &lt;Method&gt;tls_client_auth&lt;/Method&gt;\n    &lt;/TokenAuthentication&gt;\n    &lt;ConnectionTimeout&gt;0&lt;/ConnectionTimeout&gt;\n    &lt;ReadTimeout&gt;0&lt;/ReadTimeout&gt;\n    &lt;EndPointURL&gt;\n        &lt;ServiceProviderCreation&gt;/client-registration/v0.14/register&lt;/ServiceProviderCreation&gt;\n        &lt;Application&gt;/api/am/store/v0.14/applications&lt;/Application&gt;\n        &lt;Token&gt;/token&lt;/Token&gt;\n        &lt;KeyGeneration&gt;/api/am/store/v0.14/applications/generate-keys&lt;/KeyGeneration&gt;\n        &lt;ApiSearch&gt;/api/am/store/v0.14/apis&lt;/ApiSearch&gt;\n        &lt;ApiSubscribe&gt;/api/am/store/v0.14/subscriptions/multiple&lt;/ApiSubscribe&gt;\n    &lt;/EndPointURL&gt;\n    &lt;EnableURIValidation&gt;false&lt;/EnableURIValidation&gt;\n    &lt;EnableHostNameValidation&gt;false&lt;/EnableHostNameValidation&gt;\n    &lt;APISubscriptions&gt;\n        &lt;PISP&gt;\n            &lt;APIContext&gt;/open-banking/v3.1/pisp&lt;/APIContext&gt;\n            &lt;APIContext&gt;/open-banking/v3.0/pisp&lt;/APIContext&gt;\n            &lt;APIContext&gt;/open-banking/v2.0/pisp&lt;/APIContext&gt;\n        &lt;/PISP&gt;\n        &lt;AISP&gt;\n            &lt;APIContext&gt;/open-banking/v3.1/aisp&lt;/APIContext&gt;\n            &lt;APIContext&gt;/open-banking/v3.0/aisp&lt;/APIContext&gt;\n            &lt;APIContext&gt;/open-banking/v2.0/aisp&lt;/APIContext&gt;\n        &lt;/AISP&gt;\n    &lt;/APISubscriptions&gt;\n    &lt;UseSoftwareIdAsApplicationName&gt;true&lt;/UseSoftwareIdAsApplicationName&gt;\n    &lt;JwksUrlSandbox&gt;https://keystore.openbankingtest.org.uk/keystore/openbanking.jwks&lt;/JwksUrlSandbox&gt;\n    &lt;JwksUrlProduction&gt;https://keystore.openbanking.org.uk/keystore/openbanking.jwks&lt;/JwksUrlProduction&gt;\n   &lt;/DCR&gt;\n</code></pre> DCR v3.2</p> <pre><code>&lt;DCR&gt;\n    &lt;TokenAuthentication&gt;\n        &lt;Method&gt;private_key_jwt&lt;/Method&gt;\n        &lt;Method&gt;tls_client_auth&lt;/Method&gt;\n    &lt;/TokenAuthentication&gt;\n    &lt;ConnectionTimeout&gt;0&lt;/ConnectionTimeout&gt;\n    &lt;ReadTimeout&gt;0&lt;/ReadTimeout&gt;\n    &lt;EnableURIValidation&gt;false&lt;/EnableURIValidation&gt;\n    &lt;EnableHostNameValidation&gt;false&lt;/EnableHostNameValidation&gt;\n    &lt;UseSoftwareIdAsApplicationName&gt;true&lt;/UseSoftwareIdAsApplicationName&gt;\n    &lt;JwksUrlSandbox&gt;https://keystore.openbankingtest.org.uk/keystore/openbanking.jwks&lt;/JwksUrlSandbox&gt;\n    &lt;JwksUrlProduction&gt;https://keystore.openbanking.org.uk/keystore/openbanking.jwks&lt;/JwksUrlProduction&gt;\n&lt;/DCR&gt;\n</code></pre> </li> <li> <p>Update the <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/deployment/server/synapse-configs/default/sequences/&lt;USERNAME&gt;--DynamicClientRegistrationAPI_vv3.2--In.xml</code> file as follows: </p> </li> <li> <p>Replace <code>&lt;header name=\"To\" value=\"https://&lt;WSO2_OB_APIM_HOST&gt;:9443/ob-dynamic-client-registration\"/&gt;</code> property with the new <code>/dynamic-client-registration/common</code> endpoint.</p> </li> </ol> <pre><code>&lt;header name=\"To\" value=\"https://&lt;WSO2_OB_APIM_HOST&gt;:9443/dynamic-client-registration/common\"/&gt;\n</code></pre> </li> <li> <p>Update the <code>ApplicationDeletion</code> executor value as follows. See Dynamic Client Registration v3.2 - Configuring application deletion workflow, for more information.</p> <pre><code>&lt;ApplicationDeletion executor=\"com.wso2.finance.open.banking.application.deletion.workflow.impl.ApplicationDeletionWorkflow\"/&gt;\n</code></pre> </li> <li> <p>Go to the API Publisher (<code>https://&lt;WSO2_OB_APIM_HOST&gt;:9443/publisher</code>), add the following API properties to the already deployed APIs and republish them. For more information, see Deploying APIsfor UK.</p> </li> </ol> API Property Name Property Value AccountInfo API v3.1.1 <code>ob-spec</code> <code>uk</code> AccountInfo API v3.1.1 <code>ob-api-type</code> <code>account</code> AccountInfo API v3.1.1 <code>ob-api-version</code> <code>3.1.1</code> Payments API v3.1.1 <code>ob-spec</code> <code>uk</code> Payments API v3.1.1 <code>ob-api-type</code> <code>payment</code> Payments API v3.1.1 <code>ob-api-version</code> <code>3.1.1</code> Funds Confirmation API v3.1.1 <code>ob-spec</code> <code>uk</code> Funds Confirmation API v3.1.1 <code>ob-api-type</code> <code>cof</code> Funds Confirmation API v3.1.1 <code>ob-api-version</code> <code>3.1.1</code> Event Notifications API v3.1.0 <code>ob-spec</code> <code>uk</code> Event Notifications API v3.1.0 <code>ob-api-type</code> <code>event</code> Event Notifications API v3.1.0 <code>ob-api-version</code> <code>3.1.0</code> Dynamic Client Registration API v3.2 <code>ob-spec</code> <code>uk</code> Dynamic Client Registration API v3.2 <code>ob-api-type</code> <code>dcr</code> Dynamic Client Registration API v3.2 <code>ob-api-version</code> <code>3.2</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/ReadMe/","title":"ReadME","text":""},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/ReadMe/#home-page-target-version-200","title":"Home Page Target Version 2.0.0","text":""},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/","title":"Map XML Configurations to TOML Configurations","text":"<p>WSO2 Open Banking 2.0.0 introduces a new simplified and centralized TOML-based configuration model instead of the several XML file module used in previous versions. This document explains how to map your XML configurations in Open Banking 1.5.0 to the latest TOML configurations.</p> <p>The following components/modules now contain a <code>deployment.toml</code> in each. Unlike the previous versions, now we have to configure that single toml file to configure each component. Given below are the most common XML configurations in each component and the corresponding TOML configurations.</p> <ul> <li>Key Manager</li> <li>API Manager</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#key-manager","title":"Key Manager","text":"<p>WSO2 Open Banking 2.0.0 refers to the Key Manager as the Identity and Access Management module. From this point onwards, let's refer to this root directory of this module as <code>WSO2_OB_IAM_HOME</code>.</p> <p>This section explains the corresponding TOML configurations in the following files:</p> <ul> <li><code>master-datasources.xml</code></li> <li><code>open-banking-datasources.xml</code></li> <li><code>carbon.xml</code></li> <li><code>application-authentication.xml</code></li> <li><code>identity.xml</code></li> <li><code>open-banking.xml</code></li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#master-datasourcesxml","title":"master-datasources.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/datasources/master-datasources.xml          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Given below is a sample configuration for a datasource, refer to the XML/TOML files to see how to configure all the relevant datasources.     <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_SHARED_DB&lt;/name&gt;\n    &lt;description&gt;Shared Database for user and registry data&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/SHARED_DB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;jdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_govdb?autoReconnect=true&amp;useSSL=false&lt;/url&gt;\n            &lt;username&gt;root&lt;/username&gt;\n            &lt;password&gt;root&lt;/password&gt;\n            &lt;driverClassName&gt;com.mysql.jdbc.Driver&lt;/driverClassName&gt;\n            &lt;validationQuery&gt;&lt;/validationQuery&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n            &lt;minIdle&gt;5&lt;/minIdle&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;defaultAutoCommit&gt;false&lt;/defaultAutoCommit&gt;\n            &lt;validationQuery&gt;SELECT 1&lt;/validationQuery&gt;\n            &lt;validationInterval&gt;30000&lt;/validationInterval&gt;\n            &lt;maxActive&gt;150&lt;/maxActive&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre> <pre><code># for registry data\n[database.shared_db]\nurl = \"jdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_govdbautoReconnect=true&amp;useSSL=false\"\nusername = \"root\"\npassword = \"root\"\ndriver = \"com.mysql.jdbc.Driver\"\n\n[database.shared_db.pool_options]\nmaxActive = \"150\"\nmaxWait = \"60000\"\nminIdle =\"5\"\ntestOnBorrow = true\nvalidationQuery=\"SELECT 1\"\n#Use below for oracle\n#validationQuery=\"SELECT 1 FROM DUAL\"\nvalidationInterval=\"30000\"\ndefaultAutoCommit=false\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#open-banking-datasourcesxml","title":"open-banking-datasources.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/datasources/open-banking-datasources.xml          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration     <pre><code>&lt;datasources&gt;\n    &lt;datasource&gt;\n        &lt;name&gt;WSO2_OPEN_BANKING_DB&lt;/name&gt;\n        &lt;description&gt;The datasource used for open-banking data&lt;/description&gt;\n        &lt;jndiConfig&gt;\n            &lt;name&gt;jdbc/WSO2OpenBankingDB&lt;/name&gt;\n        &lt;/jndiConfig&gt;\n        &lt;definition type=\"RDBMS\"&gt;\n            &lt;configuration&gt;\n                &lt;url&gt;jdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_openbankingdb?autoReconnect=true&amp;useSSL=false&lt;/url&gt;\n                &lt;username&gt;root&lt;/username&gt;\n                &lt;password&gt;root&lt;/password&gt;\n                &lt;driverClassName&gt;com.mysql.jdbc.Driver&lt;/driverClassName&gt;\n                &lt;maxActive&gt;150&lt;/maxActive&gt;\n                &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n                &lt;defaultAutoCommit&gt;false&lt;/defaultAutoCommit&gt;\n                &lt;validationQuery&gt;SELECT 1&lt;/validationQuery&gt;\n                &lt;maxWait&gt;60000&lt;/maxWait&gt;\n                &lt;validationInterval&gt;30000&lt;/validationInterval&gt;\n                &lt;minIdle&gt;5&lt;/minIdle&gt;\n            &lt;/configuration&gt;\n        &lt;/definition&gt;\n    &lt;/datasource&gt;\n&lt;/datasources&gt;undefined&lt;/datasources-configuration&gt;\n</code></pre> <pre><code>[open_banking_database]\nconfig.url = \"jdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_openbankingdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n\n[open_banking_database.config.pool_options]\nmaxActive = \"150\"\nmaxWait = \"60000\"\nminIdle =\"5\"\ntestOnBorrow = true\nvalidationQuery=\"SELECT 1\"\n#Use below for oracle\n#validationQuery=\"SELECT 1 FROM DUAL\"\nvalidationInterval=\"30000\"\ndefaultAutoCommit=false\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#carbonxml","title":"carbon.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/carbon.xml          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Update the configurations with the hostname of your Open Banking Key Manager server/Identity and Access Management module.     <pre><code>&lt;HostName&gt;&lt;WSO2_OB_IAM_HOST&gt;&lt;/HostName&gt;\n&lt;MgtHostName&gt;&lt;WSO2_OB_IAM_HOST&gt;&lt;/MgtHostName&gt;\n</code></pre> <pre><code>[server]\nhostname = \"&lt;WSO2_OB_IAM_HOST&gt;\"\nnode_ip = \"127.0.0.1\"\nbase_path = \"https://$ref{server.hostname}:${carbon.management.port}\"\nserverDetails = \"WSO2 IS as KM 5.10.0\"\nmode = \"single\"\nuserAgent = \"WSO2 IS as KM 5.10.0\"\noffset = 3\n</code></pre>      Update the configurations according to your Keystore.     <pre><code>&lt;KeyStore&gt;\n    &lt;!-- Keystore file location--&gt;\n    &lt;Location&gt;\n${carbon.home}/repository/resources/security/wso2carbon.jks\n&lt;/Location&gt;\n    &lt;!-- Keystore type (JKS/PKCS12 etc.)--&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;!-- Keystore password--&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n    &lt;!-- Private Key alias--&gt;\n    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n    &lt;!-- Private Key password--&gt;\n    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n</code></pre> <pre><code>[keystore.primary]\nname = \"wso2carbon.jks\"\npassword = \"wso2carbon\"\ntype = \"JKS\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#application-authenticationxml","title":"application-authentication.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/datasources/open-banking-datasources.xml          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Update the following with the URLs of the authentication web application, as shown below:     <pre><code>&lt;AuthenticationEndpointURL&gt;\n    https://&lt;WSO2_OB_IAM_HOST&gt;:9446/authenticationendpoint/login.do\n&lt;/AuthenticationEndpointURL&gt;\n\n&lt;AuthenticationEndpointRetryURL&gt;\n    https://&lt;WSO2_OB_IAM_HOST&gt;:9446/authenticationendpoint/retry.do\n&lt;/AuthenticationEndpointRetryURL&gt;\n</code></pre> <pre><code>[authentication.endpoints]\nlogin_url = \"https://&lt;WSO2_OB_IAM_HOST&gt;:9446/authenticationendpoint/login.do\"\nretry_url = \"https://&lt;WSO2_OB_IAM_HOST&gt;:9446/authenticationendpoint/retry.do\"\n</code></pre>      In the authentication web application, when the action is set to include, the defined parameters will be sent to the  `AuthenticationEndpoint`  as query parameters.     **Note**     If you're using a customized authentication web app, you can access the hidden parameters using the  sessionDataKeyConsent  parameter. For more information, see  Authentication Data API.     <pre><code>&lt;AuthenticationEndpointRedirectParams action=\"include\" removeOnConsumeFromAPI=\"true\"&gt;\n        &lt;AuthenticationEndpointRedirectParam name=\"sessionDataKeyConsent\"/&gt;\n        &lt;AuthenticationEndpointRedirectParam name=\"relyingParty\"/&gt;\n        &lt;AuthenticationEndpointRedirectParam name=\"authenticators\"/&gt;\n        &lt;AuthenticationEndpointRedirectParam name=\"authFailureMsg\"/&gt;\n        &lt;AuthenticationEndpointRedirectParam name=\"authFailure\"/&gt;\n&lt;/AuthenticationEndpointRedirectParams&gt;\n</code></pre> <pre><code>[authentication.endpoint.redirect_params]\nfilter_policy = \"include\"\nremove_on_consume_from_api = \"true\"\nparameters = [\"sessionDataKeyConsent\",\"relyingParty\", \"authenticators\", \"authFailureMsg\", \"authFailure\"]\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#identityxml","title":"identity.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/identity/identity.xml          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Update the following configurations with the hostname of the Open Banking API Manager Gateway.     <pre><code>&lt;OAuth2AuthzEPUrl&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/authorize\n&lt;/OAuth2AuthzEPUrl&gt;    \n&lt;OAuth2TokenEPUrl&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/token\n&lt;/OAuth2TokenEPUrl&gt;\n&lt;OAuth2UserInfoEPUrl&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/userinfo\n&lt;/OAuth2UserInfoEPUrl&gt;\n\n&lt;OAuth2DCREPUrl&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/register\n&lt;/OAuth2DCREPUrl&gt;\n</code></pre> <pre><code>[oauth.endpoints]\noauth2_authz_url = \"${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/authorize\"\noauth2_token_url = \"${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/token\"\noauth2_user_info_url = \"${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/userinfo\"\noauth2_consent_page = \"${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:${carbon.management.port}/ob/authenticationendpoint/oauth2_authz.do\"\noidc_consent_page = \"${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:${carbon.management.port}/ob/authenticationendpoint/oauth2_consent.do\"\noauth2_dcr_url = \"${carbon.protocol}://&lt;WSO2_OB_APIM_HOST&gt;:8243/register\"\n</code></pre> <pre><code>&lt;IDTokenIssuerID&gt;https://&lt;WSO2_OB_APIM_HOST&gt;:8243/token&lt;/IDTokenIssuerID&gt;\n</code></pre> <pre><code>[oauth.oidc]\nid_token.issuer = \"https://&lt;WSO2_OB_APIM_HOST&gt;:8243/token\"\n</code></pre>      Update the following configurations with the hostname of your Open Banking Key Manager server (referred as the Identity and Access Management module now).     <pre><code>&lt;OAuth2ConsentPage&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/ob/authenticationendpoint/oauth2_authz.do\n&lt;/OAuth2ConsentPage&gt;\n&lt;OAuth2ErrorPage&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/authenticationendpoint/oauth2_error.do\n&lt;/OAuth2ErrorPage&gt;\n&lt;OIDCConsentPage&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/ob/authenticationendpoint/oauth2_consent.do\n&lt;/OIDCConsentPage&gt;\n&lt;OIDCLogoutConsentPage&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/authenticationendpoint/oauth2_logout_consent.do\n&lt;/OIDCLogoutConsentPage&gt;\n&lt;OIDCLogoutPage&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/authenticationendpoint/oauth2_logout.do\n&lt;/OIDCLogoutPage&gt;\n&lt;OIDCWebFingerEPUrl&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/.well-known/webfinger\n&lt;/OIDCWebFingerEPUrl&gt;\n\n&lt;OIDCDiscoveryEPUrl&gt;\n    ${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/oauth2/oidcdiscovery\n&lt;/OIDCDiscoveryEPUrl&gt;\n</code></pre> <pre><code>oauth2_consent_page = \"${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/ob/authenticationendpoint/oauth2_authz.do\"\noauth2_error_page = \"https://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/authenticationendpoint/oauth2_error.do\"\noidc_consent_page = \"${carbon.protocol}://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/ob/authenticationendpoint/oauth2_consent.do\"\noauth.endpoints.oauth2_error_page = \"https://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/authenticationendpoint/oauth2_error.do\"\noidc_logout_consent_page = \"https://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/authenticationendpoint/oauth2_logout_consent.do\"\noidc_web_finger_url = \"https://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/.well-known/webfinger\"\noidc_discovery_url = \"https://&lt;WSO2_OB_IAM_HOST&gt;:${carbon.management.port}/oauth2/oidcdiscovery\"\n</code></pre>      Configure the ReceiverURL of the  &lt;EventPublisher&gt;  under  &lt;AdaptiveAuth&gt;  with the hostname of the Open Banking Business Intelligence Server. By default, the relevant Siddhi Apps are configured to listen to port 8006.     <pre><code>&lt;ReceiverURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8006/&lt;/ReceiverURL&gt;\n</code></pre> <pre><code>[authentication.adaptive.event_publisher]\nurl = \"http://&lt;WSO2_OB_BI_HOST&gt;:8006/\"\n</code></pre>      The ID Token Builder and the algorithm that signs the ID Token Builder are configurable.     By default,  `` is set to  `com.wso2.finance.open.banking.idtoken.builder.OBIDTokenBuilder`. For example, to sign the `` with the `SHA256withRSA` algorithm the configurations are as follows:     <pre><code>&lt;IDTokenBuilder&gt;com.wso2.finance.open.banking.idtoken.builder.OBIDTokenBuilder&lt;/IDTokenBuilder&gt;\n&lt;SignatureAlgorithm&gt;SHA256withRSA&lt;/SignatureAlgorithm&gt;\n</code></pre> <pre><code>[oauth.oidc]\nextensions.id_token_builder = \"com.wso2.finance.open.banking.idtoken.builder.OBIDTokenBuilder\"\nid_token.signature_algorithm\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#open-bankingxml","title":"open-banking.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/finance/open-banking.xml          &lt;WSO2_OB_IAM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Define the specification that you plan to deploy.     Possible values: UK, BERLIN, AU     <pre><code>&lt;DeployedSpecification&gt;UK&lt;/DeployedSpecification&gt;\n</code></pre> <pre><code>[open_banking]\ndeployed_spec = \"UK\"\n</code></pre>      Configuring bank backend: <ul> <li>&lt;SharableAccountsRetrieveEndpoint&gt;: Configures the endpoint to retrieve sharable accounts that are listed on the consent page.  <li>&lt;PayableAccountsRetrieveEndpoint&gt;: Configures the endpoint to retrieve accounts that the user can make payments with, which are listed on the consent page.     <pre><code>&lt;PayableAccountsRetrieveEndpoint&gt;\n    http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/payable-accounts\n&lt;/PayableAccountsRetrieveEndpoint&gt;\n&lt;SharableAccountsRetrieveEndpoint&gt;\n    http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/sharable-accounts\n&lt;/SharableAccountsRetrieveEndpoint&gt;\n</code></pre> </li> <pre><code>[open_banking]\npayable_accounts_retrieve_endpoint = \"http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/payable-accounts\"\nsharable_accounts_retrieve_endpoint = \"http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/sharable-accounts\"\n</code></pre>      To enable the Event Notification feature (for Open Banking UK):     <pre><code>&lt;EventNotifications&gt;\n    &lt;IsEnabled&gt;true&lt;/IsEnabled&gt;\n    &lt;TokenIssuer&gt;www.openbank.com&lt;/TokenIssuer&gt;\n    &lt;NotificationAPIUrl&gt;\n        https://localhost:8243/open-banking/v3.1/event-notification\n    &lt;/NotificationAPIUrl&gt;\n&lt;/EventNotifications&gt;\n</code></pre> <pre><code>[open_banking.event_notifications]\nenable = true\ntoken_issuer = \"www.openbank.com\"\napi_url = \"https://localhost:8243/open-banking/v3.1/event-notification\"\n</code></pre>      To enable Request-URI validation during the account retrieval process; validate the account ID against the account ID in the consent (for Open Banking UK and Open Banking Australia)     <pre><code>&lt;ValidateAccountIdOnRetrieval&gt;true&lt;/ValidateAccountIdOnRetrieval&gt;\n</code></pre> <pre><code>[open_banking.account_id_validation_on_retrieval]\nenable = true\n</code></pre>      For Open Banking UK - The unique ID of the bank to which the request is issued. The unique ID is issued by OBIE and corresponds to the Organization ID of the ASPSP in the Open Banking Directory. If the value does not match the expected value (based on the Client ID or network certificate of the caller), the bank must reject the request with a 403 (Forbidden) status code.     <pre><code>&lt;XFAPIFinancialId&gt;open-bank&lt;/XFAPIFinancialId&gt;\n</code></pre> <pre><code>[open_banking.uk]\nx_fapi_financial_id = \"open-bank\"\n</code></pre>      For the Data Reporting feature, to enable data publishing set the  &lt;Enabled&gt;  property value to true. So, the WSO2 Open Banking Business Intelligence can capture and summarize data. Replace the  &lt;WSO2_OB_BI_HOSTNAME&gt;  placeholder with the hostname of Open Banking Business Intelligence server.     <pre><code>&lt;DataPublishing&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;ServerURL&gt;{tcp://&lt;WSO2_OB_BI_HOST&gt;:7612}&lt;/ServerURL&gt;\n&lt;/DataPublishing&gt;\n</code></pre> <pre><code>[open_banking.bi_server.data_publishing]\nenable = true\nserver_url = \"{tcp://&lt;WSO2_OB_BI_HOST&gt;:7612}\"\n</code></pre>      To enable Transaction Risk Analysis: <ul> <li>Set the &lt;IsEnabled&gt; property under &lt;TRA&gt; to true.  <li>Replace the &lt;WSO2_OB_BI_HOST&gt; place holder with the hostname of Open Banking Business Intelligence server.  <li>Use the &lt;AccountValidationEnabled&gt; and &lt;PaymentValidationEnabled&gt; properties to enable TRA for Accounts and Payments respectively.     <pre><code>&lt;TRA&gt;\n    &lt;IsEnabled&gt;true&lt;/IsEnabled&gt;\n    &lt;PaymentValidationEnabled&gt;true&lt;/PaymentValidationEnabled&gt;\n    &lt;AccountValidationEnabled&gt;true&lt;/AccountValidationEnabled&gt;\n    &lt;Receivers&gt;\n        &lt;TRAAccountValidationURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAAccountValidationApp/TRAValidationStream&lt;/TRAAccountValidationURL&gt;\n        &lt;TRAPaymentValidationURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAPaymentValidationApp/TRAValidationStream&lt;/TRAPaymentValidationURL&gt;\n    &lt;/Receivers&gt;\n&lt;/TRA&gt;\n</code></pre> </li> <pre><code>[open_banking.bi_server.tra]\nenable = true\npayment_validation.enable = true\naccount_validation.enable = true\n\n[open_banking.bi_server.tra.receivers]\naccount_validation_url = \"http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAAccountValidationApp/TRAValidationStream\"\npayment_validation_url = \"http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAPaymentValidationApp/TRAValidationStream\"\n</code></pre>      You can enable the Fraud Detection feature by setting the &lt;IsEnabled&gt; value to true. Replace the &lt;WSO2_OB_BI_HOST&gt; placeholder with the hostname of WSO2 Open Banking Business Intelligence server.     <pre><code>&lt;FraudDetection&gt;\n    &lt;IsEnabled&gt;false&lt;/IsEnabled&gt;\n    &lt;Receivers&gt;\n        &lt;FraudDetectionURL&gt;\n            http://&lt;WSO2_OB_BI_HOST&gt;:8007/FraudDetectionApp/FraudDetectionStream\n        &lt;/FraudDetectionURL&gt;\n        &lt;InvalidSubmissionURL&gt;\n            http://&lt;WSO2_OB_BI_HOST&gt;:8006/InvalidSubmissionsApp/InvalidSubmissionsStream\n        &lt;/InvalidSubmissionURL&gt;\n    &lt;/Receivers&gt;\n&lt;/FraudDetection&gt;\n</code></pre> <pre><code>[open_banking.bi_server.fraud_detection]\nenable = false\n\n[open_banking.bi_server.fraud_detection.receivers]\nfraud_detection_url = \"http://localhost:8007/FraudDetectionApp/FraudDetectionStream\"\ninvalid_submission_url = \"http://localhost:8006/InvalidSubmissionsApp/InvalidSubmissionsStream\"\n</code></pre>      To enable MTLS token binding:     <pre><code>&lt;EnableMTLSTokenBinding&gt;true&lt;/EnableMTLSTokenBinding&gt;\n</code></pre>     Now configure the client certificate header as follows:      <pre><code>&lt;ClientAuthenticationHeader&gt;x-wso2-mutual-auth-cert&lt;/ClientAuthenticationHeader&gt;\n</code></pre> <pre><code>[open_banking.api_security]\nmtls_token_binding.enable = true\n</code></pre> <pre><code>[open_banking.cert_mgt]\nclient_auth_header = \"x-wso2-mutual-auth-cert\"\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#api-manager","title":"API Manager","text":"<p>From this point onwards, the root directory of the API Management module is known as <code>WSO2_OB_APIM_HOME</code>.</p> <p>This section explains the corresponding TOML configurations in the following files:</p> <ul> <li><code>master-datasources.xml</code></li> <li><code>open-banking-datasources.xml</code></li> <li><code>carbon.xml</code></li> <li><code>api-manager.xml</code></li> <li><code>synapse-handlers.xml</code></li> <li><code>open-banking.xml</code></li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#master-datasourcesxml_1","title":"master-datasources.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/datasources/master-datasources.xml          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Given below is a sample configuration for a datasource, refer to the XML/TOML files to see how to configure all the relevant datasources.     <pre><code>&lt;datasource&gt;\n    &lt;name&gt;WSO2_SHARED_DB&lt;/name&gt;\n    &lt;description&gt;Shared Database for user and registry data&lt;/description&gt;\n    &lt;jndiConfig&gt;\n        &lt;name&gt;jdbc/SHARED_DB&lt;/name&gt;\n    &lt;/jndiConfig&gt;\n    &lt;definition type=\"RDBMS\"&gt;\n        &lt;configuration&gt;\n            &lt;url&gt;\njdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_govdb?autoReconnect=true&amp;useSSL=false\n&lt;/url&gt;\n            &lt;username&gt;root&lt;/username&gt;\n            &lt;password&gt;root&lt;/password&gt;\n            &lt;driverClassName&gt;com.mysql.jdbc.Driver&lt;/driverClassName&gt;\n            &lt;validationQuery/&gt;\n            &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n            &lt;minIdle&gt;5&lt;/minIdle&gt;\n            &lt;maxWait&gt;60000&lt;/maxWait&gt;\n            &lt;defaultAutoCommit&gt;false&lt;/defaultAutoCommit&gt;\n            &lt;validationQuery&gt;SELECT 1&lt;/validationQuery&gt;\n            &lt;validationInterval&gt;30000&lt;/validationInterval&gt;\n            &lt;maxActive&gt;150&lt;/maxActive&gt;\n        &lt;/configuration&gt;\n    &lt;/definition&gt;\n&lt;/datasource&gt;\n</code></pre> <pre><code># for registry data\n[database.shared_db]\nurl = \"jdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_govdb?autoReconnect=true&amp;useSSL=false\"\nusername = \"root\"\npassword = \"root\"\ndriver = \"com.mysql.jdbc.Driver\"\n\n[database.shared_db.pool_options]\nmaxActive = \"150\"\nmaxWait = \"60000\"\nminIdle =\"5\"\ntestOnBorrow = true\nvalidationQuery=\"SELECT 1\"\n#Use below for oracle\n#validationQuery=\"SELECT 1 FROM DUAL\"\nvalidationInterval=\"30000\"\ndefaultAutoCommit=false\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#open-banking-datasourcesxml_1","title":"open-banking-datasources.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/api-manager.xml          &lt;WSO2_OB_APM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration     <pre><code>&lt;datasources&gt;\n    &lt;datasource&gt;\n        &lt;name&gt;WSO2_OPEN_BANKING_DB&lt;/name&gt;\n        &lt;description&gt;The datasource used for open-banking data&lt;/description&gt;\n        &lt;jndiConfig&gt;\n            &lt;name&gt;jdbc/WSO2OpenBankingDB&lt;/name&gt;\n        &lt;/jndiConfig&gt;\n        &lt;definition type=\"RDBMS\"&gt;\n            &lt;configuration&gt;\n                &lt;url&gt;jdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_openbankingdb?autoReconnect=true&amp;useSSL=false&lt;/url&gt;\n                &lt;username&gt;root&lt;/username&gt;\n                &lt;password&gt;root&lt;/password&gt;\n                &lt;driverClassName&gt;com.mysql.jdbc.Driver&lt;/driverClassName&gt;\n                &lt;maxActive&gt;150&lt;/maxActive&gt;\n                &lt;testOnBorrow&gt;true&lt;/testOnBorrow&gt;\n                &lt;defaultAutoCommit&gt;false&lt;/defaultAutoCommit&gt;\n                &lt;validationQuery&gt;SELECT 1&lt;/validationQuery&gt;\n                &lt;maxWait&gt;60000&lt;/maxWait&gt;\n                &lt;validationInterval&gt;30000&lt;/validationInterval&gt;\n                &lt;minIdle&gt;5&lt;/minIdle&gt;\n            &lt;/configuration&gt;\n        &lt;/definition&gt;\n    &lt;/datasource&gt;\n&lt;/datasources&gt;undefined&lt;/datasources-configuration&gt;\n</code></pre> <pre><code>[open_banking_database]\nconfig.url = \"jdbc:mysql://&lt;DATABASE_HOST&gt;:3306/openbank_openbankingdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n\n[open_banking_database.config.pool_options]\nmaxActive = \"150\"\nmaxWait = \"60000\"\nminIdle =\"5\"\ntestOnBorrow = true\nvalidationQuery=\"SELECT 1\"\n#Use below for oracle\n#validationQuery=\"SELECT 1 FROM DUAL\"\nvalidationInterval=\"30000\"\ndefaultAutoCommit=false\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#carbonxml_1","title":"carbon.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/carbon.xml          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Update the configurations with the hostname of your Open Banking Key Manager server/Identity and Access Management module.     <pre><code>&lt;HostName&gt;&lt;WSO2_OB_APIM_HOST&gt;&lt;/HostName&gt;\n&lt;MgtHostName&gt;&lt;WSO2_OB_APIM_HOST&gt;&lt;/MgtHostName&gt;\n</code></pre> <pre><code>[server]\nhostname = \"&lt;WSO2_OB_APIM_HOST&gt;\"\n</code></pre>      Update the configurations according to your Keystore.     <pre><code>&lt;KeyStore&gt;\n    &lt;!-- Keystore file location--&gt;\n    &lt;Location&gt;\n${carbon.home}/repository/resources/security/wso2carbon.jks\n&lt;/Location&gt;\n    &lt;!-- Keystore type (JKS/PKCS12 etc.)--&gt;\n    &lt;Type&gt;JKS&lt;/Type&gt;\n    &lt;!-- Keystore password--&gt;\n    &lt;Password&gt;wso2carbon&lt;/Password&gt;\n    &lt;!-- Private Key alias--&gt;\n    &lt;KeyAlias&gt;wso2carbon&lt;/KeyAlias&gt;\n    &lt;!-- Private Key password--&gt;\n    &lt;KeyPassword&gt;wso2carbon&lt;/KeyPassword&gt;\n&lt;/KeyStore&gt;\n</code></pre> <pre><code>[keystore.primary]\nname = \"wso2carbon.jks\"\npassword = \"wso2carbon\"\ntype = \"JKS\"\nalias = \"wso2carbon\"\nkey_password = \"wso2carbon\"\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#api-managerxml","title":"api-manager.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/api-manager.xml          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration          Update the following configurations according to the given placeholder.     <pre><code>&lt;AuthManager&gt;\n    &lt;!-- Server URL of the Authentication service --&gt;\n    &lt;ServerURL&gt;\n        https://&lt;WSO2_OB_IAM_HOST&gt;:${mgt.transport.https.port}${carbon.context}services/\n    &lt;/ServerURL&gt;\n</code></pre> <pre><code>[apim.key_manager]\nservice_url = \"https://&lt;WSO2_OB_IAM_HOST&gt;:9446${carbon.context}services/\"\n</code></pre> <pre><code>&lt;GatewayEndpoint&gt;\n    http://&lt;WSO2_OB_APIM_HOST&gt;:${http.nio.port},https://&lt;WSO2_OB_APIM_HOST&gt;:${https.nio.port}\n&lt;/GatewayEndpoint&gt;\n</code></pre> <pre><code>http_endpoint = \"http://&lt;WSO2_OB_APIM_HOST&gt;:${http.nio.port}\"\n</code></pre>      To configure Analytics for the API Management module:     <pre><code>&lt;Analytics&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;StreamProcessorServerURL&gt;{tcp://localhost:7612}&lt;/StreamProcessorServerURL&gt;\n</code></pre> <pre><code>[apim.analytics]\nenable = true\nreceiver_urls = \"{tcp://&lt;WSO2_OB_BI_HOST&gt;:7612}\"\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#synapse-handlersxml","title":"synapse-handlers.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/synapse-handlers.xml          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration     <pre><code>&lt;handler name = \"UkJwsResponseSignatureHandler\" class=\"com.wso2.finance.open.banking.gateway.jws.UkJwsResponseSignatureHandler\"&gt;&lt;/handler&gt;\n</code></pre>      Following configuration must be added to the top of the &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/deployment.toml file:     <pre><code>enabled_global_handlers= [\"jws\", \"externalCallLogger\", \"open_tracing\"]\n[synapse_handlers.jws]\nname= \"jws\"\nclass= \"com.wso2.finance.open.banking.gateway.jws.UkJwsResponseSignatureHandler\"\n\n[synapse_handlers.externalCallLogger]\nname= \"externalCallLogger\"\nclass= \"org.wso2.carbon.apimgt.gateway.handlers.LogsHandler\"\n\n[synapse_handlers.open_tracing]\nname= \"open_tracing\"\nclass= \"org.wso2.carbon.apimgt.gateway.handlers.common.APIMgtLatencySynapseHandler\"\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/map-xml-to-toml/#open-bankingxml_1","title":"open-banking.xml","text":"Location of the XML file          Location of the TOML file          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/finance/open-banking.xml          &lt;WSO2_OB_APIM_HOME&gt;/repository/conf/deployment.toml          XML configuration          TOML configuration         Define the specification that you plan to deploy.     Possible values:   UK, BERLIN, AU     <pre><code>&lt;DeployedSpecification&gt;UK&lt;/DeployedSpecification&gt;\n</code></pre> <pre><code>[open_banking]\ndeployed_spec = \"UK\"\n</code></pre>      Configuring bank backend: <ul> <li>&lt;SharableAccountsRetrieveEndpoint&gt;: Configures the endpoint to retrieve sharable accounts that are listed on the consent page.  <li>&lt;PayableAccountsRetrieveEndpoint&gt;: Configures the endpoint to retrieve accounts that the user can make payments with, which are listed on the consent page.     <pre><code>&lt;PayableAccountsRetrieveEndpoint&gt;\n    http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/payable-accounts\n&lt;/PayableAccountsRetrieveEndpoint&gt;\n&lt;SharableAccountsRetrieveEndpoint&gt;\n    http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/sharable-accounts\n&lt;/SharableAccountsRetrieveEndpoint&gt;\n</code></pre> </li> <pre><code>[open_banking]\npayable_accounts_retrieve_endpoint = \"http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/payable-accounts\"\nsharable_accounts_retrieve_endpoint = \"http://localhost:9763/api/openbanking/backend-uk/services/bankaccounts/bankaccountservice/sharable-accounts\"\n</code></pre>      To enable the Event Notification feature (for Open Banking UK):     <pre><code>&lt;EventNotifications&gt;\n    &lt;IsEnabled&gt;true&lt;/IsEnabled&gt;\n    &lt;TokenIssuer&gt;www.openbank.com&lt;/TokenIssuer&gt;\n    &lt;NotificationAPIUrl&gt;\n        https://localhost:8243/open-banking/v3.1/event-notification\n    &lt;/NotificationAPIUrl&gt;\n&lt;/EventNotifications&gt;\n</code></pre> <pre><code>[open_banking.event_notifications]\nenable = true\ntoken_issuer = \"www.openbank.com\"\napi_url = \"https://localhost:8243/open-banking/v3.1/event-notification\"\n</code></pre>      To enable Request-URI validation during the account retrieval process; validate the account ID against the account ID in the consent (for Open Banking UK and Open Banking Australia)     <pre><code>&lt;ValidateAccountIdOnRetrieval&gt;true&lt;/ValidateAccountIdOnRetrieval&gt;\n</code></pre> <pre><code>[open_banking.account_id_validation_on_retrieval]\nenable = true\n</code></pre>      For Open Banking UK - The unique ID of the bank to which the request is issued. The unique ID is issued by OBIE and corresponds to the Organization ID of the ASPSP in the Open Banking Directory. If the value does not match the expected value (based on the Client ID or network certificate of the caller), the bank must reject the request with a 403 (Forbidden) status code.     <pre><code>&lt;XFAPIFinancialId&gt;open-bank&lt;/XFAPIFinancialId&gt;\n</code></pre> <pre><code>[open_banking.uk]\nx_fapi_financial_id = \"open-bank\"\n</code></pre>      For the Data Reporting feature, to enable data publishing set the  &lt;Enabled&gt;  property value to true. So, the WSO2 Open Banking Business Intelligence can capture and summarize data. Replace the  &lt;WSO2_OB_BI_HOSTNAME&gt;  placeholder with the hostname of Open Banking Business Intelligence server.     <pre><code>&lt;DataPublishing&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;ServerURL&gt;{tcp://&lt;WSO2_OB_BI_HOST&gt;:7612}&lt;/ServerURL&gt;\n&lt;/DataPublishing&gt;\n</code></pre> <pre><code>[open_banking.bi_server.data_publishing]\nenable = true\nserver_url = \"{tcp://&lt;WSO2_OB_BI_HOST&gt;:7612}\"\n</code></pre>      To enable Transaction Risk Analysis:  <ul> <li>Set the &lt;IsEnabled&gt; property under &lt;TRA&gt; to true.  <li>Replace the &lt;WSO2_OB_BI_HOST&gt; place holder with the hostname of Open Banking Business Intelligence server.  <li>Use the &lt;AccountValidationEnabled&gt; and &lt;PaymentValidationEnabled&gt; properties to enable TRA for Accounts and Payments respectively.     <pre><code>&lt;TRA&gt;\n    &lt;IsEnabled&gt;true&lt;/IsEnabled&gt;\n    &lt;PaymentValidationEnabled&gt;true&lt;/PaymentValidationEnabled&gt;\n    &lt;AccountValidationEnabled&gt;true&lt;/AccountValidationEnabled&gt;\n    &lt;Receivers&gt;\n        &lt;TRAAccountValidationURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAAccountValidationApp/TRAValidationStream&lt;/TRAAccountValidationURL&gt;\n        &lt;TRAPaymentValidationURL&gt;http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAPaymentValidationApp/TRAValidationStream&lt;/TRAPaymentValidationURL&gt;\n    &lt;/Receivers&gt;\n&lt;/TRA&gt;\n</code></pre> </li> <pre><code>[open_banking.bi_server.tra]\nenable = true\npayment_validation.enable = true\naccount_validation.enable = true\n\n[open_banking.bi_server.tra.receivers]\naccount_validation_url = \"http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAAccountValidationApp/TRAValidationStream\"\npayment_validation_url = \"http://&lt;WSO2_OB_BI_HOST&gt;:8007/TRAPaymentValidationApp/TRAValidationStream\"\n</code></pre>      You can enable the Fraud Detection feature by setting the &lt;IsEnabled&gt; value to true. Replace the &lt;WSO2_OB_BI_HOST&gt; placeholder with the hostname of WSO2 Open Banking Business Intelligence server.     <pre><code>&lt;FraudDetection&gt;\n    &lt;IsEnabled&gt;false&lt;/IsEnabled&gt;\n    &lt;Receivers&gt;\n        &lt;FraudDetectionURL&gt;\n            http://&lt;WSO2_OB_BI_HOST&gt;:8007/FraudDetectionApp/FraudDetectionStream\n        &lt;/FraudDetectionURL&gt;\n        &lt;InvalidSubmissionURL&gt;\n            http://&lt;WSO2_OB_BI_HOST&gt;:8006/InvalidSubmissionsApp/InvalidSubmissionsStream\n        &lt;/InvalidSubmissionURL&gt;\n    &lt;/Receivers&gt;\n&lt;/FraudDetection&gt;\n</code></pre> <pre><code>[open_banking.bi_server.fraud_detection]\nenable = false\n\n[open_banking.bi_server.fraud_detection.receivers]\nfraud_detection_url = \"http://localhost:8007/FraudDetectionApp/FraudDetectionStream\"\ninvalid_submission_url = \"http://localhost:8006/InvalidSubmissionsApp/InvalidSubmissionsStream\"\n</code></pre>      To enable MTLS token binding:     <pre><code>&lt;EnableMTLSTokenBinding&gt;true&lt;/EnableMTLSTokenBinding&gt;\n</code></pre>  Now configure the client certificate header as follows:      <pre><code>&lt;ClientAuthenticationHeader&gt;x-wso2-mutual-auth-cert&lt;/ClientAuthenticationHeader&gt;\n</code></pre> <pre><code>[open_banking.api_security]\nmtls_token_binding.enable = true\n</code></pre> <pre><code>[open_banking.cert_mgt]\nclient_auth_header = \"x-wso2-mutual-auth-cert\"\n</code></pre>      By default, the signing configuration is set to false. In order to change the value, configure as follows:     <pre><code>&lt;SigningConfiguration&gt;\n           &lt;!-- Enable Response Signing --&gt;\n           &lt;Enable&gt;true&lt;/Enable&gt;\n           &lt;OBIE&gt;\n               &lt;!--\n                   Trusted Anchor Configuration\n               --&gt;\n               &lt;TrustedAnchors&gt;\n                   &lt;!-- Domain name that is registered to and identifies the Trust Anchor that hosts the public counter-part of the key used for signing the response. Included in the claim http://openbanking.org.uk/tan --&gt;\n                   &lt;Signing&gt;openbanking.org.uk&lt;/Signing&gt;\n                   &lt;!--\n                  Trusted domain names that are registered to and identifies the Trust Anchor that hosts the public counter-part of the key used for request signing by the TPP. The value included in the claim http://openbanking.org.uk/tan of the TPP's JOSE header will be validated against the following list of domain names.\n                       Multiple values supported with `|` delimiter\n                       IE - trustanchor.org|trustanchor.org.uk\n                   --&gt;\n                   &lt;Validation&gt;openbanking.org.uk&lt;/Validation&gt;\n               &lt;/TrustedAnchors&gt;\n               &lt;!-- Organization Id of the ASPSP. This value is used as the http://openbanking.org.uk/iss claim during response signing --&gt;\n               &lt;OrganizationId&gt;ABC1234&lt;/OrganizationId&gt;\n           &lt;/OBIE&gt;\n           &lt;!-- Default Singing Algorithm is PS256, to support others uncomment line below --&gt;\n           &lt;!--&lt;Algorithm&gt;RS256&lt;/Algorithm&gt;--&gt;\n\n           &lt;!-- By default the UK specification mandates the Payment and Even Notification APIs to have request/response message signing. Hence, the following specified APIs will be mandated for message signing. --&gt;\n           &lt;MandatedAPIs&gt;\n               &lt;APIContext&gt;/open-banking/v3.0/event-notification/&lt;/APIContext&gt;\n               &lt;APIContext&gt;/open-banking/v3.0/pisp/&lt;/APIContext&gt;\n               &lt;APIContext&gt;/open-banking/v3.1/event-notification/&lt;/APIContext&gt;\n               &lt;APIContext&gt;/open-banking/v3.1/pisp/&lt;/APIContext&gt;\n           &lt;/MandatedAPIs&gt;\n\n&lt;!-- The following specified APIs will be associated with response signing. --&gt;\n           &lt;ResponseSignatureRequiredAPIs&gt;\n               &lt;APIContext&gt;/open-banking/v3.0/pisp/&lt;/APIContext&gt;\n               &lt;APIContext&gt;/open-banking/v3.1/pisp/&lt;/APIContext&gt;\n           &lt;/ResponseSignatureRequiredAPIs&gt;\n       &lt;/SigningConfiguration&gt;\n</code></pre> <pre><code>[open_banking.uk.signing_config]\n#Enable Response Signing\nenable = true\n\n#Domain name that is registered to and identifies the Trust Anchor that hosts the public counter-part of the key used for signing the response.\n#Included in the claim http://openbanking.org.uk/tan\nobie.trusted_anchors.signing = \"openbanking.org.uk\"\n\n#Trusted domain names that are registered to and identifies the Trust Anchor that hosts the public counter-part of the key used for request signing by the TPP.\n#The value included in the claim http://openbanking.org.uk/tan of the TPP's JOSE header will be validated against the following list of domain names.\n                     ##  Multiple values supported with `|` delimiter\n                     ##  IE - trustanchor.org|trustanchor.org.uk\nobie.trusted_anchors.validation = \"openbanking.org.uk\"\n\n#Organization Id of the ASPSP. This value is used as the http://openbanking.org.uk/iss claim during response signing\nobie.org_id = \"ABC1234\"\n</code></pre> <p>For more information on configuring the <code>deployment.toml</code>, see the following topics:</p> <ul> <li>Configuring WSO2 Open Banking for UK</li> <li>Configuring WSO2 Open Banking for Berlin</li> <li>Configuring WSO2 Open Banking for Australia</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-introduction/","title":"Upgrading WSO2 Open Banking from 1.5.0 to 2.0.0 - Introduction","text":"<p>This section contains the complete upgrading process from WSO2 Open Banking solution 1.5.0 to WSO2 Open Banking 2.0.0.</p> <p>Note</p> <p>WSO2 Open Banking 2.0.0 introduces a new configuration model. This allows configuring WSO2 Open Banking with a simplified, centralized configuration model (toml-based configuration). For information on how to map the xml configurations in your 1.5.0 setup to the toml configurations in 2.0.0, refer to the Mapping XML Configurations to TOML Configurations (<code>map-xml-to-toml.md</code>) documentation.</p> <p>Go through the guidelines given below before attempting to upgrade the production environment. The base products for the WSO2 Open Banking 2.0.0 have changed to WSO2 API Manager 3.1.0 and WSO2 Identity Server 5.10.0 products. Follow the relevant documentation based on your specification and upgrade your setup to the latest version.</p> <ul> <li>Map XML Configurations to TOML Configurations (<code>map-xml-to-toml.md</code>)</li> <li>Upgrade the solution for UK (<code>upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk.md</code>)</li> <li>Upgrade the solution for Berlin (<code>upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin.md</code>)</li> <li>Upgrade the solution for Australia (<code>upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au.md</code>)</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/","title":"Migration resources for WSO2 Open Banking 1.5.0 to 2.0.0 - Upgrade the solution for Australia","text":"<p>This directory contains the migration documentation and resources for WSO2 Open Banking 1.5.0 to 2.0.0 - Australia.</p> <p>The migration resources required for WSO2 Open Banking 1.5 to 2.0 - Australia can be found here.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/","title":"Upgrade WSO2 Open Banking from 1.5.0 to 2.0.0 for Australia","text":"<p>This page explains the following:</p> <ul> <li>Databases and Synapse configurations</li> <li>Disable Registry versioning</li> <li>Migrating Keystores</li> <li>Migrating custom components</li> <li>Upgrading Open Banking Identity and Access Management module (Open Banking Key Manager)</li> <li>Upgrading Open Banking API Manager</li> <li>Upgrading Open Banking Business Intelligence</li> <li>Application Attribute Changes</li> <li>Republish the APIs</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#databases-and-synapse-configurations","title":"Databases and Synapse configurations","text":"<ul> <li> <p>Take a backup of the existing database used by WSO2 Open Banking 1.5.0. This backup is necessary in case the migration causes issues in the existing database.</p> </li> <li> <p>Take a backup of the existing synapse configurations in WSO2 Open Banking 1.5.0. The synapse configuration is available in the <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/deployment/server/synapse-configs</code> directory.</p> </li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#disable-registry-versioning","title":"Disable Registry versioning","text":"<p>When you have enabled versioning for Registry properties and if they are updated frequently, it can lead to an unnecessary growth in the Registry related database tables. To avoid this, WSO2 Open Banking 2.0 disables versioning by default.</p> <p>If you enabled Registry versioning for your WSO2 Open Banking 1.5.0 setup, you need to disable it before upgrading the solution. The required steps are as follows:</p> <ol> <li> <p>Open the <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/conf/registry.xml</code> and <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/conf/registry.xml</code> files.</p> </li> <li> <p>Locate the following properties in both files:</p> </li> </ol> <pre><code>&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n</code></pre> <ol> <li> <p>If the above configurations are true, run the relevant database script. Use the relevant versioning script provided by the WSO2 team.</p> <p>Note</p> <p>If the above versioning configurations are already set as false you should not run the database scripts.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-keystores","title":"Migrating Keystores","text":"<p>Copy the keystores (<code>.jks</code> files) from WSO2 Open Banking 1.5.0 to WSO2 Open Banking 2.0.0.</p> Copy From Copy To <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_BI_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_BI_200_HOME&gt;/repository/resources/security</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-custom-components","title":"Migrating custom components","text":"<p>Changed internal API context paths</p> <p>The context paths of the following internal APIs have changed. If you have used the following for any custom implementation, update them accordingly:</p> Context path in 1.5.0 Context path in 2.0.0 <code>/consent</code> <code>/api/openbanking/consent-mgt</code> <code>/cdsadminapi</code> <code>/api/openbanking/cds-admin-api</code> <code>/openbankingaustralia</code> <code>/api/openbanking/backend-cds</code> <code>/dynamicclientregistration</code> <code>/api/openbanking/dynamic-client-registration</code> <p>Renamed JARs and packages</p> <p>If you have used the following jar files/packages for any custom implementations, update them as follows:</p> Package name in 1.5.0 Package name in 2.0.0 <code>com.wso2.finance.periodical.updater</code> <code>com.wso2.finance.open.banking.periodical.updater</code> <code>com.wso2.finance.status.validater</code> <code>com.wso2.finance.open.banking.status.validater</code> <code>eidas-cert-validator</code> <code>com.wso2.finance.open.banking.eidas.cert.validator</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#wso2-open-banking-identity-and-access-management-module","title":"WSO2 Open Banking Identity and Access Management module","text":"<p>The WSO2 Key Manager is referred to as the WSO2 Open Banking Identity and Access Management module in WSO2 Open Banking 2.0.0. This module is based on WSO2 Identity Server 5.10.0, which includes major upgrades to the main component and WSO2 Carbon Kernel. Any customized OSGi bundle added to Identity Server needs to be recompiled with the new dependency versions relevant to Identity Server 5.10.0.</p> <p>To recompile the custom OSGi bundles:</p> <ol> <li> <p>Obtain the source codes of the custom OSGi component</p> </li> <li> <p>Update the dependency versions in the relevant POM files according to Identity Server 5.10.0</p> </li> <li> <p>Compile the project</p> </li> </ol> <p>Make sure to recompile the following and place them in the WSO2 Open Banking 2.0.0 solution:</p> Content Recompile Copy to Custom OSGI bundles(manually added files) <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins</code> Custom JAR files (manually added files) <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/libs</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/libs</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#wso2-open-banking-api-management-module","title":"WSO2 Open Banking API Management module","text":"<p>You need to copy the custom OSGi bundles and custom JAR files (manually added by you to the solution) as follows:</p> Content Copy from Copy to Custom OSGi bundles (manually added files) <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins</code> Custom JAR files (manually added files) <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/components/lib</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/lib</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#upgrading-open-banking-identity-and-access-management-module-open-banking-key-manager","title":"Upgrading Open Banking Identity and Access Management module (Open Banking Key Manager)","text":"<p>WSO2 Open Banking 2.0.0 refers to WSO2 Key Manager as the WSO2 Open Banking Identity and Access Management module. This section guides you on how to upgrade from Identity Key Manager 1.5.0 to Identity and Access Management 2.0.0.</p> <p>This section explains the following:</p> <ul> <li>Setting Up Database</li> <li>Configuring the <code>deployment.toml</code> file</li> <li>Migrating secondary user stores</li> <li>Migrating Databases</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#setting-up-database","title":"Setting Up Database","text":"<p>Copy the relevant JDBC driver to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/lib</code> directory.</p> <p>Note</p> <p>If you are using an Oracle database make sure the users have the CREATE PROCEDURE privilege before proceeding.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#configuring-the-deploymenttoml-file","title":"Configuring the <code>deployment.toml</code> file","text":"<p>WSO2 Open Banking 2.0.0 introduces a new configuration model where the users have all the product configurations in a single configuration file, namely <code>deployment.toml</code>.</p> <ol> <li> <p>Copy the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/resources/finance/scripts/wso2-obiam-conf/deployement/bg/deployment.toml</code> file to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/</code> directory and replace the existing file.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/deployment.toml</code> file and update the datasource configurations for the following databases:</p> </li> <li> <p>User Store</p> </li> <li>Registry database(s)</li> <li>API Manager database</li> <li> <p>Open Banking Database</p> </li> <li> <p>Datasource configurations in 1.5.0 maps with the 2.0.0 new configuration model as follows:</p> Key Manager 1.5.0 Identity and Access Management 2.0.0 <code>WSO2AM_DB</code> <code>apim_db</code> <code>WSO2CONFIG_DB</code> <code>config</code> <code>WSO2REG_DB</code> <code>shared_db</code> <code>WSO2UM_DB</code> <code>WSO2UM_DB</code> <code>WSO2_OPEN_BANKING_DB</code> <code>open_banking_database</code> </li> </ol> <p>Given below are sample configurations for each database type:</p> <p>MySQL</p> <pre><code>config.url = \"jdbc:mysql://localhost:3306/openbank_apimgtdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n</code></pre> <p>MSSQL</p> <pre><code>config.url = \"jdbc:sqlserver://localhost:1433;databaseName=openbank_apimgtdb;encrypt=false\"\nconfig.username = \"sa\"\nconfig.password = \"Root\"\nconfig.driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n</code></pre> <p>Oracle</p> <pre><code>config.url = \"jdbc:oracle:thin:@localhost:1521:ORCLCDB\"\nconfig.username = \"C##bg_ob_apimgtdb\"\nconfig.password = \"wso2carbon\"\nconfig.driver = \"oracle.jdbc.driver.OracleDriver\"\n</code></pre> <ol> <li>The <code>deployment.toml</code> file contains placeholder, update them with the hostnames of the following servers:</li> </ol> Placeholder Server <code>IAM_HOSTNAME</code> Identity and Access Management <code>APIM_HOSTNAME</code> API Management <code>ANALYTICS_HOSTNAME</code> Open Banking Business Intelligence"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>If you have created any secondary user stores for Open Banking 1.5.0, copy the content to the new setup as follows:</p> Content Copy from Copy to Secondary user stores <code>&lt;WSO2_OB_IAM_150_HOME&gt;/repository/deployment/server/userstores</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/deployment/server/userstores</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-databases","title":"Migrating Databases","text":"<ol> <li> <p>Get the migration client (<code>wso2is-migration-x.x.x.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Extract it into a local directory. The directory where the <code>wso2is-migration-x.x.x.zip</code> is extracted is referred to as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file into the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Copy the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/migration-resources</code> directory to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;</code> root directory.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/migration-resources/migration-config.yaml</code> file:</p> </li> <li> <p>Make sure versions are as follows:</p> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.7.0\"\nmigrateVersion: \"5.10.0\"\n</code></pre> </li> <li> <p>Remove the following configurations under the version: \"5.8.0\" tag:</p> <pre><code>-\n    name: \"UMAPermissionTicketSchemaMigrator\"\n    order: 3\n    parameters:\n    location: \"step2\"\n    schema: \"uma\"\n</code></pre> </li> <li> <p>Remove the following configurations under the version: \"5.10.0\" tag:</p> <pre><code>-\n    name: \"MigrationValidator\"\n    order: 2\n-\n    name: \"SchemaMigrator\"\n    order: 5\n    parameters:\n    location: \"step2\"\n    schema: \"identity\"\n</code></pre> </li> <li> <p>Update the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/deployment.toml</code> by configuring the previous user store.</p> </li> </ol> <pre><code>[user_store]\ntype = \"database\"\n#type = \"database_unique_id\"\n#class = \"org.wso2.carbon.user.core.jdbc.UniqueIDJDBCUserStoreManager\"\n</code></pre> <ol> <li>Start the WSO2 Open Banking Identity Access Management 2.0.0 server with the migration client. Use the commands given below:</li> </ol> <p>Linux/Unix or macOS</p> <pre><code>sh wso2server.sh -Dmigrate -Dcomponent=identity\n</code></pre> <p>Windows</p> <pre><code>wso2server.bat -Dmigrate -Dcomponent=identity\n</code></pre> <ol> <li> <p>Once the migration client execution is completed, stop the server.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/migration-resources</code> directory.</p> </li> <li> <p>Restart the Identity and Access Management server now.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#upgrading-open-banking-api-manager","title":"Upgrading Open Banking API Manager","text":"<p>This section guides you on how to upgrade WSO2 Open Banking API Management 1.5.0 to 2.0.0.</p> <p>This section contains the following:</p> <ul> <li>Setting Up Database</li> <li>Configuring the <code>deployment.toml</code> file</li> <li>Moving Synapse configurations</li> <li>Migrating Databases</li> <li>Migrating API Manager artifacts</li> <li>Reindexing Registry artifacts</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#setting-up-database_1","title":"Setting Up Database","text":"<p>Copy the relevant JDBC driver to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/lib</code> directory.</p> <p>Note</p> <p>If you are using an Oracle database make sure the users have the CREATE PROCEDURE privilege before proceeding.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#configuring-the-deploymenttoml-file_1","title":"Configuring the deployment.toml file","text":"<p>WSO2 Open Banking 2.0.0 introduces a new configuration model where the users have all the product configurations in a single configuration file, namely deployment.toml.</p> <ol> <li> <p>Copy the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/finance/scripts/wso2-obam-conf/deployement/bg/deployment.toml</code> file to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/</code> directory and replace the existing one.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/deployment.toml</code> file and update the datasource configurations for the following databases:</p> </li> <li> <p>User Store</p> </li> <li>Registry database(s)</li> <li>API Manager database</li> <li> <p>Open Banking Database</p> </li> <li> <p>Datasource configurations in 1.5.0 maps with the 2.0.0 new configuration model as follows:</p> </li> </ol> API Manager 1.5.0 API Manager 2.0.0 <code>WSO2AM_DB</code> <code>apim_db</code> <code>WSO2CONFIG_DB</code> <code>config</code> <code>WSO2REG_DB</code> <code>shared_db</code> <code>WSO2UM_DB</code> <code>WSO2UM_DB</code> <code>WSO2AM_STATS_DB</code> <code>WSO2AM_STATS_DB</code> <code>WSO2_OPEN_BANKING_DB</code> <code>open_banking_database</code> <p>Given below are sample configurations for each database type:</p> <p>MySQL</p> <pre><code>config.url = \"jdbc:mysql://localhost:3306/openbank_apimgtdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n</code></pre> <p>MSSQL</p> <pre><code>config.url = \"jdbc:sqlserver://localhost:1433;databaseName=openbank_apimgtdb;encrypt=false\"\nconfig.username = \"sa\"\nconfig.password = \"Root\"\nconfig.driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n</code></pre> <p>Oracle</p> <pre><code>config.url = \"jdbc:oracle:thin:@localhost:1521:ORCLCDB\"\nconfig.username = \"C##bg_ob_apimgtdb\"\nconfig.password = \"wso2carbon\"\nconfig.driver = \"oracle.jdbc.driver.OracleDriver\"\n</code></pre> <ol> <li>The deployment.toml file contains placeholder, update them with the hostnames of the following servers:</li> </ol> Placeholder Server <code>IAM_HOSTNAME</code> Identity and Access Management <code>APIM_HOSTNAME</code> API Management <code>ANALYTICS_HOSTNAME</code> Open Banking Business Intelligence"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#moving-synapse-configurations","title":"Moving Synapse configurations","text":"<ol> <li> <p>Stop all WSO2 API Manager server instances that are running.</p> </li> <li> <p>Move the following content to WSO2 Open Banking 2.0.0:</p> </li> </ol> <p>Warning</p> <p>When replacing the Synapse configurations, do not replace the following, as they contain API Management module version 2.0.0. - <code>/api/_RevokeAPI_.xml</code> - <code>/sequences/_cors_request_handler_.xml</code> - <code>/sequences/main.xml</code></p> Content Copy from Copy to Synapse super tenant configurations <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/deployment/server/ synapse-configs/default</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/epository/deployment/server/synapse-configs/default</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-databases_1","title":"Migrating Databases","text":"<ol> <li> <p>To migrate data into WSO2 Open Banking API Manager 2.0.0, execute the relevant database script against the <code>WSO2AM_DB</code> database.</p> </li> <li> <p>Get the API Manager migration database scripts provided by the WSO2 team.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-api-manager-artifacts","title":"Migrating API Manager artifacts","text":"<ol> <li> <p>Migration resources:</p> </li> <li> <p>Get the API Manager migration resources (<code>migration-resources.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Extract the received <code>migration-resources.zip</code>.</p> </li> <li> <p>Copy the extracted <code>migration-resources</code> directory to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;</code> directory.</p> </li> <li> <p>Migration client:</p> </li> <li> <p>Get the API Manager migration client (<code>org.wso2.carbon.apimgt.migrate.client-3.1.0-3.jar</code>) provided by the WSO2 team.</p> </li> <li> <p>Copy the downloaded <code>org.wso2.carbon.apimgt.migrate.client-3.1.0-3.jar</code> to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Start the API Management server with the migration client. Use the commands below:</p> </li> </ol> <p>Linux/Unix or macOS</p> <pre><code>sh wso2server.sh -DmigrateFromVersion=2.6.0\n</code></pre> <p>Windows</p> <pre><code>wso2server.bat -DmigrateFromVersion=2.6.0\n</code></pre> <ol> <li> <p>Once the migration client execution is completed, stop the server.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins/org.wso2.carbon.apimgt.migrate.client-3.1.0-3.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/migration-resources</code> directory.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#reindexing-registry-artifacts","title":"Reindexing Registry artifacts","text":"<ol> <li> <p>Execute the given database scripts against the <code>SHARED_DB</code> database. Get the relevant registry indexing script provided by the WSO2 team.</p> </li> <li> <p>Add the following configurations to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/deployment.toml</code> file.</p> </li> </ol> <pre><code>[indexing]\nre_indexing= 1\n</code></pre> <ol> <li> <p>Backup the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/solr</code> directory if it exists, then delete it.</p> </li> <li> <p>Start the API Management server.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#upgrading-open-banking-business-intelligence","title":"Upgrading Open Banking Business Intelligence","text":"<p>This section explains how to upgrade from Open Banking Business Intelligence 1.5.0 to 2.0.0.</p> <p>Warning</p> <p>These steps are only required if you have configured Open Banking Business Intelligence in your existing deployment.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-the-analytics-database","title":"Migrating the Analytics database","text":"<ol> <li> <p>Get the analytics migration script (<code>analytics_migration_scripts.zip</code>) and reporting stats script (<code>reporting_stats_scripts.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Execute them against the given databases:</p> </li> </ol> Database name Script to execute <code>APIM_ANALYTICS_DB</code> <code>analytics_migration_scripts.zip</code> <code>OB_REPORTING_DB</code> <code>reporting_stats_scripts.zip</code> <ol> <li> <p>After a WUM update for Open Banking Business Intelligence 1.5.0, the data types and field-names of certain database tables were changed. It is important to reflect these changes in your databases before the upgrading process.</p> </li> <li> <p>Get the relevant updating analytics database scripts provided by the WSO2 team.</p> </li> <li>Update the scripts by replacing the <code>&lt;APIM_ANALYTICS_DB&gt;</code> placeholder with the hostname of your database server.</li> <li>Execute the relevant script, according to your database type to perform these changes if they are not already available.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#migrating-configurations","title":"Migrating configurations","text":"<ol> <li> <p>Open the following configuration files and update them by configuring the databases that you have used in Open Banking Business Intelligence 1.5.0.</p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/conf/dashboard/deployment.yaml</code></p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/conf/worker/deployment.yaml</code></p> </li> <li> <p>Open the following siddhi files and replace the <code>&lt;ANALYTICS_HOSTNAME&gt;</code> placeholder with the hostname of your Open Banking Business Intelligence server.</p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/deployment/siddhi-files/TRAAccountValidationApp.siddhi</code></p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/deployment/siddhi-files/TRAPaymentValidationApp.siddhi</code></p> </li> <li> <p>Place the relevant JDBC driver as an OSGi bundle in the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> director.</p> </li> </ol> <p>For Oracle or MSSQL database drivers:</p> <p>You need to include the database driver corresponding to the database for the WSO2 Open Banking Business Intelligence server to communicate with the database. The WSO2 Open Banking Business Intelligence is an OSGi-based product. Therefore, when you integrate third-party products such as Oracle and MS SQL with WSO2 OB BI, you need to check whether the libraries you need to add are OSGi based. If they are not, you need to convert them to OSGi bundles before adding them to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> directory.</p> <p>To convert the jar files to OSGi bundles, follow the steps below.</p> <ol> <li> <p>Download the non-OSGi jar for the required third party product, and save it in a preferred directory on your machine.</p> </li> <li> <p>Go to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/bin</code> directory. Run the command given below to generate the converted file in the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> directory.</p> <pre><code>./jartobundle.sh &lt;PATH_TO_NON-OSGi_JAR&gt; ../lib\n</code></pre> </li> </ol> <ol> <li>Go to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/bin</code> directory and start the Worker and Dashboard profiles.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#application-attribute-changes","title":"Application Attribute Changes","text":"<p>To upgrade the application attribute data :</p> <ol> <li>Go to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/dbscripts/finance/apimgt/migration_1.5.0_to_2.0.0</code> directory. </li> <li>Execute the relevant database script against the <code>WSO2AM_DB</code> database. </li> <li>Restart the WSO2 API Management module.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-au/#republish-the-apis","title":"Republish the APIs","text":"<p>To use the APIs published in WSO2 Open Banking 1.5.0 setup, you need to redeploy these APIs to reflect the changes from the sequence files.</p> <p>Before you begin:</p> <ol> <li>Open the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/api_templates/velocity_template.xml</code> file.</li> <li>Update the <code>&lt;IAM_HOSTNAME&gt;</code> placeholder with the hostname of your Identity and Access Management server.</li> <li>Restart the API Management server.</li> </ol> <ol> <li> <p>Sign in to the WSO2 API Publisher at <code>https://&lt;WSO2_OB_APIM_200_HOST&gt;:9443/publisher</code>.</p> </li> <li> <p>Navigate to the API listing page, and select the API which you want to edit.</p> </li> <li> <p>Go to Runtime Configurations using the left menu panel.</p> </li> </ol> <p></p> <ol> <li> <p>Click the edit button under Request &gt; Message Mediation.</p> </li> <li> <p>Now, select the Custom Policy option.</p> </li> <li> <p>Upload the relevant in-sequence file from the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/finance/apis/berlin-group.org</code> directory.</p> </li> <li> <p>Scroll down and click SAVE.</p> </li> <li> <p>Go to Lifecycle using the left menu panel.</p> </li> </ol> <p></p> <ol> <li>Redeploy the API by clicking the Redeploy button.</li> </ol> <p></p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/","title":"Migration resources for WSO2 Open Banking 1.5.0 to 2.0.0 - Upgrade the solution for Berlin","text":"<p>This directory contains the migration documentation and resources for WSO2 Open Banking 1.5.0 to 2.0.0 - Berlin.</p> <p>The migration resources required for WSO2 Open Banking 1.5 to 2.0 - Berlin can be found here.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/","title":"Upgrade WSO2 Open Banking from 1.5.0 to 2.0.0 for Berlin","text":"<p>This page explains the following:</p> <ul> <li>Databases and Synapse configurations</li> <li>Disable Registry versioning</li> <li>Migrating Keystores</li> <li>Migrating custom components</li> <li>Upgrading Open Banking Identity and Access Management module (Open Banking Key Manager)</li> <li>Upgrading Open Banking API Manager</li> <li>Upgrading Open Banking Business Intelligence</li> <li>Application Attribute Changes</li> <li>Republish the APIs</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#databases-and-synapse-configurations","title":"Databases and Synapse configurations","text":"<ul> <li>Take a backup of the existing database used by WSO2 Open Banking 1.5.0. This backup is necessary in case the migration causes issues in the existing database.</li> <li>Take a backup of the existing synapse configurations in WSO2 Open Banking 1.5.0. The synapse configuration is available in the <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/deployment/server/synapse-configs</code> directory.</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#disable-registry-versioning","title":"Disable Registry versioning","text":"<p>When you have enabled versioning for Registry properties and if they are updated frequently, it can lead to an unnecessary growth in the Registry related database tables. To avoid this, WSO2 Open Banking 2.0 disables versioning by default.</p> <p>If you enabled Registry versioning for your WSO2 Open Banking 1.5.0 setup, you need to disable it before upgrading the solution. The required steps are as follows:</p> <ol> <li> <p>Open the <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/conf/registry.xml</code> and <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/conf/registry.xml</code> files.</p> </li> <li> <p>Locate the following properties in both files:</p> </li> </ol> <pre><code>&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n</code></pre> <ol> <li> <p>If the above configurations are true, use the relevant versioning script provided by the WSO2 team.</p> <p>Note</p> <p>If the above versioning configurations are already set as false you should not run the database scripts.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-keystores","title":"Migrating Keystores","text":"<p>Copy the keystores (<code>.jks</code> files) from WSO2 Open Banking 1.5.0 to WSO2 Open Banking 2.0.0.</p> Copy From Copy To <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_BI_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_BI_200_HOME&gt;/repository/resources/security</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-custom-components","title":"Migrating custom components","text":"<p>Changed internal API context paths</p> <p>The context paths of the following internal APIs have changed. If you have used the following for any custom implementation, update them accordingly:</p> Context path in 1.5.0 Context path in 2.0.0 <code>/consent</code> <code>/api/openbanking/consent-mgt</code> <code>/openbankingberlin</code> <code>/api/openbanking/backend-berlin</code> <p>Renamed JARs and packages</p> <p>If you have used the following jar files/packages for any custom implementations, update them as follows:</p> Package name in 1.5.0 Package name in 2.0.0 <code>com.wso2.finance.periodical.updater</code> <code>com.wso2.finance.open.banking.periodical.updater</code> <code>com.wso2.finance.status.validater</code> <code>com.wso2.finance.open.banking.status.validater</code> <code>eidas-cert-validator</code> <code>com.wso2.finance.open.banking.eidas.cert.validator</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#wso2-open-banking-identity-and-access-management-module","title":"WSO2 Open Banking Identity and Access Management module","text":"<p>The WSO2 Key Manager is referred to as the WSO2 Open Banking Identity and Access Management module in WSO2 Open Banking 2.0.0. This module is based on WSO2 Identity Server 5.10.0, which includes major upgrades to the main component and WSO2 Carbon Kernel. Any customized OSGi bundle added to Identity Server needs to be recompiled with the new dependency versions relevant to Identity Server 5.10.0.</p> <p>To recompile the custom OSGi bundles:</p> <ol> <li>Obtain the source codes of the custom OSGi component</li> <li>Update the dependency versions in the relevant POM files according to Identity Server 5.10.0</li> <li>Compile the project</li> </ol> <p>Make sure to recompile the following and place them in the WSO2 Open Banking 2.0.0 solution</p> Content Recompile Copy to Custom OSGI bundles(manually added files) <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins</code> Custom JAR files(manually added files) <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/libs</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/libs</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#wso2-open-banking-api-management-module","title":"WSO2 Open Banking API Management module","text":"<p>You need to copy the custom OSGi bundles and custom JAR files (manually added by you to the solution) as follows:</p> Content Copy from Copy to Custom OSGi bundles (manually added files) <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins</code> Custom JAR files(manually added files) <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/component/lib</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/lib</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#upgrading-open-banking-identity-and-access-management-module-open-banking-key-manager","title":"Upgrading Open Banking Identity and Access Management module (Open Banking Key Manager)","text":"<p>WSO2 Open Banking 2.0.0 refers to WSO2 Key Manager as the WSO2 Open Banking Identity and Access Management module. This section guides you on how to upgrade from Identity Key Manager 1.5.0 to Identity and Access Management 2.0.0.</p> <p>This section explains the following:</p> <ul> <li>Setting Up Database</li> <li>Configuring the <code>deployment.toml</code> file</li> <li>Migrating secondary user stores</li> <li>Migrating Databases</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#setting-up-database","title":"Setting Up Database","text":"<ol> <li>Copy the relevant JDBC driver to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/lib</code> directory.</li> </ol> <p>Tip</p> <p>If you are using an Oracle database make sure the users have the CREATE PROCEDURE privilege before proceeding.</p> <ol> <li>According to your database, execute the relevant database script against the mentioned databases:</li> </ol> Database Script location <code>openbank_openbankingdb</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/dbscripts/finance/berlin-group.org/migration-1.5.0_to_2</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#configuring-the-deploymenttoml-file","title":"Configuring the <code>deployment.toml</code> file","text":"<p>WSO2 Open Banking 2.0.0 introduces a new configuration model where the users have all the product configurations in a single configuration file, namely deployment.toml.</p> <ol> <li> <p>Copy the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/resources/finance/scripts/wso2-obiam-conf/deployement/bg/deployment.toml</code> file to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/</code> directory and replace the existing file.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/deployment.toml</code> file and update the datasource configurations for the following databases:</p> </li> <li> <p>User Store</p> </li> <li>Registry database(s)</li> <li>API Manager database</li> <li> <p>Open Banking Database</p> </li> <li> <p>Datasource configurations in 1.5.0 maps with the 2.0.0 new configuration model as follows:</p> </li> </ol> Key Manager 1.5.0 Identity and Access Management 2.0.0 <code>WSO2AM_DB</code> <code>apim_db</code> <code>WSO2CONFIG_DB</code> <code>config</code> <code>WSO2REG_DB</code> <code>shared_db</code> <code>WSO2UM_DB</code> <code>WSO2UM_DB</code> <code>WSO2_OPEN_BANKING_DB</code> <code>open_banking_database</code> <p>Given below are sample configurations for each database type:</p> <p>MySQL</p> <pre><code>config.url = \"jdbc:mysql://localhost:3306/openbank_apimgtdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n</code></pre> <p>MSSQL</p> <pre><code>config.url = \"jdbc:sqlserver://localhost:1433;databaseName=openbank_apimgtdb;encrypt=false\"\nconfig.username = \"sa\"\nconfig.password = \"Root\"\nconfig.driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"   \n</code></pre> <p>Oracle</p> <pre><code>config.url = \"jdbc:oracle:thin:@localhost:1521:ORCLCDB\"\nconfig.username = \"C##bg_ob_apimgtdb\"\nconfig.password = \"wso2carbon\"\nconfig.driver = \"oracle.jdbc.driver.OracleDriver\"   \n</code></pre> <ol> <li> <p>The <code>deployment.toml</code> file contains placeholder, update them with the hostnames of the following servers:</p> Placeholder Server <code>IAM_HOSTNAME</code> Identity and Access Management <code>APIM_HOSTNAME</code> API Management <code>ANALYTICS_HOSTNAME</code> Open Banking Business Intelligence </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>If you have created any secondary user stores for Open Banking 1.5.0, copy the content to the new setup as follows:</p> Content Copy from Copy to Secondary user stores <code>&lt;WSO2_OB_IAM_150_HOME&gt;/repository/deployment/server/userstores</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/deployment/server/userstores</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-databases","title":"Migrating Databases","text":"<ol> <li> <p>Get the migration client (<code>wso2is-migration-x.x.x.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Extract it into a local directory. The directory where the <code>wso2is-migration-x.x.x.zip</code> is extracted is referred to as <code>&lt;IS_MIGRATION_TOOL_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file into the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Copy the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/migration-resources</code> directory to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;</code> root directory.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/migration-resources/migration-config.yaml</code> file:</p> </li> <li> <p>Make sure versions are as follows:</p> </li> </ol> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.7.0\"\nmigrateVersion: \"5.10.0\"\n</code></pre> <ol> <li>Remove the following configurations under the version: \"5.8.0\" tag:</li> </ol> <pre><code>-\n    name: \"UMAPermissionTicketSchemaMigrator\"\n    order: 3\n    parameters:\n    location: \"step2\"\n    schema: \"uma\"\n</code></pre> <ol> <li>Remove the following configurations under the version: \"5.10.0\" tag:</li> </ol> <pre><code>-\n    name: \"MigrationValidator\"\n    order: 2\n-\n    name: \"SchemaMigrator\"\n    order: 5\n    parameters:\n    location: \"step2\"\n    schema: \"identity\"\n</code></pre> <ol> <li>Update the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/deployment.toml</code> by configuring the previous user store.</li> </ol> <pre><code>[user_store]\ntype = \"database\"\n#type = \"database_unique_id\"\n#class = \"org.wso2.carbon.user.core.jdbc.UniqueIDJDBCUserStoreManager\"\n</code></pre> <ol> <li>Start the WSO2 Open Banking Identity Access Management 2.0.0 server with the migration client. Use the commands given below:</li> </ol> <p>Linux/Unix or macOS</p> <pre><code>sh wso2server.sh -Dmigrate -Dcomponent=identity\n</code></pre> <p>Windows</p> <pre><code>wso2server.bat -Dmigrate -Dcomponent=identity\n</code></pre> <ol> <li> <p>Once the migration client execution is completed, stop the server.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/migration-resources</code> directory.</p> </li> <li> <p>Restart the Identity and Access Management server now.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#upgrading-open-banking-api-manager","title":"Upgrading Open Banking API Manager","text":"<p>This section guides you on how to upgrade WSO2 Open Banking API Management 1.5.0 to 2.0.0.</p> <p>This section explains the following:</p> <ul> <li>Setting Up Database</li> <li>Configuring the <code>deployment.toml</code> file</li> <li>Moving Synapse configurations</li> <li>Migrating Databases</li> <li>Migrating API Manager artifacts</li> <li>Reindexing Registry artifacts</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#setting-up-database_1","title":"Setting Up Database","text":"<p>Copy the relevant JDBC driver to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/lib</code> directory.</p> <p>Note</p> <p>If you are using an Oracle database make sure the users have the CREATE PROCEDURE privilege before proceeding.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#configuring-the-deploymenttoml-file_1","title":"Configuring the deployment.toml file","text":"<p>WSO2 Open Banking 2.0.0 introduces a new configuration model where the users have all the product configurations in a single configuration file, namely deployment.toml.</p> <ol> <li> <p>Copy the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/finance/scripts/wso2-obam-conf/deployement/bg/deployment.toml</code> file to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/</code> directory and replace the existing one.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/deployment.toml</code> file and update the datasource configurations for the following databases:</p> </li> <li> <p>User Store</p> </li> <li>Registry database(s)</li> <li>API Manager database</li> <li> <p>Open Banking Database</p> </li> <li> <p>Datasource configurations in 1.5.0 maps with the 2.0.0 new configuration model as follows:</p> API Manager 1.5.0 API Manager 2.0.0 <code>WSO2AM_DB</code> <code>apim_db</code> <code>WSO2CONFIG_DB</code> <code>config</code> <code>WSO2REG_DB</code> <code>shared_db</code> <code>WSO2UM_DB</code> <code>WSO2UM_DB</code> <code>WSO2AM_STATS_DB</code> <code>WSO2AM_STATS_DB</code> <code>WSO2_OPEN_BANKING_DB</code> <code>open_banking_database</code> </li> </ol> <p>Given below are sample configurations for each database type:</p> <p>MySQL</p> <pre><code>config.url = \"jdbc:mysql://localhost:3306/openbank_apimgtdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n</code></pre> <p>MSSQL</p> <pre><code>config.url = \"jdbc:sqlserver://localhost:1433;databaseName=openbank_apimgtdb;encrypt=false\"\nconfig.username = \"sa\"\nconfig.password = \"Root\"\nconfig.driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n</code></pre> <p>Oracle</p> <pre><code>config.url = \"jdbc:oracle:thin:@localhost:1521:ORCLCDB\"\nconfig.username = \"C##bg_ob_apimgtdb\"\nconfig.password = \"wso2carbon\"\nconfig.driver = \"oracle.jdbc.driver.OracleDriver\"\n</code></pre> <ol> <li>The <code>deployment.toml</code> file contains placeholder, update them with the hostnames of the following servers:</li> </ol> Placeholder Server <code>IAM_HOSTNAME</code> Identity and Access Management <code>APIM_HOSTNAME</code> API Management <code>ANALYTICS_HOSTNAME</code> Open Banking Business Intelligence"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#moving-synapse-configurations","title":"Moving Synapse configurations","text":"<ol> <li> <p>Stop all WSO2 API Manager server instances that are running.</p> </li> <li> <p>Move the following content to WSO2 Open Banking 2.0.0:</p> </li> </ol> <p>Warning</p> <p>When replacing the Synapse configurations, do not replace the following, as they contain API Management module version 2.0.0. - <code>/api/_RevokeAPI_.xml</code> - <code>/sequences/_cors_request_handler_.xml</code> - <code>/sequences/main.xml</code></p> Content Copy from Copy to Synapse super tenant configurations <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/deployment/server/synapse-configs/default</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/deployment/server/synapse-configs/default</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-databases_1","title":"Migrating Databases","text":"<ol> <li> <p>To migrate data into WSO2 Open Banking API Manager 2.0.0, execute the relevant database script against the <code>WSO2AM_DB</code> database.</p> </li> <li> <p>Get the API Manager migration database scripts provided by the WSO2 team.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-api-manager-artifacts","title":"Migrating API Manager artifacts","text":"<ol> <li> <p>Migration resources:</p> </li> <li> <p>Get the API Manager migration resources (<code>migration-resources.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Extract the received <code>migration-resources.zip</code>.</p> </li> <li> <p>Copy the extracted <code>migration-resources</code> directory to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;</code> directory.</p> </li> <li> <p>Migration client:</p> </li> <li> <p>Get the API Manager migration client (<code>org.wso2.carbon.apimgt.migrate.client-3.1.0-3.jar</code>) provided by the WSO2 team.</p> </li> <li> <p>Copy the received <code>org.wso2.carbon.apimgt.migrate.client-3.1.0-3.jar</code> to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Start the API Management server with the migration client. Use the commands below:</p> </li> </ol> <p>Linux/Unix or macOS</p> <pre><code>sh wso2server.sh -DmigrateFromVersion=2.6.0\n</code></pre> <p>Windows</p> <pre><code>wso2server.bat -DmigrateFromVersion=2.6.0\n</code></pre> <ol> <li> <p>Once the migration client execution is completed, stop the server.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins/org.wso2.carbon.apimgt.migrate.client-3.1.0-3.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/migration-resources</code> directory.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#reindexing-registry-artifacts","title":"Reindexing Registry artifacts","text":"<ol> <li> <p>Execute the given database scripts against the <code>SHARED_DB</code> database.</p> </li> <li> <p>Get the relevant registry indexing script provided by the WSO2 team.</p> </li> <li> <p>Add the following configurations to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/deployment.toml</code> file.</p> </li> </ol> <pre><code>[indexing]\nre_indexing= 1\n</code></pre> <ol> <li> <p>Backup the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/solr</code> directory if it exists, then delete it.</p> </li> <li> <p>Start the API Management server.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#upgrading-open-banking-business-intelligence","title":"Upgrading Open Banking Business Intelligence","text":"<p>This section explains how to upgrade from Open Banking Business Intelligence 1.5.0 to 2.0.0.</p> <p>Warning</p> <p>These steps are only required if you have configured Open Banking Business Intelligence in your existing deployment.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-the-analytics-database","title":"Migrating the Analytics database","text":"<ol> <li> <p>Get the relevant analytics migration script provided by the WSO2 team. Execute the downloaded database scripts against the <code>APIM_ANALYTICS_DB</code> database.</p> </li> <li> <p>After a WUM update for Open Banking Business Intelligence 1.5.0, the data types and field-names of certain database tables were changed. It is important to reflect these changes in your databases before the upgrading process.</p> </li> <li> <p>Get the relevant updating analytics database scripts provided by the WSO2 team.</p> </li> <li>Update the scripts by replacing the <code>&lt;APIM_ANALYTICS_DB&gt;</code> placeholder with the hostname of your database server.</li> <li>Execute the relevant script, according to your database type to perform these changes if they are not already available.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#migrating-configurations","title":"Migrating configurations","text":"<ol> <li> <p>Open the following configuration files and update them by configuring the databases that you have used in Open Banking Business Intelligence 1.5.0.</p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/conf/dashboard/deployment.yaml</code></p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/conf/worker/deployment.yaml</code></p> </li> <li> <p>Open the following siddhi files and replace the <code>&lt;ANALYTICS_HOSTNAME&gt;</code> placeholder with the hostname of your Open Banking Business Intelligence server.</p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/deployment/siddhi-files/TRAAccountValidationApp.siddhi</code></p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/deployment/siddhi-files/TRAPaymentValidationApp.siddhi</code></p> </li> <li> <p>Place the relevant JDBC driver as an OSGi bundle in the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> directory.</p> </li> </ol> <p>For Oracle or MSSQL database drivers:</p> <p>You need to include the database driver corresponding to the database for the WSO2 Open Banking Business Intelligence server to communicate with the database. The WSO2 Open Banking Business Intelligence is an OSGi-based product. Therefore, when you integrate third-party products such as Oracle and MS SQL with WSO2 OB BI, you need to check whether the libraries you need to add are OSGi based. If they are not, you need to convert them to OSGi bundles before adding them to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> directory. To convert the jar files to OSGi bundles, follow the steps below.</p> <ol> <li> <p>Download the non-OSGi jar for the required third party product, and save it in a preferred directory in your machine.</p> </li> <li> <p>Go to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/bin</code> directory. Run the command given below to generate the converted file in the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> directory.</p> </li> </ol> <pre><code>./jartobundle.sh &lt;PATH_TO_NON-OSGi_JAR&gt; ../lib\n</code></pre> <ol> <li>Go to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/bin</code> directory and start the Worker and Dashboard profiles.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#application-attribute-changes","title":"Application Attribute Changes","text":"<p>To upgrade the application attribute data :</p> <ol> <li>Go to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/dbscripts/finance/apimgt/migration_1.5.0_to_2.0.0</code> directory. </li> <li>Execute the relevant database script against the <code>WSO2AM_DB</code> database. </li> <li>Restart the WSO2 API Management module.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-berlin/#republish-the-apis","title":"Republish the APIs","text":"<p>To use the APIs published in WSO2 Open Banking 1.5.0 setup, you need to redeploy these APIs to reflect the changes from the sequence files.</p> <p>Before you begin:</p> <ol> <li>Open the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/api_templates/velocity_template.xml</code> file.</li> <li>Update the <code>&lt;IAM_HOSTNAME&gt;</code> placeholder with the hostname of your Identity and Access Management server.</li> <li>Restart the API Management server.</li> </ol> <ol> <li> <p>Sign in to the WSO2 API Publisher at <code>https://&lt;WSO2_OB_APIM_200_HOST&gt;:9443/publisher</code>.</p> </li> <li> <p>Navigate to the API listing page, and select the API which you want to edit.</p> </li> <li> <p>Go to Runtime Configurations using the left menu panel.</p> <p></p> </li> <li> <p>Click the edit button under Request &gt; Message Mediation.</p> </li> <li> <p>Now, select the Custom Policy option.</p> </li> <li> <p>Upload the relevant in-sequence file from the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/finance/apis/berlin-group.org</code> directory.</p> </li> <li> <p>Scroll down and click SAVE.</p> </li> <li> <p>Go to Lifecycle using the left menu panel.</p> <p></p> </li> <li> <p>Redeploy the API by clicking the Redeploy button.</p> <p></p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/","title":"Migration resources for WSO2 Open Banking 1.5.0 to 2.0.0 - Upgrade the solution for UK","text":"<p>Note</p> <p>This README documentation is for internal use only.</p> <p>This directory contains the migration documentation and resources for WSO2 Open Banking 1.5.0 to 2.0.0 - UK.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migration-documentation","title":"Migration Documentation","text":"<p>Listed below are the documentation required for WSO2 Open Banking 1.5.0 to 2.0.0 - UK:</p> <ul> <li>Upgrading WSO2 Open Banking from 1.5.0 to 2.0.0 - Introduction: upgrade-wso2-open-banking-1.5.0-to-2.0.0-introduction.md</li> <li>Map XML Configurations to TOML Configurations: map-xml-to-toml.md</li> <li>Upgrade WSO2 Open Banking from 1.5.0 to 2.0.0 for the UK: upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk.md</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migration-resources","title":"Migration Resources","text":"<ul> <li> <p>All the migration resources required for WSO2 Open Banking 1.5.0 to 2.0.0 - UK can be found here.</p> </li> <li> <p>Additionally, all the images used in the documentation can be found here.</p> </li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/","title":"Upgrade WSO2 Open Banking from 1.5.0 to 2.0.0 for the UK","text":"<p>Note</p> <p>Before you upgrade the solution from 1.5.0 to 2.0.0, it is mandatory to convert all your applications to Dynamic Client Registration v3.2. For more details, refer to Converting Applications into Dynamic Client Registration v3.2.</p> <p>This page explains the following:</p> <ul> <li>Databases and Synapse configurations</li> <li>Disable Registry versioning</li> <li>Migrating Keystores</li> <li>Migrating custom components</li> <li>Upgrading Open Banking Identity and Access Management module (Open Banking Key Manager)</li> <li>Upgrading Open Banking API Manager</li> <li>Upgrading Open Banking Business Intelligence</li> <li>Application Attribute Changes</li> <li>Republish the APIs</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#databases-and-synapse-configurations","title":"Databases and Synapse configurations","text":"<ul> <li> <p>Take a backup of the existing database used by WSO2 Open Banking 1.5.0. This backup is necessary in case the migration causes issues in the existing database.</p> </li> <li> <p>Take a backup of the existing synapse configurations in WSO2 Open Banking 1.5.0. The synapse configuration is available in the <code>&lt;WSO2_OB_APIM_HOME&gt;/repository/deployment/server/synapse-configs</code> directory.</p> </li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#disable-registry-versioning","title":"Disable Registry versioning","text":"<p>When you have enabled versioning for Registry properties and if they are updated frequently, it can lead to an unnecessary growth in the Registry related database tables. To avoid this, WSO2 Open Banking 2.0 disables versioning by default.</p> <p>If you enabled Registry versioning for your WSO2 Open Banking 1.5.0 setup, you need to disable it before upgrading the solution. The required steps are as follows:</p> <ol> <li> <p>Open the <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/conf/registry.xml</code> and <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/conf/registry.xml</code> files.</p> </li> <li> <p>Locate the following properties in both files:</p> </li> </ol> <pre><code>&lt;versioningProperties&gt;true&lt;/versioningProperties&gt;\n&lt;versioningComments&gt;true&lt;/versioningComments&gt;\n&lt;versioningTags&gt;true&lt;/versioningTags&gt;\n&lt;versioningRatings&gt;true&lt;/versioningRatings&gt;\n</code></pre> <ol> <li>If the above configurations are <code>true</code>,</li> </ol> <p>a. Get the relevant versioning script provided by the WSO2 team.</p> <p>b. According to your database type, run the relevant script against the following databases.</p> <pre><code>- `openbank_govdb`\n- `openbank_am_configdb`\n- `openbank_iskm_configdb`\n\n  &gt;**Note**\n  &gt;\n  &gt;If the above versioning configurations are already set as `false` you should not run the database scripts.\n</code></pre>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-keystores","title":"Migrating Keystores","text":"<p>Copy the keystores (<code>.jks</code> files) from WSO2 Open Banking 1.5.0 to WSO2 Open Banking 2.0.0.</p> Copy From Copy To <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_BI_150_HOME&gt;/repository/resources/security</code> <code>&lt;WSO2_OB_BI_200_HOME&gt;/repository/resources/security</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-custom-components","title":"Migrating custom components","text":"<p>Changed internal API context paths</p> <p>The context paths of the following internal APIs have changed. If you have used the following for any custom implementation, update them accordingly:</p> Context path in 1.5.0 Context path in 2.0.0 <code>/consent</code> <code>/api/openbanking/consent-mgt</code> <code>/dynamicclientregistration</code> <code>/api/openbanking/dynamic-client-registration</code> <code>/eventnotifications</code> <code>/api/openbanking/event-notifications</code> <code>/openbanking</code> <code>/api/openbanking/backend-uk</code> <p>Renamed JARs and packages</p> <p>If you have used the following jar files/ packages for any custom implementations, update them as follows:</p> Package name in 1.5.0 Package name in 2.0.0 <code>com.wso2.finance.periodical.updater</code> <code>com.wso2.finance.open.banking.periodical.updater</code> <code>com.wso2.finance.status.validater</code> <code>com.wso2.finance.open.banking.status.validater</code> <code>eidas-cert-validator</code> <code>com.wso2.finance.open.banking.eidas.cert.validator</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#wso2-open-banking-identity-and-access-management-module","title":"WSO2 Open Banking Identity and Access Management module","text":"<p>The WSO2 Key Manager is referred to as the WSO2 Open Banking Identity and Access Management module in WSO2 Open Banking 2.0.0. This module is based on WSO2 Identity Server 5.10.0, which includes major upgrades to the main component and WSO2 Carbon Kernel. Any customized OSGi bundle added to Identity Server needs to be recompiled with the new dependency versions relevant to Identity Server 5.10.0.</p> <p>To recompile the custom OSGi bundles:</p> <ol> <li>Obtain the source codes of the custom OSGi component</li> <li>Update the dependency versions in the relevant POM files according to Identity Server 5.10.0</li> <li>Compile the project</li> </ol> <p>Make sure to recompile the following and place them in the WSO2 Open Banking 2.0.0 solution:</p> Content Recompile Copy to Custom OSGI bundles (manually added files) <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins</code> Custom JAR files (manually added files) <code>&lt;WSO2_OB_KM_150_HOME&gt;/repository/components/libs</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/libs</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#wso2-open-banking-api-management-module","title":"WSO2 Open Banking API Management module","text":"<p>You need to copy the custom OSGi bundles and custom JAR files (manually added by you to the solution) as follows:</p> Content Copy from Copy to Custom OSGI bundles(manually added files) <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/components/dropins</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins</code> Custom JAR files (manually added files) <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/components/lib</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/lib</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#upgrading-open-banking-identity-and-access-management-module-open-banking-key-manager","title":"Upgrading Open Banking Identity and Access Management module (Open Banking Key Manager)","text":"<p>WSO2 Open Banking 2.0.0 refers to WSO2 Key Manager as the WSO2 Open Banking Identity and Access Management module. This section guides you on how to upgrade from Identity Key Manager 1.5.0 to Identity and Access Management 2.0.0.</p> <p>This section explains the following:</p> <ul> <li>Setting Up Database</li> <li>Configuring the <code>deployment.toml</code> file</li> <li>Migrating secondary user stores</li> <li>Migrating Databases</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#setting-up-database","title":"Setting Up Database","text":"<p>Copy the relevant JDBC driver to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/lib</code> directory.</p> <p>Note</p> <p>If you are using an Oracle database make sure the users have the CREATE PROCEDURE privilege before proceeding.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#configuring-the-deploymenttoml-file","title":"Configuring the <code>deployment.toml</code> file","text":"<p>WSO2 Open Banking 2.0.0 introduces a new configuration model where the users have all the product configurations in a single configuration file, namely <code>deployment.toml</code>.</p> <ol> <li> <p>Copy the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/resources/finance/scripts/wso2-obiam-conf/deployement/uk/deployment.toml</code> file to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/</code> directory and replace the existing file.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/deployment.toml</code> file and update the datasource configurations for the following databases:</p> </li> <li> <p>User Store</p> </li> <li>Registry database(s)</li> <li>API Manager database</li> <li> <p>Open Banking Database</p> </li> <li> <p>Datasource configurations in 1.5.0 maps with the 2.0.0 new configuration model as follows:</p> </li> </ol> Key Manager 1.5.0 Identity and Access Management 2.0.0 <code>WSO2AM_DB</code> <code>apim_db</code> <code>WSO2CONFIG_DB</code> <code>config</code> <code>WSO2REG_DB</code> <code>shared_db</code> <code>WSO2UM_DB</code> <code>WSO2UM_DB</code> <code>WSO2_OPEN_BANKING_DB</code> <code>open_banking_database</code> <p>Given below are sample configurations for each database type:</p> <p>MySQL</p> <pre><code>config.url = \"jdbc:mysql://localhost:3306/openbank_apimgtdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n</code></pre> <p>MSSQL</p> <pre><code>config.url = \"jdbc:sqlserver://localhost:1433;databaseName=openbank_apimgtdb;encrypt=false\"\nconfig.username = \"sa\"\nconfig.password = \"Root\"\nconfig.driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n</code></pre> <p>Oracle</p> <pre><code>config.url = \"jdbc:oracle:thin:@localhost:1521:ORCLCDB\"\nconfig.username = \"C##uk_ob_apimgtdb\"\nconfig.password = \"wso2carbon\"\nconfig.driver = \"oracle.jdbc.driver.OracleDriver\"\n</code></pre> <ol> <li>The <code>deployment.toml</code> file contains placeholder, update them with the hostnames of the following servers:</li> </ol> Placeholder Server <code>IAM_HOSTNAME</code> Identity and Access Management <code>APIM_HOSTNAME</code> API Management <code>ANALYTICS_HOSTNAME</code> Open Banking Business Intelligence"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-secondary-user-stores","title":"Migrating secondary user stores","text":"<p>If you have created any secondary user stores for Open Banking 1.5.0, copy the content to the new setup as follows:</p> Content Copy from Copy to Secondary user stores <code>&lt;WSO2_OB_IAM_150_HOME&gt;/repository/deployment/server/userstores</code> <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/deployment/server/userstores</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-databases","title":"Migrating Databases","text":"<ol> <li> <p>Get the migration client (<code>wso2is-migration-x.x.x.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Extract it into a local directory. The directory where the <code>wso2is-migration-x.x.x.zip</code> is extracted is referred to as `. <li> <p>Copy the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file into the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Copy the <code>&lt;IS_MIGRATION_TOOL_HOME&gt;/migration-resources</code> directory to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;</code> root directory.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/migration-resources/migration-config.yaml</code> file:</p> </li> <li> <p>Make sure versions are as follows:</p> </li> <pre><code>migrationEnable: \"true\"\ncurrentVersion: \"5.7.0\"\nmigrateVersion: \"5.10.0\"\n</code></pre> <ol> <li>Remove the following configurations under the version: \"5.8.0\" tag:</li> </ol> <pre><code>-\n    name: \"UMAPermissionTicketSchemaMigrator\"\n    order: 3\n    parameters:\n    location: \"step2\"\n    schema: \"uma\"\n</code></pre> <ol> <li>Remove the following configurations under the version: \"5.10.0\" tag:</li> </ol> <pre><code>-\n    name: \"MigrationValidator\"\n    order: 2\n-\n    name: \"SchemaMigrator\"\n    order: 5\n    parameters:\n    location: \"step2\"\n    schema: \"identity\"\n</code></pre> <ol> <li>Update the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/conf/deployment.toml</code> by configuring the previous user store.</li> </ol> <pre><code>[user_store]\ntype = \"database\"\n#type = \"database_unique_id\"\n#class = \"org.wso2.carbon.user.core.jdbc.UniqueIDJDBCUserStoreManager\"\n</code></pre> <ol> <li>Start the WSO2 Open Banking Identity Access Management 2.0.0 server with the migration client.</li> </ol> <p>Use the commands given below:</p> <p>Linux/Unix or macOS</p> <pre><code>sh wso2server.sh -Dmigrate -Dcomponent=identity\n</code></pre> <p>Windows</p> <pre><code>wso2server.bat -Dmigrate -Dcomponent=identity\n</code></pre> <ol> <li> <p>Once the migration client execution is completed, stop the server.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/repository/components/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/migration-resources</code> directory.</p> </li> <li> <p>Restart the Identity and Access Management server now.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#upgrading-open-banking-api-manager","title":"Upgrading Open Banking API Manager","text":"<p>This section guides you on how to upgrade WSO2 Open Banking API Management 1.5.0 to 2.0.0.</p> <p>This section explains the following:</p> <ul> <li>Setting Up Database</li> <li>Configuring the deployment.toml file</li> <li>Moving Synapse configurations</li> <li>Migrating Databases</li> <li>Migrating API Manager artifacts</li> <li>Reindexing Registry artifacts</li> </ul>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#setting-up-database_1","title":"Setting Up Database","text":"<p>Copy the relevant JDBC driver to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/lib</code> directory.</p> <p>Note</p> <p>If you are using an Oracle database make sure the users have the CREATE PROCEDURE privilege before proceeding.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#configuring-the-deploymenttoml-file_1","title":"Configuring the <code>deployment.toml</code> file","text":"<p>WSO2 Open Banking 2.0.0 introduces a new configuration model where the users have all the product configurations in a single configuration file, namely deployment.toml.</p> <ol> <li> <p>Copy the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/finance/scripts/wso2-obam-conf/deployement/uk/deployment.toml</code> file to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/</code> directory and replace the existing one.</p> </li> <li> <p>Open the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/deployment.toml</code> file and update the datasource configurations for the following databases:</p> </li> <li> <p>User Store</p> </li> <li>Registry database(s)</li> <li>API Manager database</li> <li> <p>Open Banking Database</p> </li> <li> <p>Datasource configurations in 1.5.0 maps with the 2.0.0 new configuration model as follows:</p> </li> </ol> API Manager 1.5.0 API Manager 2.0.0 <code>WSO2AM_DB</code> <code>apim_db</code> <code>WSO2CONFIG_DB</code> <code>config</code> <code>WSO2REG_DB</code> <code>shared_db</code> <code>WSO2UM_DB</code> <code>WSO2UM_DB</code> <code>WSO2AM_STATS_DB</code> <code>WSO2AM_STATS_DB</code> <code>WSO2_OPEN_BANKING_DB</code> <code>open_banking_database</code> <p>Given below are sample configurations for each database type:</p> <p>MySQL</p> <pre><code>config.url = \"jdbc:mysql://localhost:3306/openbank_apimgtdb?autoReconnect=true&amp;useSSL=false\"\nconfig.username = \"root\"\nconfig.password = \"root\"\nconfig.driver = \"com.mysql.jdbc.Driver\"\n</code></pre> <p>MSSQL</p> <pre><code>config.url = \"jdbc:sqlserver://localhost:1433;databaseName=openbank_apimgtdb;encrypt=false\"\nconfig.username = \"sa\"\nconfig.password = \"Root\"\nconfig.driver = \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\n</code></pre> <p>Oracle</p> <pre><code>config.url = \"jdbc:oracle:thin:@localhost:1521:ORCLCDB\"\nconfig.username = \"C##uk_ob_apimgtdb\"\nconfig.password = \"wso2carbon\"\nconfig.driver = \"oracle.jdbc.driver.OracleDriver\"\n</code></pre> <ol> <li>The <code>deployment.toml</code> file contains placeholder, update them with the hostnames of the following servers:</li> </ol> Placeholder Server <code>IAM_HOSTNAME</code> Identity and Access Management <code>APIM_HOSTNAME</code> API Management <code>ANALYTICS_HOSTNAME</code> Open Banking Business Intelligence"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#moving-synapse-configurations","title":"Moving Synapse configurations","text":"<ol> <li> <p>Stop all WSO2 API Manager server instances that are running.</p> </li> <li> <p>Move the following content to WSO2 Open Banking 2.0.0:</p> </li> </ol> <p>Warning</p> <p>When replacing the Synapse configurations, do not replace the following, as they contain API Management module version 2.0.0. - <code>/api/_RevokeAPI_.xml</code> - <code>/sequences/_cors_request_handler_.xml</code> - <code>/sequences/main.xml</code></p> Content Copy from Copy to Synapse super tenant configurations <code>&lt;WSO2_OB_APIM_150_HOME&gt;/repository/deployment/server/ synapse-configs/default</code> <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/deployment/server/synapse-configs/default</code>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-databases_1","title":"Migrating Databases","text":"<ol> <li> <p>To migrate data into WSO2 Open Banking API Manager 2.0.0, execute the relevant database script against the <code>WSO2AM_DB</code> database.</p> </li> <li> <p>Get the API Manager migration database scripts provided by the WSO2 team.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-api-manager-artifacts","title":"Migrating API Manager artifacts","text":"<ol> <li> <p>Migration resources:</p> </li> <li> <p>Get the API Manager migration resources (<code>migration-resources.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Extract the downloaded <code>migration-resources.zip</code>.</p> </li> <li> <p>Copy the extracted <code>migration-resources</code> directory to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;</code> directory.</p> </li> <li> <p>Migration client:</p> </li> <li> <p>Get the API Manager migration client (<code>org.wso2.carbon.apimgt.migrate.client-3.1.0-6.jar</code>) provided by the WSO2 team.</p> </li> <li> <p>Copy the provided <code>org.wso2.carbon.apimgt.migrate.client-3.1.0-6.jar</code> to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins</code> directory.</p> </li> <li> <p>Start the API Management server with the migration client. Use the commands below:</p> </li> </ol> <p>Linux/Unix or macOS</p> <pre><code>sh wso2server.sh -DmigrateFromVersion=2.6.0\n</code></pre> <p>Windows</p> <pre><code>wso2server.bat -DmigrateFromVersion=2.6.0\n</code></pre> <ol> <li> <p>Once the migration client execution is completed, stop the server.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/components/dropins/org.wso2.carbon.apimgt.migrate.client-3.1.0-6.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/migration-resources</code> directory.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#reindexing-registry-artifacts","title":"Reindexing Registry artifacts","text":"<p>Note</p> <p>Make sure to run the migration client before reindexing registry artifacts.</p> <ol> <li> <p>Get the relevant registry indexing script provided by the WSO2 team.</p> </li> <li> <p>According to your database type, run the relevant script against the following databases.</p> </li> <li> <p><code>openbank_govdb</code></p> </li> <li><code>openbank_am_configdb</code></li> <li> <p><code>openbank_iskm_configdb</code></p> </li> <li> <p>Add the following configurations to the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/conf/deployment.toml</code> file.</p> </li> </ol> <pre><code>[indexing]\nre_indexing= 1\n</code></pre> <ol> <li> <p>Backup the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/solr</code> directory if it exists, then delete it.</p> </li> <li> <p>Start the API Management server.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#upgrading-open-banking-business-intelligence","title":"Upgrading Open Banking Business Intelligence","text":"<p>This section explains how to upgrade from Open Banking Business Intelligence 1.5.0 to 2.0.0.</p> <p>Warning</p> <p>These steps are only required if you have configured Open Banking Business Intelligence in your existing deployment.</p>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-the-analytics-database","title":"Migrating the Analytics database","text":"<ol> <li> <p>Get the relevant analytics migration script provided by the WSO2 team.</p> </li> <li> <p>Execute the downloaded database scripts against the <code>APIM_ANALYTICS_DB</code> database.</p> </li> <li> <p>After a WUM update for Open Banking Business Intelligence 1.5.0, the data types and field-names of certain database tables were changed. It is important to reflect these changes in your databases before the upgrading process.</p> </li> <li> <p>Get the relevant updating analytics database scripts provided by the WSO2 team.</p> </li> <li>Update the scripts by replacing the <code>&lt;APIM_ANALYTICS_DB&gt;</code> placeholder with the hostname of your database server.</li> <li>Execute the relevant script, according to your database type to perform these changes if they are not already available.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#migrating-configurations","title":"Migrating configurations","text":"<ol> <li> <p>Open the following configuration files and update them by configuring the databases that you have used in Open Banking Business Intelligence 1.5.0.</p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/conf/dashboard/deployment.yaml</code></p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/conf/worker/deployment.yaml</code></p> </li> <li> <p>Open the following siddhi files and replace the <code>&lt;ANALYTICS_HOSTNAME&gt;</code> placeholder with the hostname of your Open Banking Business Intelligence server.</p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/deployment/siddhi-files/TRAAccountValidationApp.siddhi</code></p> </li> <li> <p><code>&lt;WSO2_OB_BI_200_HOME&gt;/deployment/siddhi-files/TRAPaymentValidationApp.siddhi</code></p> </li> <li> <p>Place the relevant JDBC driver as an OSGi bundle in the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> director.</p> </li> </ol> <p>For Oracle or MSSQL database drivers:</p> <p>You need to include the database driver corresponding to the database for the WSO2 Open Banking Business Intelligence server to communicate with the database. The WSO2 Open Banking Business Intelligence is an OSGi-based product. Therefore, when you integrate third-party products such as Oracle and MS SQL with WSO2 OB BI, you need to check whether the libraries you need to add are OSGi based. If they are not, you need to convert them to OSGi bundles before adding them to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> directory. To convert the jar files to OSGi bundles, follow the steps below.</p> <ol> <li> <p>Download the non-OSGi jar for the required third party product, and save it in a preferred directory on your machine.</p> </li> <li> <p>Go to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/bin</code> directory. Run the command given below to generate the converted file in the <code>&lt;WSO2_OB_BI_200_HOME&gt;/lib</code> directory.</p> </li> </ol> <pre><code>./jartobundle.sh &lt;PATH_TO_NON-OSGi_JAR&gt; ../lib\n</code></pre> <ol> <li>Go to the <code>&lt;WSO2_OB_BI_200_HOME&gt;/bin</code> directory and start the Worker and Dashboard profiles.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#application-attribute-changes","title":"Application Attribute Changes","text":"<p>To upgrade the application attribute data:</p> <ol> <li>Go to the <code>&lt;WSO2_OB_IAM_200_HOME&gt;/dbscripts/finance/apimgt/migration_1.5.0_to_2.0.0</code> directory. </li> <li>Execute the relevant database script against the <code>WSO2AM_DB</code> database. </li> <li>Restart the WSO2 API Management module.</li> </ol>"},{"location":"open-banking/migration-docs/ob-1.5.0-to-2.0.0/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/upgrade-wso2-open-banking-1.5.0-to-2.0.0-for-uk/#republish-the-apis","title":"Republish the APIs","text":"<p>To use the APIs published in WSO2 Open Banking 1.5.0 setup, you need to redeploy these APIs to reflect the changes from the sequence files.</p> <p>Before you begin:</p> <ul> <li>Open the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/api_templates/velocity_template.xml</code> file.</li> <li>Update the <code>&lt;IAM_HOSTNAME&gt;</code> placeholder with the hostname of your Identity and Access Management server.</li> <li>Restart the API Management server.</li> </ul> <ol> <li> <p>Sign in to the WSO2 API Publisher at <code>https://&lt;WSO2_OB_APIM_200_HOST&gt;:9443/publisher</code>.</p> </li> <li> <p>Navigate to the API listing page, and select the API which you want to edit.</p> </li> <li> <p>Go to Runtime Configurations using the left menu panel.</p> <p></p> </li> <li> <p>Click the edit button under Request &gt; Message Mediation.</p> </li> <li> <p>Now, select the Custom Policy option.</p> </li> <li> <p>Upload the relevant in-sequence file from the <code>&lt;WSO2_OB_APIM_200_HOME&gt;/repository/resources/finance/apis/openbanking.org.uk</code> directory.</p> </li> <li> <p>Scroll down and click SAVE.</p> </li> <li> <p>Go to Lifecycle using the left menu panel.</p> <p></p> </li> <li> <p>Redeploy the API by clicking the Redeploy button.</p> <p></p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/ReadMe/","title":"ReadMe","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/ReadMe/#home-page-navigation-for-300","title":"Home page Navigation for 3.0.0","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/","title":"Migration resources for WSO2 Open Banking 2.0.0 to 3.0.0 - Berlin Toolkit 1.0.0","text":"<p>This directory contains the migration documentation and resources for WSO2 Open Banking 2.0.0 to 3.0.0 - Berlin Toolkit 1.0.0.</p> <p>The migration resources required for WSO2 Open Banking 2.0.0 to 3.0.0 - Berlin Toolkit 1.0.0 can be found here.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/modifications-after-migration/","title":"Modifications After Migration","text":"<p>This page explains the modifications that need to be performed after the upgrade/migration process.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/modifications-after-migration/#open-banking-internal-scopes","title":"Open Banking Internal Scopes","text":"<p>Configure open banking internal scopes as follows:</p> <ol> <li>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</li> <li>Update the allowed scopes according the sample below:</li> </ol> <pre><code>[oauth]\nallowed_scopes = [\"consent.*\", \"OB_.*\"]\n</code></pre>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/modifications-after-migration/#two-factor-authentication","title":"Two-Factor Authentication","text":"<p>If the migrated Service Provider is configured to use two-factor authentication:</p> <ol> <li>Update the <code>&lt;IS_HOME&gt;/repository/conf/common.auth.script.js</code> file with the following steps:</li> </ol> <p><pre><code>var psuChannel = 'Online Banking';\n\nvar onLoginRequest = function(context) {\n    publishAuthData(context, \"AuthenticationAttempted\", {'psuChannel': psuChannel});\n    executeStep(1, {\n        onSuccess: function (context) {\n            Log.info(\"Authentication Successful\");\n            publishAuthData(context, \"AuthenticationSuccessful\", {'psuChannel': psuChannel});\n            executeStep(2, {\n                onSuccess: function (context) {\n                    Log.info(\"Authentication Successful\");\n                    publishAuthData(context, \"AuthenticationSuccessful\", {'psuChannel': psuChannel});\n                },\n                onFail: function (context) {\n                    Log.info(\"Authentication Failed\");\n                    publishAuthData(context, \"AuthenticationFailed\", {'psuChannel': psuChannel});\n                }\n            });\n        },\n        onFail: function (context) {\n            Log.info(\"Authentication Failed\");\n            publishAuthData(context, \"AuthenticationFailed\", {'psuChannel': psuChannel});\n        }\n    });\n};\n</code></pre> 2. Update the common auth script of the existing service provider.</p> <ol> <li>Go to the Identity Server Management Console <code>https://&lt;IS_HOST&gt;:9446/carbon</code> and log in as the admin user. </li> <li>Go to Service Providers &gt; List.</li> <li>Edit the relevant Service Provider. </li> <li>Go to Local &amp; Outbound Authentication Configuration &gt; Advanced Configuration. </li> <li> <p>Replace the existing adaptive authentication script under the Script Based Adaptive Authentication section with the following:</p> <p><pre><code>var psuChannel = 'Online Banking';\n\nvar onLoginRequest = function(context) {\n    publishAuthData(context, \"AuthenticationAttempted\", {'psuChannel': psuChannel});\n    executeStep(1, {\n        onSuccess: function (context) {\n            Log.info(\"Authentication Successful\");\n            publishAuthData(context, \"AuthenticationSuccessful\", {'psuChannel': psuChannel});\n            executeStep(2, {\n                onSuccess: function (context) {\n                    Log.info(\"Authentication Successful\");\n                    publishAuthData(context, \"AuthenticationSuccessful\", {'psuChannel': psuChannel});\n                },\n                onFail: function (context) {\n                    Log.info(\"Authentication Failed\");\n                    publishAuthData(context, \"AuthenticationFailed\", {'psuChannel': psuChannel});\n                }\n            });\n        },\n        onFail: function (context) {\n            Log.info(\"Authentication Failed\");\n            publishAuthData(context, \"AuthenticationFailed\", {'psuChannel': psuChannel});\n        }\n    });\n}; \n</code></pre>    6. Click Update.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/open-banking-data-migration/","title":"Open Banking Data Migration","text":"<p>Before you begin:</p> <p>Back up all the databases before performing the migration.</p> <ol> <li>To create the required database tables:<ul> <li>Run the relevant SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent</code> directory against   the <code>openbank_openbankingdb</code> database.</li> </ul> </li> <li>Get the WSO2 Open Banking Migration Client Tool v1.0.0 (<code>wso2-openbanking-migration-1.0.0.zip</code>) provided by the WSO2 team.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources</code> directory to <code>&lt;IS_HOME&gt;</code>.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file to <code>&lt;IS_HOME&gt;/repository/components/dropins</code>.</li> <li>Open the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/migration-config.yaml</code> file and    set the <code>migrationEnable</code> property to <code>true</code>.</li> <li> <p>Start the Identity Server with the following command:</p> <pre><code>   sh wso2server.sh -DobMigrationSpec=BG\n</code></pre> </li> <li> <p>Stop the server.</p> <p>Warning</p> <p>If a failure occurred during the migration process, delete all the migrated data from the tables that      were generated during migration.</p> </li> <li> <p>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file.</p> </li> <li>Remove the <code>&lt;IS_HOME&gt;/openbanking-migration-resources</code> directory.</li> <li>Start the Identity Server and API Manager servers.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-320/","title":"Upgrading to WSO2 API Manager 3.2.0","text":"<p>WSO2 API Manager 3.1.0 is a base product of WSO2 Open Banking 2.0. This section instructs you on how to upgrade the API Manager to 3.2.0, which is a prerequisite for upgrading to API Manager 4.0.</p> <ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager documentation provided by the WSO2 team.</p> </li> <li> <p>Upgrade IS as Key Manager 5.10.0 for API Manager 3.2.0 by following the provided documentation.</p> </li> <li> <p>Get the Upgrading API Manager from 3.1.0 to 3.2.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Upgrade API Manager from 3.1.0 to 3.2.0 by following the provided documentation.</p> <p>Note</p> <p>In the above documentation, under Step 1 - Migrate the API Manager configurations,     skip steps 6,7,8, and 9 as we are only trying to migrate the databases at this level.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/","title":"Upgrading to WSO2 API Manager 4.0.0","text":"<p>Before you begin:</p> <p>Make sure you have upgraded your API Manager to 3.2.0 according to the Upgrading to WSO2 API Manager 3.2.0 (<code>upgrading-wso2-api-manager-320.md</code>) documentation.</p> <ol> <li>Download and install the WSO2 API Manager 4.0.0 distribution from here. </li> <li>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;APIM_HOME&gt;</code>.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/#set-up-open-banking-accelerator-and-berlin-toolkit-for-api-manager","title":"Set up Open Banking Accelerator and Berlin Toolkit for API Manager","text":"<ol> <li>Download the <code>wso2-obam-accelerator-3.0.0.zip</code> file and extract it to the <code>&lt;APIM_HOME&gt;</code> directory. </li> <li>Download the latest updates for <code>wso2-obam-accelerator-3.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;APIM_HOME&gt;/&lt;APIM_ACCELERATOR_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Download the <code>wso2-obam-toolkit-berlin-1.0.0.zip</code> file and extract it to the <code>&lt;APIM_HOME&gt;</code> directory. </p> </li> <li>Download the latest updates for <code>wso2-obam-toolkit-berlin-1.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;APIM_HOME&gt;/&lt;APIM_TOOLKIT_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Replace the existing <code>deployment.toml</code> file in the API Manager as follows:</p> <ul> <li>Go to the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2am-4.0.0-deployment-berlin.toml</code> to <code>deployment.toml</code>.</li> <li>Copy the <code>deployment.toml</code> file to the <code>&lt;APIM_HOME&gt;/repository/conf</code> directory and replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related       properties accordingly. </p> <ul> <li>When configuring database related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/#upgrading-to-wso2-api-manager-400_1","title":"Upgrading to WSO2 API Manager 4.0.0","text":"<p>Before you begin:</p> <p>Once the Identity Server 5.11.0 is configured as the Resident Key Manager, start the Identity Server 5.11.0.</p> <ol> <li> <p>Start the WSO2 API Manager 4.0.0 server and create a Custom Key Manager by following the    Configuring IS as Key Manager documentation.</p> </li> <li> <p>Do not copy any other Key Manager specific configurations from the previous API Manager version to the latest  one that points to the Identity Server.</p> </li> <li> <p>Get the Upgrading API Manager from 3.2.0 to 4.0.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Upgrade your API Manager from 3.2.0 to 4.0.0 by following the provided documentation.</p> </li> </ol> <p>Note</p> <p>When following the above-mentioned documentation:</p> <ol> <li> <p>You can skip the steps 1,2, and 3 under Step 1 - Migrate the API Manager configurations.</p> </li> <li> <p>Modify the following configurations in the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file before starting the migration.</p> </li> </ol> <pre><code>[[apim.gateway.environment]]\nname = \"Production and Sandbox\"\n[apim.sync_runtime_artifacts.gateway]\ngateway_labels =[\"Production and Sandbox\", \"Default\"]\n</code></pre> <ol> <li>In Step 2 - Upgrade API Manager to 4.0.0, skip the steps 3 and 5.</li> </ol> <ol> <li>Start the API Manager server.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/#replace-custom-mediation-policies","title":"Replace Custom Mediation Policies","text":"<p>This section explains how to replace the Custom Mediation Policy of each API with the latest Mediation Policy.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Click the Edit button under Request &gt; Message Mediation and remove the existing Custom Mediation Policy.</li> <li>Upload the relevant insequence file from the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources/apis</code> directory  and click Select.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all the APIs. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/#enable-schema-validation","title":"Enable Schema Validation","text":"<p>This section explains how to enable Schema Validation for APIs.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Enable Schema Validation.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all the APIs. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/#update-workflow-extensions","title":"Update Workflow-Extensions","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Resources &gt; Browse in the left pane.  </li> <li>Locate the <code>/_system/governance/apimgt/applicationdata/workflow-extensions.xml</code> file. </li> <li>Get the <code>workflow.txt</code> provided by the WSO2 team.</li> <li>Click Edit as text and replace the content with the content you received. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/#update-api-life-cycle","title":"Update API Life Cycle","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Extensions &gt; Lifecycles.  </li> <li>Click the View/Edit button for APILifeCycle. </li> <li>Get the <code>lifecycle.txt</code> provided by the WSO2 team.</li> <li>Replace the Lifecycle Source with the content you received.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-api-manager-400/#update-identity-provider-entity-id","title":"Update Identity Provider Entity ID","text":"<ol> <li>Go to Identity Server Management Console <code>https://&lt;IS_HOST&gt;:9446/carbon</code> and log in as the admin user.</li> <li>Select Identity Providers &gt; Resident. </li> <li>Go to Inbound Authentication Configuration &gt; OAuth2/OpenID Connect Configuration.</li> <li> <p>Update the Identity Provider Entity ID to the following:</p> <pre><code>https://&lt;IS_HOST&gt;:9446/oauth2/token\n</code></pre> <p></p> </li> <li> <p>Click Update.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-identity-server/","title":"Upgrading to WSO2 Identity Sever 5.11.0","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-identity-server/#set-up-is-5110-as-key-manager-for-api-manager-400","title":"Set up IS 5.11.0 as Key Manager for API Manager 4.0.0","text":"<ol> <li>Download and install the WSO2 Identity Server 5.11.0 distribution from here.</li> <li>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;IS_HOME&gt;</code>.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-identity-server/#set-up-open-banking-accelerator-and-berlin-toolkit-for-identity-sever","title":"Set up Open Banking Accelerator and Berlin Toolkit for Identity Sever","text":"<ol> <li>Download the <code>wso2-obiam-accelerator-3.0.0.zip</code> file and extract it to the <code>&lt;IS_HOME&gt;</code> directory.</li> <li>Download the latest updates for <code>wso2-obiam-accelerator-3.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;IS_HOME&gt;/&lt;IS_ACCELERATOR_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Download the <code>wso2-obiam-toolkit-berlin-1.0.0.zip</code> file and extract it to the <code>&lt;IS_HOME&gt;</code> directory.</p> </li> <li>Download the latest updates for <code>wso2-obiam-toolkit-berlin-1.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;IS_HOME&gt;/&lt;IS_TOOLKIT_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>To configure the Identity Server with the API Manager, download WSO2 IS Connector.</p> </li> <li> <p>Copy the following files to the given directory paths:</p> File to copy Location to <code>wso2is-extensions-1.2.10/dropins/wso2is.key.manager.core-1.2.10.jar</code> <code>&lt;IS_HOME&gt;/repository/components/dropins</code> <code>wso2is-extensions-1.2.10/dropins/wso2is.notification.event.handlers-1.2.10.jar</code> <code>&lt;IS_HOME&gt;/repository/components/dropins</code> <code>wso2is-extensions-1.2.10/webapps/keymanager-operations.war</code> <code>&lt;IS_HOME&gt;/repository/deployment/server/webapps</code> </li> <li> <p>Replace the existing <code>deployment.toml</code> file in the Identity Server as follows:</p> <ul> <li>Go to the <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2is-5.11.0-deployment-berlin.toml</code> to <code>deployment.toml</code>.</li> <li>Copy the <code>deployment.toml</code> file to the <code>&lt;IS_HOME&gt;/repository/conf</code> directory to replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-identity-server/#migrate-to-wso2-identity-sever-5110","title":"Migrate to WSO2 Identity Sever 5.11.0","text":"<ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager to 5.11.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Follow Step B - Migrate IS from 5.10.0 to 5.11.0 and upgrade your WSO2 Identity Server.</p> </li> <li> <p>Get the WSO2 Identity Server Migrating to 5.11.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Follow the provided documentation to upgrade your current IS as KM 5.10.0 distribution to IS 5.11.0.</p> <p>Note</p> <p>In the above documentation, under Steps to migrate to 5.11.0,</p> <ol> <li>Skip steps 1,2, and 4.</li> <li>Do not copy the API Manager - Key Manager specific configurations from          <code>&lt;OLD_IS_KM_HOME&gt;/repository/conf/api-manager.xml</code> of the previous IS as KM version to IS 5.11.0.</li> <li>Follow the step 10, only if you have enabled Symmetric Key Encryption in the previous IS as KM setup.          If not, skip step 10.</li> <li>Before executing the IS migration client according to Step 11, remove the following entries from          <code>migration-config.yaml</code> in the migration-resources directory:</li> </ol> <pre><code>- version: \"5.10.0\"\nmigratorConfigs:\n-\nname: \"MigrationValidator\"\norder: 2\n-\nname: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n-\nname: \"TenantPortalMigrator\"\norder: 11\n</code></pre> <p>Warning</p> <p>Based on the number of records in the identity tables, the identity component migration will take a considerable time.     Do not stop the server during the migration process. Wait until the migration process finishes completely and the server gets started.</p> </li> <li> <p>After successfully completing the migration, stop the server and remove the following directories and files.</p> <ul> <li>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file.</li> <li>Remove the <code>&lt;IS_HOME&gt;/migration-resources</code> directory.</li> </ul> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/berlin-toolkit-1.0.0/upgrading-wso2-open-banking-200-to-300/","title":"Upgrading WSO2 Open Banking from 2.0.0 to 3.0.0","text":"<p>This section guides on how to upgrade your WSO2 Open Banking 2.0.0 setup to WSO2 Open Banking 3.0.0 (Accelerator Model). </p> <p>Note</p> <p>WSO2 Open Banking 2.0.0 is based on the WSO2 API Manager 3.1.0 and WSO2 Identity Server 5.10.0 products.</p> <p>Tip</p> <p>In your Open Banking 2.0.0 database, verify the column size of the following:</p> Database Table Column Data type Size <code>openbank_apimgtdb</code> <code>SP_METADATA</code> <code>VALUE</code> <code>VARCHAR</code> 4096 <ul> <li> <p>If the column size is less than 4096, execute the following command against the <code>SP_METADATA</code> table:</p> <pre><code>ALTER TABLE SP_METADATA MODIFY VALUE VARCHAR(4096); \n</code></pre> </li> </ul> <p>The diagram below explains the flow of upgrading the WSO2 Open Banking solution:</p> <p></p> <p>Follow the topics below in the given order:</p> <ol> <li>Upgrading to WSO2 API Manager 3.2.0 (<code>upgrading-wso2-api-manager-320.md</code>)</li> <li>Upgrading to WSO2 Identity Sever 5.11.0 (<code>upgrading-wso2-identity-server.md</code>)</li> <li>Upgrading API Manager 3.2.0 to 4.0.0 (<code>upgrading-wso2-api-manager-400.md</code>)</li> <li>Migrating Open Banking Data (<code>open-banking-data-migration.md</code>)</li> <li>Configuring After Migration (<code>modifications-after-migration.md</code>)</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/","title":"Migration resources for WSO2 Open Banking 2.0.0 to 3.0.0 - CDS Toolkit 1.0.0","text":"<p>Note</p> <p>This README documentation is for internal use only.</p> <p>This directory contains the migration documentation and resources for WSO2 Open Banking 2.0.0 to 3.0.0 - CDS Toolkit 1.0.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/#migration-documentation","title":"Migration Documentation","text":"<ul> <li> <p>The documentation for WSO2 Open Banking 2.0.0 to 3.0.0 - CDS Toolkit 1.0.0 can be accessed here.</p> </li> <li> <p>The reference documentation mentioned in the WSO2 Open Banking 2.0.0 to 3.0.0 - CDS Toolkit 1.0.0 documentation can be accessed via the following links:</p> </li> </ul> Base Product Documentation File Name with GIT Location Upgrading WSO2 IS as Key Manager to 6.0.0 <code>Upgrade IS KM 5.10.0 to IS 6.0.0 for APIM 3.1.0 to 4.2.0.md</code> Migrating to 6.1.0 <code>migrate-to-610.md</code> Upgrading API Manager from 3.1.0 to 4.2.0 <code>upgrading-from-310-to-420.md</code>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/#migration-resources","title":"Migration Resources","text":"Migration Resource File Name with GIT Location Identity component migration resource <code>wso2is-migration-1.1.163.zip</code> APIM 4.2.0 DB Scripts <code>db-scripts/upgrading-from-310-to-420/</code> Latest APIM migration tool <code>wso2am-migration-4.2.0.54.zip</code> Latest OB migration tool <code>wso2-openbanking-migration-1.0.2.zip</code> <code>org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts/' folder | [</code>org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts/`](https://github.com/wso2-extensions/identity-oauth-uma/tree/master/features/org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts) <ul> <li>Additionally, all the images used in the documentation can be found here.</li> </ul>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/","title":"Upgrading WSO2 Open Banking from 2.0.0 to 3.0.0","text":"<p>This documentation guides you on how to upgrade your WSO2 Open Banking 2.0.0 for the AU setup to WSO2 Open Banking 3.0.0 (Accelerator Model) CDS Toolkit 1.0.0 with WSO2 API Manager 4.2.0 and WSO2 Identity Server 6.1.0 as the base packs.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#overview","title":"Overview","text":"<p>WSO2 Open Banking solution runs on top of WSO2 Identity Server and WSO2 API Manager which are referred to as base products.</p> <p>Given below is the product compatibility matrix for the WSO2 Open Banking solution. This matrix outlines the compatibility between the versions of WSO2 Open Banking solutions involved in this migration and the latest version of the base products they support.</p> WSO2 Open Banking Version Supported WSO2 Identity Server Version Supported WSO2 API Manager Version 2.0.0 5.10.0 3.1.0 3.0.0 6.1.0 (Latest) 4.2.0 (Latest)"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#prerequisites","title":"Prerequisites","text":"<p>We assume that you already have an existing WSO2 Open Banking 2.0.0 solution for the AU with some sample data populated in the databases. This setup will be referred to as the pre-migration setup in this documentation.</p> <p>Important:</p> <ul> <li> <p>In order to upgrade your existing Open Banking solution to the latest version, you need to upgrade the base products (WSO2 Identity Server and WSO2 API Manager) to the latest supported version as well.</p> </li> <li> <p>In addition to the base product migration, you need to configure WSO2 Identity Server as Key Manager. The Key Manager handles all clients, security, and access token-related operations. So you need to configure WSO2 Identity Server as Key Manager in each WSO2 API Manager migration.</p> </li> </ul> <p>The following link explains the flow of upgrading the WSO2 Open Banking solution:</p> <p></p> <p>Given below are the steps you need to follow to upgrade your WSO2 Open Banking 2.0.0 for the AU setup to WSO2 Open Banking 3.0.0 - CDS Toolkit 1.0.0:</p> <ol> <li>Prepare for Migration</li> <li>Upgrade IS as KM 5.10.0 to IS as KM 6.1.0</li> <li>Upgrade WSO2 API Manager 3.1.0 to WSO2 API Manager 4.2.0</li> <li>Migrate Open Banking Data</li> <li>Migrate Reporting Data (Optional)</li> <li>Post-Migration Configurations</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#1-prepare-for-migration","title":"1. Prepare for Migration","text":"<p>In the following section, you will be setting up Open Banking Accelerator and CDS Toolkit for Identity Server and API Manager.</p> <ol> <li> <p>Download WSO2 Identity Server 6.1.0 from here and extract the folder. This extracted folder will be referred to as <code>&lt;IS_HOME&gt;</code> in this document.</p> </li> <li> <p>Download WSO2 API Manager 4.2.0 from here and extract the folder. This extracted folder will be referred to as <code>&lt;APIM_HOME&gt;</code> in this document.</p> </li> <li> <p>Get WSO2 Open Banking Accelerator 3.0.0 provided by the WSO2 team.</p> </li> <li> <p>Extract the WSO2 Open Banking Accelerator zip files. Get the following accelerators and extract them.</p> <ul> <li><code>wso2-obiam-accelerator-3.0.0</code></li> <li><code>wso2-obam-accelerator-3.0.0</code></li> </ul> </li> <li> <p>Get WSO2 Open Banking CDS Toolkit 1.0.0 provided by the WSO2 team. Get the following toolkits and extract them.</p> <ul> <li><code>wso2-obiam-toolkit-cds-1.0.0</code></li> <li><code>wso2-obam-toolkit-cds-1.0.0</code></li> </ul> </li> <li> <p>This document uses the following placeholders to refer to the following products:</p> </li> </ol> Product Placeholder WSO2 Identity Server 6.1.0 <code>&lt;IS_HOME&gt;</code> WSO2 API Manager 4.2.0 <code>&lt;APIM_HOME&gt;</code> WSO2 Open Banking Identity Server Accelerator 3.0.0 <code>&lt;OB_IS_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking API Manager Accelerator 3.0.0 <code>&lt;OB_APIM_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking Identity Server CDS Toolkit 1.0.0 <code>&lt;OB_IS_TOOLKIT_HOME&gt;</code> WSO2 Open Banking API Manager CDS Toolkit 1.0.0 <code>&lt;OB_APIM_TOOLKIT_HOME&gt;</code> <ol> <li> <p>Follow the Getting WSO2 Updates documentation and update the base products, accelerators, and toolkits using relevant scripts.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_ACCELERATOR_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_ACCELERATOR_HOME&gt;/bin</code> respectively to copy the Open Banking artifacts into the base product packs.</p> </li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/bin</code> respectively:</li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li> <p>Add the relevant modifications to the <code>wso2is-6.0.0-deployment-cds.toml</code> file in the <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/repository/resources</code> directory.</p> </li> <li> <p>Rename <code>wso2is-6.0.0-deployment-cds.toml</code> to <code>deployment.toml</code>.</p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;IS_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> <ul> <li>When configuring database related properties, ensure that the datasource are pointing to the existing databases.</li> </ul> </li> <li> <p>Add the relevant modifications to the <code>wso2am-4.2.0-deployment-cds.toml</code> file in the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources</code> directory.</p> </li> <li> <p>Rename <code>wso2am-4.2.0-deployment-cds.toml</code> to <code>deployment.toml</code>.</p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;APIM_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> <ul> <li>When configuring database related properties, ensure that the datasource are pointing to the existing databases.</li> </ul> </li> <li> <p>Add the following configurations needed for Identity Server 6.1.0 and API Manager 4.2.0.</p> <ol> <li> <p>Add the following configuration in Identity Server 6.1.0 <code>deployment.toml</code> file.</p> <pre><code>[application_mgt]\nenable_role_validation = true\n</code></pre> </li> <li> <p>Add the following configuration in the <code>deployment.toml</code> file of API Manager 4.2.0 after the configurations done under <code>[open_banking.dcr]</code>. Note that the version must be specified as <code>v3</code> for API Manager 4.2.0.</p> <pre><code>[open_banking.dcr.apim_rest_endpoints]\napp_creation = \"api/am/devportal/v3/applications\"\nkey_generation = \"api/am/devportal/v3/applications/application-id/map-keys\"\napi_retrieve = \"api/am/devportal/v3/apis\"\napi_subscribe = \"api/am/devportal/v3/subscriptions/multiple\"\nretrieve_subscribe=\"api/am/devportal/v3/subscriptions\u201d\n</code></pre> </li> </ol> </li> <li> <p>Now all the Open Banking related artifacts and configurations are included in the base packs.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#2-migrating-wso2-is-as-key-manager-from-identity-server-5100-to-610","title":"2. Migrating WSO2 IS as Key Manager from Identity Server 5.10.0 to 6.1.0","text":"<ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager to 6.0.0 (<code>Upgrade IS KM 5.10.0 to IS 6.0.0 for APIM 3.1.0 to 4.2.0.md</code>) documentation provided by the WSO2 team. This will instruct you to upgrade your IS as Key Manager 5.10.0 to IS 6.1.0. Take note of the essential points provided below while following the instructions in the documentation.</p> <p>Important</p> <p>Please note that the information contained in the above-mentioned documentation is also applicable for WSO2 Identity Server 6.1.0.</p> </li> <li> <p>Follow Step A: Upgrade IS as Key Manager 5.10.0 to IS 6.0.0 in the above-mentioned documentation. Follow all the steps and make sure to perform the necessary steps mentioned below:</p> <p>Note</p> <p>Refer to the Migrating to 6.1.0 (<code>migrate-to-610.md</code>) documentation when following the step 5 under Step 1: Migrate the IS as KM configurations.</p> </li> <li> <p>When following Step 2: Migrate the IS as KM Resources, download the WSO2 IS Connector for API Manager 4.2.0 from here. Extract the folder (<code>wso2is-extensions-1.6.8.zip</code>) and get the relevant JAR files and WAR file. </p> </li> <li> <p>When following Step 3: Migrate the IS as KM Components, use the <code>wso2is-migration-1.1.163.zip</code> folder as the identity component migration resource.</p> </li> <li> <p>Following the Step A: Upgrade IS as Key Manager 5.10.0 to IS 6.0.0 in the above-mentioned documentation with the above instructions, concludes the WSO2 IS as Key Manager from Identity Server 5.10.0 to 6.1.0 migration.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#3-migrating-wso2-api-manager-from-310-to-420","title":"3. Migrating WSO2 API Manager from 3.1.0 to 4.2.0","text":"<ol> <li> <p>Get the Upgrading API Manager from 3.1.0 to 4.2.0 (<code>upgrading-from-310-to-420.md</code>) documentation provided by the WSO2 team. This will instruct you to upgrade your API-M environment from 3.1.0 to 4.2.0. Take note of the essential points provided below while following the instructions in the documentation.</p> </li> <li> <p>When following Step 1: Migrate the API Manager Configurations, use the DB scripts (<code>db-scripts/upgrading-from-310-to-420</code>) provided by the WSO2 team.</p> </li> <li> <p>Skip the guidelines under Step 3: Migrate the Identity Components as you have already done this in Step 3 of Step A: Upgrade IS as Key Manager 5.10.0 to IS 6.0.0.</p> </li> <li> <p>When following Step 4: Migrate the API Manager Components, use the provided API Manager Migration resources (<code>wso2am-migration-4.2.0.54.zip</code>).</p> </li> <li> <p>Before starting the API Manager 4.2.0 server for the first time in Step 6 under Step 6: Restart the WSO2 API Manager 4.2.0 Server, make sure you have already started WSO2 Identity Server 6.1.0.</p> </li> <li> <p>Following the above-mentioned documentation with the above instructions, concludes the WSO2 API Manager migration.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#4-migrating-open-banking-data","title":"4. Migrating Open Banking Data","text":"<p>In this step, you will transfer your Open Banking data from your existing Open Banking 2.0.0 platform to the new WSO2 Open Banking 3.0.0 platform. This process includes moving important information such as customer accounts, transactions, and permissions.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#prerequisites_1","title":"Prerequisites","text":"<p>Make sure the following:</p> <ul> <li> <p>In your Open Banking 2.0.0 database, check the column size of the following:</p> Database Table Column Data type Size <code>openbank_apimgtdb</code> <code>SP_METADATA</code> <code>VALUE</code> <code>VARCHAR</code> 4096 <ul> <li> <p>If the column size is less than 4096, execute the following command against the <code>SP_METADATA</code> table:</p> <pre><code>ALTER TABLE SP_METADATA MODIFY VALUE VARCHAR(4096);\n</code></pre> </li> </ul> </li> </ul> <p>Note: </p> <p>Please read the following section before proceeding with the migration:</p> <ul> <li> <p>The <code>SPMigrator</code> migrates the Dynamic Client Registration related data.</p> <pre><code> ```\n - \n   name: \"SPMigrator\"\n   spec: \"AU\"\n   order: 3\n   parameters:\n     schema: \"ob\"\n ```\n</code></pre> </li> <li> <p>The default <code>common-auth-script.js</code> (the adaptive authentication script of service provider applications) that was provided in Open Banking 2.0.0 is not supported in Open Banking 3.0.0. Therefore, the migration tool is configured to automatically update the <code>common-auth-script</code> file of all service provider apps to the format which is supported in Open Banking 3.0.0.</p> <ul> <li>This default script supported in Open Banking 3.0.0 is available in the <code>common-auth-script.js</code> file placed at the <code>openbanking-migration-resources/common-auth-scripts/AU</code> directory.</li> <li>Make sure to change the content of the file appropriately if you have used a customized adaptive authentication script for all the service provider applications in your Open Banking 2.0.0 setup and that logic will not be supported directly in Open Banking 3.0.0.</li> <li>If you can assure that the customized adaptive authentication logic used in Open Banking 2.0.0 is supported in Open Banking 3.0.0 without any modifications, you can skip this step during the migration by setting the <code>commonAuthScriptUpdateEnable</code> parameter under the relevant spec version of the <code>SPMigrator</code> to <code>false</code> in <code>migration-config.yaml</code>. Otherwise, it should be <code>true</code>.       <code>-      name: \"SPMigrator\"      spec: \"AU\"      order: 3      parameters:      schema: \"ob\"      commonAuthScriptUpdateEnable: \"false\"</code></li> <li>If you have configured different adaptive authentication logics for service provider applications, the migration-tool does not support the automated update.</li> <li>In this case also, the <code>commonAuthScriptUpdateEnable</code> parameter under the relevant spec version of the SPMigrator should be set to false in <code>migration-config.yaml</code> before starting the OB-migration process as shown above.</li> </ul> <p>Note:</p> <ul> <li>If any update is required, the adaptive authentication logic of each service provider should be updated manually based on your customizations via the carbon console once the entire migration process is concluded.</li> </ul> </li> <li> <p>If Business Nominated Representative feature was enabled in OB2, Uncomment and enable the following migrator,</p> </li> </ul> <p><pre><code>    name: \"BNRMigrator\"\n    spec: \"AU\"\n    order: 1\n    parameters:\n    schema: \"ob\"\n</code></pre> - If Disclosure Options Management feature was enabled in OB2, Uncomment and enable the following migrator,</p> <p><pre><code>    name: \"DOMSMigrator\"\n    spec: \"AU\"\n    order: 1\n    parameters:\n    schema: \"ob\"\n</code></pre> - If Secondary User feature was enabled in OB2, Uncomment and enable the following migrator.</p> <pre><code>    name: \"SecondaryUsersMigrator\"\n    spec: \"AU\"\n    order: 1\n    parameters:\n    schema: \"ob\"\n    ceasing_secondary_user_sharing_enabled: \"false\u201d\n</code></pre> <p>Note:</p> <ul> <li>If the <code>Ceasing Secondary User Sharing</code> feature was enabled in the OB2, make the <code>ceasing_secondary_user_sharing_enabled</code> field to <code>true</code>. Otherwise, need to set it to <code>false</code>.</li> </ul> <p><pre><code>- To migrate consent history data, enable the \"consent_history_enabled\" parameter.\n</code></pre>     name: \"ConsentMigrator\"     spec: \"AU\"     order: 1     parameters:     schema: \"ob\"     token_expiry_time: \"84600\"     expired_custom_status: \"Expired\"     consent_history_enabled: \"true\" ```</p> <p>Before you begin:</p> <p>Back up all the databases before performing the migration.</p> <ol> <li> <p>To create the required database tables:</p> <ul> <li>Run the relevant SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent</code> directory against the <code>openbank_openbankingdb</code> database.</li> <li>Create <code>OB_ACCOUNT_METADATA</code> table by running the SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/account-metadata</code> directory against the <code>openbank_openbankingdb</code> database. </li> <li>Create <code>OB_CONSENT_HISTORY</code> table by running the SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent-history</code> directory against the <code>openbank_openbankingdb</code> database.</li> </ul> </li> <li> <p>Open the <code>&lt;AM_HOME&gt;/repository/conf/deployment.toml</code> file and set the following config to false before executing the OB migration tool.     <pre><code>   [open_banking_cds.metrics.aggregation_job]\n    enabled = false\n</code></pre></p> </li> <li> <p>Get the WSO2 Open Banking Migration Client Tool v1.0.2 (<code>wso2-openbanking-migration-1.0.2.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Copy the <code>wso2-openbanking-migration-1.0.2/openbanking-migration-resources</code> directory to <code>&lt;IS_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>wso2-openbanking-migration-1.0.2/dropins/com.wso2.openbanking.migration-1.0.2.jar</code> file to <code>&lt;IS_HOME&gt;/repository/components/dropins</code>.</p> </li> <li> <p>Open the <code>wso2-openbanking-migration-1.0.2/openbanking-migration-resources/migration-config.yaml</code> file and set the <code>migrationEnable</code> property to <code>true</code>.</p> </li> <li> <p>Start the Identity Server with the following command:</p> <pre><code>   sh wso2server.sh -DobMigrationSpec=AU\n</code></pre> </li> <li> <p>Stop the server.</p> </li> </ol> <p>Warning</p> <p>If a failure occurred during the migration process, delete all the migrated data from the tables that    were generated during migration.</p> <ol> <li> <p>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/com.wso2.openbanking.migration-1.0.2.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;IS_HOME&gt;/openbanking-migration-resources</code> directory.</p> </li> <li> <p>Open the <code>&lt;AM_HOME&gt;/repository/conf/deployment.toml</code> file and set the following config to true before executing the OB migration tool.    <pre><code>   [open_banking_cds.metrics.aggregation_job]\n    enabled = true\n</code></pre></p> </li> <li> <p>Start the Identity Server and API Manager servers.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#5-migrating-reporting-data","title":"5. Migrating Reporting Data","text":"<p>In this step, you will transfer data from your existing reporting system to the new WSO2 Open Banking platform. This will involve moving data related to reports, dashboards, and visualizations.</p> <p>Note:</p> <p>Follow this step only if you are using WSO2 Open Banking Business Intelligence with your existing WSO2 Open Banking 2.0.0 setup.</p> <ol> <li>Stop the WSO2 Open Banking Business Intelligence 2.0.0 server if it is running.</li> <li>Download and install the WSO2 Streaming Integrator 4.2.0 distribution from here.</li> <li>Backup your <code>openbank_ob_reporting_statsdb</code> and <code>openbank_ob_reporting_summarizeddb</code> databases of your WSO2 Open Banking Business Intelligence 2.0.0 setup.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#set-up-open-banking-accelerator-and-cds-toolkit-for-streaming-integrator","title":"Set up Open Banking Accelerator and CDS Toolkit for Streaming Integrator","text":"<p>Set up WSO2 Open Banking Business Intelligence Accelerator and WSO2 Open Banking Business Intelligence CDS Toolkit as follows:</p> <p>Note</p> <ul> <li><code>&lt;SI_HOME&gt;</code> refers to the root directory of WSO2 Streaming Integrator.</li> <li><code>&lt;OB_BI_ACCELERATOR_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence Accelerator.</li> <li><code>&lt;OB_BI_TOOLKIT_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence CDS Toolkit.</li> </ul> <ol> <li> <p>Copy and extract the <code>wso2-obbi-accelerator-3.0.0.zip</code> accelerator file in the root directory of WSO2 Streaming    Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/bin</code>:</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Copy and extract the <code>wso2-obbi-toolkit-cds-1.0.0.zip</code> toolkit file in the root directory of WSO2 Streaming    Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_TOOLKIT_HOME&gt;/bin</code>.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Replace the existing <code>deployment.yaml</code> file in the Streaming Integrator as follows:</p> <ul> <li>Go to the <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2si-4.2.0-deployment.yaml</code> to <code>deployment.yaml</code>.</li> <li>Copy the <code>deployment.yaml</code> file to the <code>&lt;SI_HOME&gt;/conf/server</code> directory to replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;SI_HOME&gt;/conf/server/deployment.toml</code> file, and configure the hostnames and databases related    properties accordingly.</p> <ul> <li>When configuring database-related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> <li> <p>Exchange the public certificates between servers.</p> </li> </ol> <p>Follow the steps given below:</p> <p>a. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and export the public certificate of the Streaming    Integrator:</p> <p><code>shell     &gt;   keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeySI.pem     &gt;</code></p> <p>b. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and import the public certificate of the    Streaming Integrator to the truststore of the Identity Server:</p> <p><code>shell     &gt;   keytool -import -alias wso2 -file publickeySI.pem -keystore client-truststore.jks -storepass wso2carbon     &gt;</code></p> <p>c. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and export the public certificate of the    Identity Server:</p> <p><code>shell     &gt;    keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeyIAM.pem     &gt;</code></p> <p>d. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and import the public certificate of the Identity    Server to the truststore of the Streaming Integrator:</p> <p><code>shell     &gt;    keytool -import -alias wso2 -file publickeyIAM.pem -keystore client-truststore.jks -storepass wso2carbon     &gt;</code></p> <p>e. Go to the <code>&lt;APIM_HOME&gt;/repository/resources/security</code> directory and repeat step b,c, and d.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#upgrade-to-wso2-streaming-integrator-420","title":"Upgrade to WSO2 Streaming Integrator 4.2.0","text":"<p>To migrate the reporting data and tables from the Open Banking 2.0 setup to 3.0.</p> <ol> <li> <p>Go to the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/reporting-migration-scripts/au</code> directory.</p> </li> <li> <p>Open the <code>configure.properties</code> file and configure the following.</p> <ul> <li>Databases-related properties and database names</li> <li>Access token encryption configurations</li> </ul> </li> </ol> <p>Tip</p> <p>Your existing access token encryption configurations are available in    the <code>&lt;WSO2_OB2_IAM_HOME&gt;/repository/conf/finance/open-banking.xml</code> file,    under the <code>&lt;BIServer&gt; &lt;Reporting&gt; &lt;TokenEncryption&gt;</code> tags.</p> <ol> <li> <p>Run the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/reporting-migration-scripts/au/migrate.sh</code>    script.</p> <pre><code>./migrate.sh\n</code></pre> </li> </ol> <p>Only for Oracle Databases:</p> <p>Execute the <code>openbanking-migration-resources/reporting-migration-scripts/au/reporting-oracle-2.0.0_to_3.0.0_runtime.sql</code>    script in against your <code>openbank_ob_reporting_statsdb</code> database.</p> <p>Tip</p> <p>You may drop the following tables of <code>OB_REPORTING_DB</code> as they are not required for Open Banking 3.0:</p> <pre><code>- `AUTHENTICATION_RAW_DATA`\n- `CDS_SESSION_RAW_DATA`\n- `ACCESS_TOKEN_RAW_DATA`\n- `APP_REG_RAW_DATA`\n</code></pre> <ol> <li>Start the Streaming Integrator and try out publishing data.    For more information, see Try Out Data Publishing.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#6-post-migration-scripts","title":"6. Post-Migration Scripts","text":"<p>This section includes the database scripts that need to be performed after the upgrade/migration process.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#update-sp-metadata","title":"Update SP Metadata","text":"<ol> <li> <p>Stop the servers if running.</p> </li> <li> <p>Locate the <code>sp_metadata_migration_mysql.sql</code> script found here </p> </li> <li> <p>Run the script against the migrated <code>openbank_apimgtdb</code> database.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-cds-toolkit-1.0.0/#7-post-migration-configurations","title":"7. Post-Migration Configurations","text":"<p>This section explains the modifications that need to be performed after the upgrade/migration process.</p> <ol> <li> <p>Stop the servers if running.</p> </li> <li> <p>Remove <code>com.wso2.openbanking.migration-1.0.2.jar</code> from the <code>IS_HOME&gt;/repository/components/dropins</code> folder.</p> </li> <li> <p>Remove <code>openbanking-migration-resources</code> folder from the <code>&lt;IS_HOME&gt;/repository/components/dropins</code> folder.</p> </li> </ol> <p>Note:</p> <p>Make sure to perform the following changes before starting with the Open Banking flows: 1. Redeploy the APIs with the relevant insequence files supported in WSO2 Open Banking 3.0.0 CDS Toolkit 1.0.0.   - <code>Dynamic Client Registration API</code>     - Update the insequence file and the Production/Sandbox Endpoints of DCR API with cds toolkit's DCR insequence file and endpoint by referring to the steps in dynamic-client-registration-flow   - <code>Administration API</code>     - Update the insequence file and the Production/Sandbox Endpoints of Admin API with cds toolkit's CDSAdminAPI insequence file and endpoint by referring to the steps in admin-api   - <code>Account and Transaction flow</code>     - Update the API Definition of the ConsumerDataStandards API with cds toolkit's CDSBanking swagger file in //repository/resources/apis/consumerdatastandards.org.au/CDSBanking/1.25.0/consumer-data-standards-banking-1.25.0.yaml directory.     - Update the insequence file and the Production/Sandbox Endpoints of CDSBanking with cds toolkit's CDSBanking insequence file and endpoint by referring to the steps in account-and-transaction-flow   - <code>CDR Arrangement Revocation API</code>     - Remove the current insequence file in CDR Arrangement Revocation API.     - Use the left menu panel and go to API Configurations &gt; Endpoints.     - Add <code>HTTP/REST Endpoint</code> and set URL as <code>https://&lt;IS_HOST&gt;:9446/api/openbanking/cds-arrangement-revocation/arrangements</code> by referring to the steps in arrangement-revocation-api-flow   - <code>Consumer Data Standards Common API</code>     - Create and Publish Consumer Data Standards Common API by referring API publish steps in deploying-consumer-data-standards-api.     - Use swagger and insequence files in //repository/resources/apis/consumerdatastandards.org.au/CDSCommon/1.25.0 directory to create the CDSCommon API.     - Update the Production/Sandbox Endpoints of Common API by referring the README.md file in //repository/resources/apis/consumerdatastandards.org.au/CDSCommon/1.25.0 directory.  <ul> <li>Follow the Quick Start Guide - Tryout Flow of the CDS Toolkit 1.0.0 documentation for a sample tryout flow of the Account and Transaction API.</li> <li>Navigate to the Tryout section in the CDS Toolkit 1.0.0 documentation for more information on API flows.</li> </ul> <ol> <li> <p>Sign in to the Identity Server Management Console.</p> </li> <li> <p>Navigate to Identity Providers \u2192 Resident \u2192 Inbound Authentication Configuration \u2192 OAuth2/OpenID Connect Configuration \u2192 Identity Provider Entity ID.</p> </li> <li> <p>Change the Identity Provider Entity ID value from <code>https://localhost:8243/token</code> to <code>https://localhost:9446/oauth2/token</code>.</p> </li> <li> <p>If the <code>urn:ietf:params:oauth:grant-type:uma-ticket</code> grant type was used in the Open Banking 2 setup, follow the below instructions to configure User Managed Access with WSO2 Identity Server:</p> <p>WSO2 Identity Server (WSO2 IS) supports the UMA 2.0 protocol, which allows a resource owner to easily share resources with other requesting parties. To use UMA with WSO2 Identity Server, first you need to configure the authenticator with WSO2 Identity Server.</p> <p>You can either download the UMA artifacts or build the authenticator from the source code by following the steps given below. 1. Download the UMA connector and other required artifacts from the WSO2 store. 2. Add the following <code>.jar</code> files to the <code>&lt;IS_HOME&gt;/repository/components/dropins</code> directory.</p> <p><code>org.wso2.carbon.identity.oauth.uma.common-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.grant-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.permission.service-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.resource.service-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.xacml.extension-x.x.x.jar</code> 3. Add the following <code>.war</code> files to the <code>&lt;IS_HOME&gt;/repository/deployment/server/webapps</code> directory.  <code>api#identity#oauth2#uma#resourceregistration#v_.war    api#identity#oauth2#uma#permission#v_.war</code> 4. Get the <code>org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts/</code> folder provided by the WSO2 team. 5. Run the corresponding db script from the above-mentioned folder.  6. Start/ Restart WSO2 Identity Server. 7. Stop WSO2 Identity Server if it is already running. 8. Add the below configuration to the <code>&lt;IS-Home&gt;/repository/conf/deployment.toml</code> file.  ```toml  [[oauth.custom_grant_type]]  name = \"urn:ietf:params:oauth:grant-type:uma-ticket\"  grant_handler = \"org.wso2.carbon.identity.oauth.uma.grant.UMA2GrantHandler\"  grant_validator = \"org.wso2.carbon.identity.oauth.uma.grant.GrantValidator\"</p> <p>[[resource.access_control]]  context = \"(.)/api/identity/oauth2/uma/resourceregistration/v1.0/(.)\"  secure = \"true\"  http_method = \"all\"</p> <p>[[resource.access_control]]  context = \"(.)/api/identity/oauth2/uma/permission/v1.0/(.)\"  secure = \"true\"  http_method = \"all\"    ``` 8. Start/ Restart WSO2 Identity Server.</p> </li> <li> <p>If the throttling policy configured, update the siddhi query and context according to the query provided in    wso2ob-apim-toolkit-cds-1.0.0.53-SNAPSHOT/repository/resources/throttling-policies folder.</p> </li> <li> <p>Follow the Step 2: Configure IS as Key Manager to configure IS as Key Manager.</p> </li> </ol> <p>Note:</p> <p>Make sure to update the AM_APPLICATION_KEY_MAPPING table after creating the Key Manager.  : 1. Retrieve UUID of the Key Manager. For that go to the Key Manager overview and locate the alphanumeric string at the end of the URL.</p> <p><code>https://&lt;AM_HOST&gt;:9443/admin/settings/key-managers/&lt;UUID&gt;</code> 2. Update Key Manager UUID in AM_APPLICATION_KEY_MAPPING table.</p> <p><code>UPDATE AM_APPLICATION_KEY_MAPPING SET KEY_MANAGER  = '&lt;UUID&gt;' WHERE APPLICATION_ID IN (SELECT APPLICATION_ID FROM AM_APPLICATION WHERE ORGANIZATION=\"&lt;tenantdomain&gt;\");</code></p> <ol> <li> <p>Restart the WSO2 Identity Server.</p> </li> <li> <p>Restart the WSO2 API Manager Server.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/","title":"Migration resources for WSO2 Open Banking 2.0.0 to 3.0.0 - CDS Toolkit 1.0.0","text":"<p>This directory contains the migration documentation and resources for WSO2 Open Banking 2.0.0 to 3.0.0 - CDS Toolkit 1.0.0.</p> <p>The migration resources required for WSO2 Open Banking 2.0.0 to 3.0.0 - CDS Toolkit 1.0.0 can be found here.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/modifications-after-migration/","title":"Modifications After Migration","text":"<p>This page explains the modifications that need to be performed after the upgrade/migration process.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/modifications-after-migration/#open-banking-internal-scopes","title":"Open Banking Internal Scopes","text":"<p>Configure open banking internal scopes as follows:</p> <ol> <li> <p>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file.</p> </li> <li> <p>Make sure the allowed scopes list contain the following: </p> <pre><code>[oauth]\nallowed_scopes = [\"OB_.*\", \"profile\"]\n</code></pre> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/open-banking-data-migration/","title":"Open Banking Data Migration","text":"<p>Before you begin:</p> <p>Back up all the databases before performing the migration.</p> <ol> <li>To create the required database tables:<ul> <li>Run the relevant SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent</code> directory against   the <code>openbank_openbankingdb</code> database.</li> <li>If you have enabled the Consent Amendment History feature in your OB 2.0 setup, run the relevant SQL script in the    <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent-history</code> directory against the <code>openbank_openbankingdb</code> database.</li> </ul> </li> <li>Get the WSO2 Open Banking Migration Client Tool v1.0.0 (<code>wso2-openbanking-migration-1.0.0.zip</code>) provided by the WSO2 team.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources</code> directory to <code>&lt;IS_HOME&gt;</code>.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file to <code>&lt;IS_HOME&gt;/repository/components/dropins</code>.</li> <li> <p>Open the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/migration-config.yaml</code> file and    set the <code>migrationEnable</code> property to <code>true</code>.</p> <p>If you have enabled the Consent Amendment History feature in your OB 2.0 setup:</p> <p>Enable migrating the Consent History data in <code>migration-config.yaml</code> as follows:</p> <ul> <li>Locate the <code>ConsentMigrator</code> tag for <code>spec: \"AU\"</code> </li> <li>Set <code>consent_history_enabled</code> to <code>true</code></li> </ul> <pre><code>      -\n        name: \"ConsentMigrator\"\n        spec: \"AU\"\n        order: 1\n        parameters:\n          schema: \"ob\"\n          token_expiry_time: \"84600\"\n          expired_custom_status: \"Expired\"\n          consent_history_enabled: \"true\"\n</code></pre> </li> <li> <p>Start the Identity Server with the following command:</p> <pre><code>   sh wso2server.sh -DobMigrationSpec=AU\n</code></pre> </li> <li> <p>Stop the server.</p> <p>Warning</p> <p>If a failure occurred during the migration process, delete all the migrated data from the tables that      were generated during migration.</p> </li> <li> <p>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file.</p> </li> <li>Remove the <code>&lt;IS_HOME&gt;/openbanking-migration-resources</code> directory.</li> <li>Start the Identity Server and API Manager servers.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/reporting-data-migration/","title":"Reporting Data Migration","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/reporting-data-migration/#prerequisite","title":"Prerequisite","text":"<ol> <li>Stop the WSO2 Open Banking Business Intelligence 2.0.0 server if it is running.</li> <li>Download and install the WSO2 Streaming Integrator 4.0.0 distribution from here.</li> <li>Backup your <code>openbank_ob_reporting_statsdb</code> and <code>openbank_ob_reporting_summarizeddb</code> databases of your WSO2 Open Banking Business Intelligence 2.0.0 setup. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/reporting-data-migration/#set-up-open-banking-accelerator-and-cds-toolkit-for-streaming-integrator","title":"Set up Open Banking Accelerator and CDS Toolkit for Streaming Integrator","text":"<p>Set up WSO2 Open Banking Business Intelligence Accelerator and WSO2 Open Banking Business Intelligence CDS Toolkit  as follows:</p> <p>Note</p> <ul> <li><code>&lt;SI_HOME&gt;</code> refers to the root directory of WSO2 Streaming Integrator.</li> <li><code>&lt;OB_BI_ACCELERATOR_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence Accelerator.</li> <li><code>&lt;OB_BI_TOOLKIT_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence CDS Toolkit.</li> </ul> <ol> <li> <p>Copy and extract the <code>wso2-obbi-accelerator-3.0.0.zip</code> accelerator file in the root directory of WSO2 Streaming     Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/bin</code>:</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Copy and extract the <code>wso2-obbi-toolkit-cds-1.0.0.zip</code> toolkit file in the root directory of WSO2 Streaming     Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_TOOLKIT_HOME&gt;/bin</code>. </p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Replace the existing <code>deployment.yaml</code> file in the Streaming Integrator as follows:</p> <ul> <li>Go to the <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2si-4.0.0-deployment.yaml</code> to <code>deployment.yaml</code>.</li> <li>Copy the <code>deployment.yaml</code> file to the <code>&lt;SI_HOME&gt;/conf/server</code> directory to replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;SI_HOME&gt;/conf/server/deployment.toml</code> file, and configure the hostnames and databases related    properties accordingly.     </p> <ul> <li>When configuring database-related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> <li> <p>Exchange the public certificates between servers. </p> <p>Follow the steps given below:</p> <p>a. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and export the public certificate of the Streaming         Integrator:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeySI.pem\n</code></pre> <p>b. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and import the public certificate of the         Streaming Integrator to the truststore of the Identity Server:</p> <pre><code>keytool -import -alias wso2 -file publickeySI.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>c. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and export the public certificate of the         Identity Server:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeyIAM.pem\n</code></pre> <p>d. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and import the public certificate of the Identity         Server to the truststore of the Streaming Integrator:</p> <pre><code>keytool -import -alias wso2 -file publickeyIAM.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>e. Go to the <code>&lt;APIM_HOME&gt;/repository/resources/security</code> directory and repeat step b,c, and d.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/reporting-data-migration/#upgrade-to-wso2-streaming-integrator-400","title":"Upgrade to WSO2 Streaming Integrator 4.0.0","text":"<p>To migrate the reporting data and tables from the Open Banking 2.0 setup to 3.0.</p> <ol> <li> <p>Go to the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/reporting-migration-scripts/au</code> directory.</p> </li> <li> <p>Open the <code>configure.properties</code> file and configure the following.</p> <ul> <li>Databases-related properties and database names</li> <li>Access token encryption configurations</li> </ul> <p>Tip</p> <p>Your existing access token encryption configurations are available in      the <code>&lt;WSO2_OB2_IAM_HOME&gt;/repository/conf/finance/open-banking.xml</code> file,     under the <code>&lt;BIServer&gt; &lt;Reporting&gt; &lt;TokenEncryption&gt;</code> tags.</p> </li> <li> <p>Run the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/reporting-migration-scripts/au/migrate.sh</code>    script.</p> <pre><code>./migrate.sh\n</code></pre> <p>Only for Oracle Databases:</p> <p>Execute the <code>openbanking-migration-resources/reporting-migration-scripts/au/reporting-oracle-2.0.0_to_3.0.0_runtime.sql</code>      script in against your <code>openbank_ob_reporting_statsdb</code> database.</p> <p>Tip</p> <p>You may drop the following tables of <code>OB_REPORTING_DB</code> as they are not required for Open Banking 3.0:</p> <pre><code>- `AUTHENTICATION_RAW_DATA`\n- `CDS_SESSION_RAW_DATA`\n- `ACCESS_TOKEN_RAW_DATA`\n- `APP_REG_RAW_DATA`\n</code></pre> </li> <li> <p>Start the Streaming Integrator and try out publishing data.     For more information, see Try Out Data Publishing.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-320/","title":"Upgrading to WSO2 API Manager 3.2.0","text":"<p>WSO2 API Manager 3.1.0 is a base product of WSO2 Open Banking 2.0. This section instructs you on how to upgrade the API Manager to 3.2.0, which is a prerequisite for upgrading to API Manager 4.0.</p> <ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager documentation provided by the WSO2 team.</p> </li> <li> <p>Upgrade IS as Key Manager 5.10.0 for API Manager 3.2.0 by following the provided documentation.</p> </li> <li> <p>Get the Upgrading API Manager from 3.1.0 to 3.2.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Upgrade API Manager from 3.1.0 to 3.2.0 by following the provided documentation.</p> <p>Note</p> <p>In the above documentation, under Step 1 - Migrate the API Manager configurations, skip steps 6,7,8, and 9 as we are only trying to migrate the databases at this level.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/","title":"Upgrading to WSO2 API Manager 4.0.0","text":"<p>Before you begin:</p> <p>Make sure you have upgraded your API Manager to 3.2.0 according to the Upgrading to WSO2 API Manager 3.2.0 (<code>upgrading-wso2-api-manager-320.md</code>) documentation.</p> <ol> <li>Download and install the WSO2 API Manager 4.0.0 distribution from here. </li> <li>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;APIM_HOME&gt;</code>.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#set-up-open-banking-accelerator-and-cds-toolkit-for-api-manager","title":"Set up Open Banking Accelerator and CDS Toolkit for API Manager","text":"<ol> <li>Download the <code>wso2-obam-accelerator-3.0.0.zip</code> file and extract it to the <code>&lt;APIM_HOME&gt;</code> directory. </li> <li>Download the latest updates for <code>wso2-obam-accelerator-3.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;APIM_HOME&gt;/&lt;APIM_ACCELERATOR_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Download the <code>wso2-obam-toolkit-cds-1.0.0.zip</code> file and extract it to the <code>&lt;APIM_HOME&gt;</code> directory. </p> </li> <li>Download the latest updates for <code>wso2-obam-toolkit-cds-1.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;APIM_HOME&gt;/&lt;APIM_TOOLKIT_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Replace the existing <code>deployment.toml</code> file in the API Manager as follows:</p> <ul> <li>Go to the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2am-4.0.0-deployment-cds.toml</code> to <code>deployment.toml</code>.</li> <li>Copy the <code>deployment.toml</code> file to the <code>&lt;APIM_HOME&gt;/repository/conf</code> directory and replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related       properties accordingly. </p> <ul> <li>When configuring database related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#upgrading-to-wso2-api-manager-400_1","title":"Upgrading to WSO2 API Manager 4.0.0","text":"<p>Before you begin:</p> <p>Once the Identity Server 5.11.0 is configured as the Resident Key Manager, start the Identity Server 5.11.0.</p> <ol> <li> <p>Start the WSO2 API Manager 4.0.0 server and create a Custom Key Manager by following the    Configuring IS as Key Manager documentation.</p> </li> <li> <p>Do not copy any other Key Manager specific configurations from the previous API Manager version to the latest  one that points to the Identity Server.</p> </li> <li> <p>Get the Upgrading API Manager from 3.2.0 to 4.0.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Upgrade your API Manager from 3.2.0 to 4.0.0 by following the provided documentation.</p> <p>Note</p> <p>When following the above mentioned documentation:</p> <ol> <li> <p>You can skip the steps 1,2, and 3 under Step 1 - Migrate the API Manager configurations.</p> </li> <li> <p>Modify the following configurations in the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file before starting the migration.</p> <pre><code>[[apim.gateway.environment]]\nname = \"Production and Sandbox\"\n[apim.sync_runtime_artifacts.gateway]\ngateway_labels =[\"Production and Sandbox\", \"Default\"]\n</code></pre> </li> <li> <p>In Step 2 - Upgrade API Manager to 4.0.0, skip the steps 3 and 5.</p> </li> </ol> </li> <li> <p>Start the API Manager server.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#update-api-endpoints-custom-mediation-policies","title":"Update API Endpoints Custom Mediation Policies","text":"<p>This section explains how to update the API Endpoint of each API.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Endpoints.</li> <li>Update the endpoints according to the  Summarized information for configuring APIs section. For more information, refer to the deployment steps of each API. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#replace-custom-mediation-policies","title":"Replace Custom Mediation Policies","text":"<p>This section explains how to replace the Custom Mediation Policy of each API with the latest Mediation Policy.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Click the Edit button under Request &gt; Message Mediation and remove the existing Custom Mediation Policy.</li> <li>Upload the relevant insequence file from the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources/apis</code> directory  and click Select.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all APIs. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#enable-schema-validation","title":"Enable Schema Validation","text":"<p>This section explains how to enable Schema Validation for APIs.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Enable Schema Validation.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all APIs except for the Dynamic Client Registration(DCR) API. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#update-workflow-extensions","title":"Update Workflow-Extensions","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Resources &gt; Browse in the left pane.  </li> <li>Locate the <code>/_system/governance/apimgt/applicationdata/workflow-extensions.xml</code> file. </li> <li>Get the <code>workflow.txt</code> provided by the WSO2 team.</li> <li>Click Edit as text and replace the content with the content you received. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#update-api-life-cycle","title":"Update API Life Cycle","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Extensions &gt; Lifecycles.  </li> <li>Click the View/Edit button for APILifeCycle. </li> <li>Get the <code>lifecycle.txt</code> provided by the WSO2 team.</li> <li>Replace the Lifecycle Source with the content you received.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-api-manager-400/#update-identity-provider-entity-id","title":"Update Identity Provider Entity ID","text":"<ol> <li>Go to Identity Server Management Console <code>https://&lt;IS_HOST&gt;:9446/carbon</code> and log in as the admin user.</li> <li>Select Identity Providers &gt; Resident. </li> <li>Go to Inbound Authentication Configuration &gt; OAuth2/OpenID Connect Configuration.</li> <li> <p>Update the Identity Provider Entity ID to the following:      <pre><code>https://&lt;IS_HOST&gt;:9446/oauth2/token\n</code></pre></p> <p></p> </li> <li> <p>Click Update.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-identity-server/","title":"Upgrading to WSO2 Identity Sever 5.11.0","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-identity-server/#set-up-is-5110-as-key-manager-for-api-manager-400","title":"Set up IS 5.11.0 as Key Manager for API Manager 4.0.0","text":"<ol> <li>Download and install the WSO2 Identity Server 5.11.0 distribution from here.</li> <li>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;IS_HOME&gt;</code>.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-identity-server/#set-up-open-banking-accelerator-and-cds-toolkit-for-identity-sever","title":"Set up Open Banking Accelerator and CDS Toolkit for Identity Sever","text":"<ol> <li>Download the <code>wso2-obiam-accelerator-3.0.0.zip</code> file and extract it to the <code>&lt;IS_HOME&gt;</code> directory.</li> <li>Download the latest updates for <code>wso2-obiam-accelerator-3.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;IS_HOME&gt;/&lt;IS_ACCELERATOR_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Download the <code>wso2-obiam-toolkit-cds-1.0.0.zip</code> file and extract it to the <code>&lt;IS_HOME&gt;</code> directory.</p> </li> <li>Download the latest updates for <code>wso2-obiam-toolkit-cds-1.0.0</code>. For more information, see Getting WSO2 Updates.</li> <li> <p>Go to the <code>&lt;IS_HOME&gt;/&lt;IS_TOOLKIT_HOME&gt;/bin</code> directory and run the merge.sh script.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>To configure the Identity Server with the API Manager, download WSO2 IS Connector.</p> </li> <li> <p>Copy the following files to the given directory paths:</p> File to copy Location to <code>wso2is-extensions-1.2.10/dropins/wso2is.key.manager.core-1.2.10.jar</code> <code>&lt;IS_HOME&gt;/repository/components/dropins</code> <code>wso2is-extensions-1.2.10/dropins/wso2is.notification.event.handlers-1.2.10.jar</code> <code>&lt;IS_HOME&gt;/repository/components/dropins</code> <code>wso2is-extensions-1.2.10/webapps/keymanager-operations.war</code> <code>&lt;IS_HOME&gt;/repository/deployment/server/webapps</code> </li> <li> <p>Replace the existing <code>deployment.toml</code> file in the Identity Server as follows:</p> <ul> <li>Go to the <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2is-5.11.0-deployment-cds.toml</code> to <code>deployment.toml</code>.</li> <li>Copy the <code>deployment.toml</code> file to the <code>&lt;IS_HOME&gt;/repository/conf</code> directory to replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> <ul> <li>When configuring database related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-identity-server/#migrate-to-wso2-identity-sever-5110","title":"Migrate to WSO2 Identity Sever 5.11.0","text":"<ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager to 5.11.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Follow Step B - Migrate IS from 5.10.0 to 5.11.0 and upgrade your WSO2 Identity Server.</p> </li> <li> <p>Get the WSO2 Identity Server Migrating to 5.11.0 documentation provided by the WSO2 team.</p> </li> <li> <p>Follow Migrating to 5.11.0 to upgrade your current IS as KM 5.10.0 distribution to IS 5.11.0.</p> <p>Note</p> <p>In the above documentation, under Steps to migrate to 5.11.0,</p> <ol> <li>Skip steps 1,2, and 4.</li> <li>Do not copy the API Manager - Key Manager specific configurations from          <code>&lt;OLD_IS_KM_HOME&gt;/repository/conf/api-manager.xml</code> of the previous IS as KM version to IS 5.11.0.</li> <li>Follow the step 10, only if you have enabled Symmetric Key Encryption in the previous IS as KM setup.          If not, skip step 10.</li> <li> <p>Before executing the IS migration client according to Step 11, remove the following entries from          <code>migration-config.yaml</code> in the migration-resources directory:</p> <pre><code>- version: \"5.10.0\"\nmigratorConfigs:\n-\nname: \"MigrationValidator\"\norder: 2\n-\nname: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n-\nname: \"TenantPortalMigrator\"\norder: 11\n</code></pre> </li> </ol> <p>Warning</p> <p>Based on the number of records in the identity tables, the identity component migration will take a considerable time.      Do not stop the server during the migration process. Wait until the migration process finishes completely and the server gets started.</p> </li> <li> <p>After successfully completing the migration, stop the server and remove the following directories and files.</p> <ul> <li>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file.</li> <li>Remove the <code>&lt;IS_HOME&gt;/migration-resources</code> directory.</li> </ul> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/cds-toolkit-1.0.0/old-content-backup/upgrading-wso2-open-banking-200-to-300/","title":"Upgrading WSO2 Open Banking from 2.0.0 to 3.0.0","text":"<p>This section guides on how to upgrade your WSO2 Open Banking 2.0.0 setup to WSO2 Open Banking 3.0.0 (Accelerator Model). </p> <p>Note</p> <p>WSO2 Open Banking 2.0.0 is based on the WSO2 API Manager 3.1.0 and WSO2 Identity Server 5.10.0 products.</p> <p>Tip</p> <ul> <li>The DCR applications created in Open Banking 2.0.0 should not contain a SoftwareId/IssuerName that includes an      underscore \"_\".         - If you have such DCR applications, before the migration process, rename the Service Provider Name           of each DCR application's Service Provider application by logging into <code>https://&lt;IS_HOST&gt;:9446/carbon</code>.</li> <li>The Migration Client ONLY supports Open Banking 2.0.0 environments where the CDS - Secondary User feature      is not enabled.         - If you have already enabled data sharing for Secondary Users, you must await a future           release of the Migration Client.</li> <li> <p>In your Open Banking 2.0.0 database, check the column size of the following:</p> Database Table Column Data type Size <code>openbank_apimgtdb</code> <code>SP_METADATA</code> <code>VALUE</code> <code>VARCHAR</code> 4096 <ul> <li>If the column size is less than 4096, execute the following command against the <code>SP_METADATA</code> table:<pre><code>``` \nALTER TABLE SP_METADATA MODIFY VALUE VARCHAR(4096); \n```\n</code></pre> </li> </ul> </li> </ul> <p>The diagram below explains the flow of upgrading the WSO2 Open Banking solution:</p> <p></p> <p>Follow the topics below in the given order:</p> <ol> <li>Upgrading to WSO2 API Manager 3.2.0 (<code>upgrading-wso2-api-manager-320.md</code>)</li> <li>Upgrading to WSO2 Identity Sever 5.11.0 (<code>upgrading-wso2-identity-server.md</code>)</li> <li>Upgrading API Manager 3.2.0 to 4.0.0 (<code>upgrading-wso2-api-manager-400.md</code>)</li> <li>Migrating Open Banking Data (<code>open-banking-data-migration.md</code>)</li> <li>Migrating Reporting Data (<code>reporting-data-migration.md</code>)</li> <li>Configuring After Migration (<code>modifications-after-migration.md</code>)</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/","title":"Migration resources for WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0","text":"<p>Note</p> <p>This README documentation is for internal use only.</p> <p>This directory contains the migration documentation and resources for WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/#migration-documentation","title":"Migration Documentation","text":"<ul> <li> <p>The documentation for WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0 can be accessed here.</p> </li> <li> <p>The reference documentation mentioned in the WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0 documentation can be accessed via the following links:</p> </li> </ul> Base Product Documentation File Name with GIT Location Upgrading WSO2 IS as Key Manager to 6.0.0 <code>Upgrade IS KM 5.10.0 to IS 6.0.0 for APIM 3.1.0 to 4.2.0.md</code> Migrating to 6.1.0 <code>migrate-to-610.md</code> Upgrading API Manager from 3.1.0 to 4.2.0 <code>upgrading-from-310-to-420.md</code>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/#migration-resources","title":"Migration Resources","text":"Migration Resource File Name with GIT Location Identity component migration resource <code>wso2is-migration-1.1.163.zip</code> APIM 4.2.0 DB Scripts <code>db-scripts/upgrading-from-310-to-420/</code> Latest APIM migration tool <code>wso2am-migration-4.2.0.54.zip</code> Latest OB migration tool <code>wso2-openbanking-migration-1.0.1.zip</code> <code>org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts/' folder | [</code>org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts/`](https://github.com/wso2-extensions/identity-oauth-uma/tree/master/features/org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts) <ul> <li>Additionally, all the images used in the documentation can be found here.</li> </ul>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/","title":"Upgrading WSO2 Open Banking from 2.0.0 to 3.0.0","text":"<p>This documentation guides you on how to upgrade your WSO2 Open Banking 2.0.0 for the UK setup to WSO2 Open Banking 3.0.0 (Accelerator Model) UK Toolkit 1.0.0 with WSO2 API Manager 4.2.0 and WSO2 Identity Server 6.1.0 as the base packs.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#overview","title":"Overview","text":"<p>WSO2 Open Banking solution runs on top of WSO2 Identity Server and WSO2 API Manager which are referred to as base products.</p> <p>Given below is the product compatibility matrix for the WSO2 Open Banking solution. This matrix outlines the compatibility between the versions of WSO2 Open Banking solutions involved in this migration and the latest version of the base products they support.</p> WSO2 Open Banking Version Supported WSO2 Identity Server Version Supported WSO2 API Manager Version 2.0.0 5.10.0 3.1.0 3.0.0 6.1.0 (Latest) 4.2.0 (Latest)"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#prerequisites","title":"Prerequisites","text":"<p>We assume that you already have an existing WSO2 Open Banking 2.0.0 solution for the UK with some sample data populated in the databases. This setup will be referred to as the pre-migration setup in this documentation.</p> <p>Important:</p> <ul> <li> <p>In order to upgrade your existing Open Banking solution to the latest version, you need to upgrade the base products (WSO2 Identity Server and WSO2 API Manager) to the latest supported version as well.</p> </li> <li> <p>In addition to the base product migration, you need to configure WSO2 Identity Server as Key Manager. The Key Manager handles all clients, security, and access token-related operations. So you need to configure WSO2 Identity Server as Key Manager in each WSO2 API Manager migration.</p> </li> </ul> <p>The following diagram explains the flow of upgrading the WSO2 Open Banking solution:</p> <p></p> <p>Given below are the steps you need to follow to upgrade your WSO2 Open Banking 2.0.0 for the UK setup to WSO2 Open Banking 3.0.0 - UK Toolkit 1.0.0:</p> <ol> <li>Prepare for Migration</li> <li>Upgrade IS as KM 5.10.0 to IS as KM 6.1.0</li> <li>Upgrade WSO2 API Manager 3.1.0 to WSO2 API Manager 4.2.0</li> <li>Migrate Open Banking Data</li> <li>Migrate Reporting Data (Optional)</li> <li>Post-Migration Configurations</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#1-prepare-for-migration","title":"1. Prepare for Migration","text":"<p>In the following section, you will be setting up Open Banking Accelerator and UK Toolkit for Identity Server and API Manager.</p> <ol> <li> <p>Download WSO2 Identity Server 6.1.0 from here and extract the folder. This extracted folder will be referred to as <code>&lt;IS_HOME&gt;</code> in this document.</p> </li> <li> <p>Download WSO2 API Manager 4.2.0 from here and extract the folder. This extracted folder will be referred to as <code>&lt;APIM_HOME&gt;</code> in this document.</p> </li> <li> <p>Get WSO2 Open Banking Accelerator 3.0.0 provided by the WSO2 team.</p> </li> <li> <p>Extract the WSO2 Open Banking Accelerator zip files. Get the following accelerators and extract them.</p> <ul> <li><code>wso2-obiam-accelerator-3.0.0</code></li> <li><code>wso2-obam-accelerator-3.0.0</code></li> </ul> </li> <li> <p>Get WSO2 Open Banking UK Toolkit 1.0.0 provided by the WSO2 team. Get the following toolkits and extract them.</p> <ul> <li><code>wso2-obiam-toolkit-uk-1.0.0</code></li> <li><code>wso2-obam-toolkit-uk-1.0.0</code></li> </ul> </li> <li> <p>This document uses the following placeholders to refer to the following products:</p> Product Placeholder WSO2 Identity Server 6.1.0 <code>&lt;IS_HOME&gt;</code> WSO2 API Manager 4.2.0 <code>&lt;APIM_HOME&gt;</code> WSO2 Open Banking Identity Server Accelerator 3.0.0 <code>&lt;OB_IS_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking API Manager Accelerator 3.0.0 <code>&lt;OB_APIM_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking Identity Server UK Toolkit 1.0.0 <code>&lt;OB_IS_TOOLKIT_HOME&gt;</code> WSO2 Open Banking API Manager UK Toolkit 1.0.0 <code>&lt;OB_APIM_TOOLKIT_HOME&gt;</code> </li> <li> <p>Follow the Getting WSO2 Updates documentation and update the base products, accelerators, and toolkits using relevant scripts.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_ACCELERATOR_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_ACCELERATOR_HOME&gt;/bin</code> respectively to copy the Open Banking artifacts into the base product packs.</p> </li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/bin</code> respectively:</li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li> <p>Add the relevant modifications to the <code>wso2is-5.11.0-deployment-uk.toml</code> file in the <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/repository/resources</code> directory.</p> </li> <li> <p>Rename <code>wso2is-5.11.0-deployment-uk.toml</code> to <code>deployment.toml</code>.</p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;IS_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> <ul> <li>When configuring database related properties, ensure that the datasources are pointing to the existing databases.</li> </ul> </li> <li> <p>Add the relevant modifications to the <code>wso2am-4.0.0-deployment-uk.toml</code> file in the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources</code> directory.</p> </li> <li> <p>Rename <code>wso2am-4.0.0-deployment-uk.toml</code> to <code>deployment.toml</code>.</p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;APIM_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> <ul> <li>When configuring database related properties, ensure that the datasources are pointing to the existing databases.</li> </ul> </li> <li> <p>Add the following configurations needed for Identity Server 6.1.0 and API Manager 4.2.0.</p> <ol> <li> <p>Add the following configuration in Identity Server 6.1.0 <code>deployment.toml</code> file.</p> <pre><code>[application_mgt]\nenable_role_validation = true\n</code></pre> </li> <li> <p>Add the following configuration in the <code>deployment.toml</code> file of API Manager 4.2.0 after the configurations done under <code>[open_banking.dcr]</code>. Note that the version must be specified as <code>v3</code> for API Manager 4.2.0.</p> <pre><code>[open_banking.dcr.apim_rest_endpoints]\napp_creation = \"api/am/devportal/v3/applications\"\nkey_generation = \"api/am/devportal/v3/applications/application-id/map-keys\"\napi_retrieve = \"api/am/devportal/v3/apis\"\napi_subscribe = \"api/am/devportal/v3/subscriptions/multiple\"\nretrieve_subscribe=\"api/am/devportal/v3/subscriptions\u201d\n</code></pre> </li> </ol> </li> <li> <p>Now all the Open Banking related artifacts and configurations are included in the base packs.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#2-migrating-wso2-is-as-key-manager-from-identity-server-5100-to-610","title":"2. Migrating WSO2 IS as Key Manager from Identity Server 5.10.0 to 6.1.0","text":"<ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager to 6.0.0 (<code>Upgrade IS KM 5.10.0 to IS 6.0.0 for APIM 3.1.0 to 4.2.0.md</code>) documentation provided by the WSO2 team. This will instruct you to upgrade your IS as Key Manager 5.10.0 to IS 6.1.0. Take note of the essential points provided below while following the instructions in the documentation.</p> <p>Important</p> <p>Please note that the information contained in the above-mentioned documentation is also applicable for WSO2 Identity Server 6.1.0.</p> </li> <li> <p>Follow Step A: Upgrade IS as Key Manager 5.10.0 to IS 6.0.0 in the above-mentioned documentation. Follow all the steps and make sure to perform the necessary steps mentioned below:</p> <p>Note</p> <p>Refer to the Migrating to 6.1.0 (<code>migrate-to-610.md</code>) documentation when following the step 5 under Step 1: Migrate the IS as KM configurations.</p> </li> <li> <p>When following Step 2: Migrate the IS as KM Resources, download the WSO2 IS Connector for API Manager 4.2.0 from here. Extract the folder (<code>wso2is-extensions-1.6.8.zip</code>) and get the relevant JAR files and WAR file. </p> </li> <li> <p>When following Step 3: Migrate the IS as KM Components, use the <code>wso2is-migration-1.1.163.zip</code> folder as the identity component migration resource.</p> </li> <li> <p>Following the Step A: Upgrade IS as Key Manager 5.10.0 to IS 6.0.0 in the above-mentioned documentation with the above instructions, concludes the WSO2 IS as Key Manager from Identity Server 5.10.0 to 6.1.0 migration.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#3-migrating-wso2-api-manager-from-310-to-420","title":"3. Migrating WSO2 API Manager from 3.1.0 to 4.2.0","text":"<ol> <li> <p>Get the Upgrading API Manager from 3.1.0 to 4.2.0 (<code>upgrading-from-310-to-420.md</code>) documentation provided by the WSO2 team. This will instruct you to upgrade your API-M environment from 3.1.0 to 4.2.0. Take note of the essential points provided below while following the instructions in the documentation.</p> </li> <li> <p>When following Step 1: Migrate the API Manager Configurations, use the DB scripts (<code>db-scripts/upgrading-from-310-to-420</code>) provided by the WSO2 team.</p> </li> <li> <p>Skip the guidelines under Step 3: Migrate the Identity Components as you have already done this in Step 3 of Step A: Upgrade IS as Key Manager 5.10.0 to IS 6.0.0.</p> </li> <li> <p>When following Step 4: Migrate the API Manager Components, use the provided API Manager Migration resources (<code>wso2am-migration-4.2.0.54.zip</code>).</p> </li> <li> <p>Before starting the API Manager 4.2.0 server for the first time in Step 6 under Step 6: Restart the WSO2 API Manager 4.2.0 Server, make sure you have already started WSO2 Identity Server 6.1.0.</p> </li> <li> <p>Following the above-mentioned documentation with the above instructions, concludes the WSO2 API Manager migration.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#4-migrating-open-banking-data","title":"4. Migrating Open Banking Data","text":"<p>In this step, you will transfer your Open Banking data from your existing Open Banking 2.0.0 platform to the new WSO2 Open Banking 3.0.0 platform. This process includes moving important information such as customer accounts, transactions, and permissions.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#prerequisites_1","title":"Prerequisites","text":"<p>Make sure the following:</p> <ul> <li> <p>In your Open Banking 2.0.0 database, check the column size of the following:</p> Database Table Column Data type Size <code>openbank_apimgtdb</code> <code>SP_METADATA</code> <code>VALUE</code> <code>VARCHAR</code> 4096 <ul> <li> <p>If the column size is less than 4096, execute the following command against the <code>SP_METADATA</code> table:</p> <pre><code>ALTER TABLE SP_METADATA MODIFY VALUE VARCHAR(4096);\n</code></pre> </li> </ul> </li> </ul> <p>Note: </p> <p>Please read the following section before proceeding with the migration:</p> <ul> <li>The <code>SPMigrator</code> migrates the Dynamic Client Registration related data.</li> <li> <p>If the regulatory applications are registered through the signup flow.</p> <ul> <li>Please skip this migrator by removing the following configuration in <code>migration-config.yaml</code>.      <pre><code>- \n  name: \"SPMigrator\"\n  spec: \"UK\"\n  order: 3\n  parameters:\n    schema: \"ob\"\n</code></pre></li> </ul> </li> <li> <p>The default <code>common-auth-script.js</code> (the adaptive authentication script of service provider applications) that was provided in Open Banking 2.0.0 is not supported in Open Banking 3.0.0. Therefore, the migration tool is configured to automatically update the <code>common-auth-script</code> file of all service provider apps to the format which is supported in Open Banking 3.0.0.</p> <ul> <li>This default script supported in Open Banking 3.0.0 is available in the <code>common-auth-script.js</code> file placed at the <code>openbanking-migration-resources/common-auth-scripts/UK</code> directory.</li> <li>Make sure to change the content of the file appropriately if you have used a customized adaptive authentication script for all the service provider applications in your Open Banking 2.0.0 setup and that logic will not be supported directly in Open Banking 3.0.0.</li> <li>If you can assure that the customized adaptive authentication logic used in Open Banking 2.0.0 is supported in Open Banking 3.0.0 without any modifications, you can skip this step during the migration by setting the <code>commonAuthScriptUpdateEnable</code> parameter under the relevant spec version of the <code>SPMigrator</code> to <code>false</code> in <code>migration-config.yaml</code>. Otherwise, it should be <code>true</code>.       <code>-      name: \"SPMigrator\"      spec: \"UK\"      order: 3      parameters:      schema: \"ob\"      commonAuthScriptUpdateEnable: \"false\"</code></li> <li>If you have configured different adaptive authentication logics for service provider applications, the migration-tool does not support the automated update.</li> <li>In this case also, the <code>commonAuthScriptUpdateEnable</code> parameter under the relevant spec version of the SPMigrator should be set to false in <code>migration-config.yaml</code> before starting the OB-migration process as shown above.</li> </ul> <p>Note:</p> <ul> <li>If any update is required, the adaptive authentication logic of each service provider should be updated manually based on your customizations via the carbon console once the entire migration process is concluded. </li> </ul> </li> </ul> <p>Before you begin:</p> <p>Back up all the databases before performing the migration.</p> <ol> <li> <p>To create the required database tables:</p> <ul> <li>Run the relevant SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent</code> directory against the <code>openbank_openbankingdb</code> database.</li> </ul> </li> <li> <p>Get the WSO2 Open Banking Migration Client Tool v1.0.0 (<code>wso2-openbanking-migration-1.0.1.zip</code>) provided by the WSO2 team.</p> </li> <li> <p>Copy the <code>wso2-openbanking-migration-1.0.1/openbanking-migration-resources</code> directory to <code>&lt;IS_HOME&gt;</code>.</p> </li> <li> <p>Copy the <code>wso2-openbanking-migration-1.0.1/dropins/com.wso2.openbanking.migration-1.0.1.jar</code> file to <code>&lt;IS_HOME&gt;/repository/components/dropins</code>.</p> </li> <li> <p>Open the <code>wso2-openbanking-migration-1.0.1/openbanking-migration-resources/migration-config.yaml</code> file and set the <code>migrationEnable</code> property to <code>true</code>.</p> </li> <li> <p>Start the Identity Server with the following command:</p> <pre><code>   sh wso2server.sh -DobMigrationSpec=UK\n</code></pre> </li> <li> <p>Stop the server.</p> </li> </ol> <p>Warning</p> <p>If a failure occurred during the migration process, delete all the migrated data from the tables that    were generated during migration.</p> <ol> <li> <p>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file.</p> </li> <li> <p>Remove the <code>&lt;IS_HOME&gt;/openbanking-migration-resources</code> directory.</p> </li> <li> <p>Start the Identity Server and API Manager servers.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#5-migrating-reporting-data","title":"5. Migrating Reporting Data","text":"<p>In this step, you will transfer data from your existing reporting system to the new WSO2 Open Banking platform. This will involve moving data related to reports, dashboards, and visualizations.</p> <p>Note:</p> <p>Follow this step only if you are using WSO2 Open Banking Business Intelligence with your existing WSO2 Open Banking 2.0.0 setup.</p> <p>Before you begin:</p> <p>Make sure you are running Data Reporting v3.1.5 in your WSO2 Open Banking Business Intelligence 2.0.0 setup.    If not, follow the Upgrading Data Reporting from v3.1.2 to v3.1.5 documentation and upgrade.</p> <ol> <li>Stop the WSO2 Open Banking Business Intelligence 2.0.0 server if it is running.</li> <li>Download and install the WSO2 Streaming Integrator 4.0.0 distribution from here.</li> <li>Backup your <code>openbank_ob_reporting_statsdb</code> and <code>openbank_ob_reporting_summarizeddb</code> databases of your WSO2 Open Banking Business Intelligence 2.0.0 setup.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#set-up-open-banking-accelerator-and-uk-toolkit-for-streaming-integrator","title":"Set up Open Banking Accelerator and UK Toolkit for Streaming Integrator","text":"<p>Set up WSO2 Open Banking Business Intelligence Accelerator and WSO2 Open Banking Business Intelligence UK Toolkit as follows:</p> <p>Note</p> <ul> <li><code>&lt;SI_HOME&gt;</code> refers to the root directory of WSO2 Streaming Integrator.</li> <li><code>&lt;OB_BI_ACCELERATOR_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence Accelerator.</li> <li><code>&lt;OB_BI_TOOLKIT_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence UK Toolkit.</li> </ul> <ol> <li> <p>Copy and extract the <code>wso2-obbi-accelerator-3.0.0.zip</code> accelerator file in the root directory of WSO2 Streaming    Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/bin</code>:</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Copy and extract the <code>wso2-obbi-toolkit-uk-1.0.0.zip</code> toolkit file in the root directory of WSO2 Streaming    Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_TOOLKIT_HOME&gt;/bin</code>.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Replace the existing <code>deployment.yaml</code> file in the Streaming Integrator as follows:</p> <ul> <li>Go to the <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2si-4.0.0-deployment.yaml</code> to <code>deployment.yaml</code>.</li> <li>Copy the <code>deployment.yaml</code> file to the <code>&lt;SI_HOME&gt;/conf/server</code> directory to replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;SI_HOME&gt;/conf/server/deployment.toml</code> file, and configure the hostnames and databases related    properties accordingly.</p> <ul> <li>When configuring database related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> <li> <p>Exchange the public certificates between servers.</p> </li> </ol> <p>Follow the steps given below:</p> <p>a. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and export the public certificate of the Streaming    Integrator:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeySI.pem\n</code></pre> <p>b. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and import the public certificate of the    Streaming Integrator to the truststore of the Identity Server:</p> <pre><code>keytool -import -alias wso2 -file publickeySI.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>c. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and export the public certificate of the    Identity Server:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeyIAM.pem\n</code></pre> <p>d. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and import the public certificate of the Identity    Server to the truststore of the Streaming Integrator:</p> <pre><code>keytool -import -alias wso2 -file publickeyIAM.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>e. Go to the <code>&lt;APIM_HOME&gt;/repository/resources/security</code> directory and repeat step b,c, and d.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#upgrade-to-wso2-streaming-integrator-400","title":"Upgrade to WSO2 Streaming Integrator 4.0.0","text":"<ol> <li> <p>To migrate the reporting data and tables from the Open Banking 2.0 setup to 3.0.</p> <ul> <li>Go to the   <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/reporting-migration-scripts/uk</code>   directory.</li> <li>Select the relevant SQL script and execute it against your <code>openbank_ob_reporting_statsdb</code> database.</li> </ul> </li> <li> <p>Start the Streaming Integrator server. For more information, see Try Out Data Publishing.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0/#6-post-migration-configurations","title":"6. Post-Migration Configurations","text":"<p>This section explains the modifications that need to be performed after the upgrade/migration process.</p> <ol> <li> <p>Stop the servers if running.</p> </li> <li> <p>Remove <code>com.wso2.openbanking.migration-1.0.0.jar</code> from the <code>IS_HOME&gt;/repository/components/dropins</code> folder.</p> </li> <li> <p>Remove <code>openbanking-migration-resources</code> folder from the <code>&lt;IS_HOME&gt;/repository/components/dropins</code> folder.</p> </li> </ol> <p>Note:</p> <p>Make sure to perform the following changes before starting with the Open Banking flows:    1. Redeploy the APIs with the relevant insequence files supported in WSO2 Open Banking 3.0.0 UK Toolkit 1.0.0.    2. Ensure the Production/Sandbox Endpoints of the published APIs are precise.</p> <ul> <li>Follow the Quick Start Guide - Tryout Flow of the UK Toolkit 1.0.0 documentation for a sample tryout flow of the Account and Transaction API.</li> <li>Navigate to the Tryout section in the UK Toolkit 1.0.0 documentation for more information on API flows.</li> </ul> <ol> <li> <p>Sign in to the Identity Server Management Console.</p> </li> <li> <p>Navigate to Identity Providers \u2192 Resident \u2192 Inbound Authentication Configuration \u2192 OAuth2/OpenID Connect Configuration \u2192 Identity Provider Entity ID.</p> </li> <li> <p>Change the Identity Provider Entity ID value from <code>https://localhost:8243/token</code> to <code>https://localhost:9446/oauth2/token</code>.</p> </li> <li> <p>If the <code>urn:ietf:params:oauth:grant-type:uma-ticket</code> grant type was used in the Open Banking 2 setup, follow the below instructions to configure User Managed Access with WSO2 Identity Server:</p> <p>WSO2 Identity Server (WSO2 IS) supports the UMA 2.0 protocol, which allows a resource owner to easily share resources with other requesting parties. To use UMA with WSO2 Identity Server, first you need to configure the authenticator with WSO2 Identity Server.</p> <p>You can either download the UMA artifacts or build the authenticator from the source code by following the steps given below. 1. Download the UMA connector and other required artifacts from the WSO2 store. 2. Add the following <code>.jar</code> files to the <code>&lt;IS_HOME&gt;/repository/components/dropins</code> directory.</p> <p><code>org.wso2.carbon.identity.oauth.uma.common-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.grant-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.permission.service-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.resource.service-x.x.x.jar   org.wso2.carbon.identity.oauth.uma.xacml.extension-x.x.x.jar</code> 3. Add the following <code>.war</code> files to the <code>&lt;IS_HOME&gt;/repository/deployment/server/webapps</code> directory.  <code>api#identity#oauth2#uma#resourceregistration#v_.war    api#identity#oauth2#uma#permission#v_.war</code> 4. Get the <code>org.wso2.carbon.identity.oauth.uma.server.feature/resources/dbscripts/</code> folder provided by the WSO2 team. 5. Run the corresponding db script from the above-mentioned folder.  6. Start/ Restart WSO2 Identity Server. 7. Stop WSO2 Identity Server if it is already running. 8. Add the below configuration to the <code>&lt;IS-Home&gt;/repository/conf/deployment.toml</code> file.  ```toml  [[oauth.custom_grant_type]]  name = \"urn:ietf:params:oauth:grant-type:uma-ticket\"  grant_handler = \"org.wso2.carbon.identity.oauth.uma.grant.UMA2GrantHandler\"  grant_validator = \"org.wso2.carbon.identity.oauth.uma.grant.GrantValidator\"</p> <p>[[resource.access_control]]  context = \"(.)/api/identity/oauth2/uma/resourceregistration/v1.0/(.)\"  secure = \"true\"  http_method = \"all\"</p> <p>[[resource.access_control]]  context = \"(.)/api/identity/oauth2/uma/permission/v1.0/(.)\"  secure = \"true\"  http_method = \"all\"    ``` 8. Start/ Restart WSO2 Identity Server.</p> </li> <li> <p>Restart the WSO2 Identity Server.</p> </li> <li> <p>Restart the WSO2 API Manager Server.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/README-v1/","title":"Migration resources for WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0","text":"<p>Note</p> <p>This README documentation is for internal use only.</p> <p>This directory contains the migration documentation and resources for WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/README-v1/#migration-documentation","title":"Migration Documentation","text":"<ul> <li> <p>The documentation for WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0 can be accessed here.</p> </li> <li> <p>The reference documentation mentioned in the WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0 documentation can be accessed via the following links:</p> Base Product Documentation File Name with GIT Location Upgrading WSO2 IS as Key Manager 5.10.0 for API Manager 3.2.0 <code>Upgrade IS as Key Manager 5.10.0 to IS 5.10.0 for APIM 3.1.0 to 3.2.0.md</code> Upgrading WSO2 API Manager from 3.1.0 to 3.2.0 <code>upgrading-from-310-to-320.md</code> Upgrading WSO2 IS as Key Manager to 5.11.0 <code>Upgrade IS as Key Manager 5.10.0 to IS 5.11.0 for APIM 3.2.0 to 4.0.0.md</code> Upgrading WSO2 Identity Server to 5.11.0 <code>migrating-to-5110.md</code> Upgrading WSO2 API Manager from 3.2.0 to 4.0.0 <code>upgrading-from-320-to-400.md</code> Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0 <code>Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0.md</code> Migrating to 6.1.0 <code>migrate-to-610.md</code> Upgrading API Manager from 4.0.0 to 4.2.0 <code>upgrading-from-400-to-420.md</code> </li> <li> <p>The reference documentation for the base product documents mentioned in the above table can be accessed via the following links:</p> Reference Documentation in the Base Product Documentation File Name with GIT Location Upgrading API-M from 3.1.0 to 3.2.0 <code>upgrading-from-310-to-320.md</code> Upgrading WSO2 IS as the Key Manager to 5.10.0 document <code>Upgrade IS as Key Manager 5.10.0 to IS 5.10.0 for APIM 3.1.0 to 3.2.0.md</code> upgrade WSO2 IS as the Key Manager to 5.11.0 <code>Upgrade IS as Key Manager 5.10.0 to IS 5.11.0 for APIM 3.2.0 to 4.0.0.md</code> </li> </ul>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/README-v1/#migration-resources","title":"Migration Resources","text":"<ul> <li> <p>The migration resources required for WSO2 Open Banking 2.0.0 to 3.0.0 - UK Toolkit 1.0.0 can be accessed via the following links:</p> <ul> <li>Attachments</li> <li><code>wso2is-extensions-1.6.8.zip</code></li> <li><code>wso2is-migration-1.1.163.zip</code></li> <li><code>db-scripts/upgrading-from-400-to-420</code></li> <li><code>wso2am-migration-4.2.0.54.zip</code></li> </ul> </li> <li> <p>Additionally, all the images used in the documentation can be found here.</p> </li> </ul>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/modifications-after-migration/","title":"Modifications After Migration","text":"<p>This page explains the modifications that need to be performed after the upgrade/migration process.</p> <ol> <li> <p>Stop the servers if running.</p> </li> <li> <p>Remove <code>com.wso2.openbanking.migration-1.0.0.jar</code> from the <code>IS_HOME&gt;/repository/components/dropins</code> folder.</p> </li> <li> <p>Remove <code>openbanking-migration-resources</code> folder from the <code>&lt;IS_HOME&gt;/repository/components/dropins</code> folder.</p> <p>Note:</p> <p>Make sure to perform the following changes before starting with the Open Banking flows:    1. Redeploy the APIs with the relevant insequence files supported in WSO2 Open Banking 3.0.0 UK Toolkit 1.0.0.    2. Ensure the Production/Sandbox Endpoints of the published APIs are precise.</p> <ul> <li>Follow the Quick Start Guide - Tryout Flow of the UK Toolkit 1.0.0 documentation for a sample tryout flow of the Account and Transaction API.</li> <li>Navigate to the Tryout section in the UK Toolkit 1.0.0 documentation for more information on API flows.</li> </ul> </li> <li> <p>Restart the WSO2 Identity Server.</p> </li> <li> <p>Restart the WSO2 API Manager Server. </p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/open-banking-data-migration/","title":"Open Banking Data Migration","text":"<p>Before you begin:</p> <p>Back up all the databases before performing the migration.</p> <ol> <li>To create the required database tables:<ul> <li>Run the relevant SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent</code> directory against   the <code>openbank_openbankingdb</code> database.</li> </ul> </li> <li>Get the WSO2 Open Banking Migration Client Tool v1.0.0 (<code>wso2-openbanking-migration-1.0.0.zip</code>) provided by the WSO2 team.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources</code> directory to <code>&lt;IS_HOME&gt;</code>.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file to <code>&lt;IS_HOME&gt;/repository/components/dropins</code>.</li> <li>Open the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/migration-config.yaml</code> file and    set the <code>migrationEnable</code> property to <code>true</code>.</li> <li> <p>Start the Identity Server with the following command:</p> <pre><code>   sh wso2server.sh -DobMigrationSpec=UK\n</code></pre> </li> <li> <p>Stop the server.</p> <p>Warning</p> <p>If a failure occurred during the migration process, delete all the migrated data from the tables that      were generated during migration.</p> </li> <li> <p>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file.</p> </li> <li>Remove the <code>&lt;IS_HOME&gt;/openbanking-migration-resources</code> directory.</li> <li>Start the Identity Server and API Manager servers.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/reporting-data-migration/","title":"Reporting Data Migration","text":"<p>Before you begin:</p> <p>Make sure you are running Data Reporting v3.1.5 in your WSO2 Open Banking Business Intelligence 2.0.0 setup.     If not, follow the Upgrading Data Reporting from v3.1.2 to v3.1.5      documentation and upgrade.</p> <ol> <li>Stop the WSO2 Open Banking Business Intelligence 2.0.0 server if it is running.</li> <li>Download and install the WSO2 Streaming Integrator 4.0.0 distribution from here.</li> <li>Backup your <code>openbank_ob_reporting_statsdb</code> and <code>openbank_ob_reporting_summarizeddb</code> databases of your WSO2 Open Banking Business Intelligence 2.0.0 setup. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/reporting-data-migration/#set-up-open-banking-accelerator-and-uk-toolkit-for-streaming-integrator","title":"Set up Open Banking Accelerator and UK Toolkit for Streaming Integrator","text":"<p>Set up WSO2 Open Banking Business Intelligence Accelerator and WSO2 Open Banking Business Intelligence UK Toolkit  as follows:</p> <p>Note</p> <ul> <li><code>&lt;SI_HOME&gt;</code> refers to the root directory of WSO2 Streaming Integrator.</li> <li><code>&lt;OB_BI_ACCELERATOR_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence Accelerator.</li> <li><code>&lt;OB_BI_TOOLKIT_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence UK Toolkit.</li> </ul> <ol> <li> <p>Copy and extract the <code>wso2-obbi-accelerator-3.0.0.zip</code> accelerator file in the root directory of WSO2 Streaming     Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/bin</code>:</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Copy and extract the <code>wso2-obbi-toolkit-uk-1.0.0.zip</code> toolkit file in the root directory of WSO2 Streaming     Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_TOOLKIT_HOME&gt;/bin</code>. </p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Replace the existing <code>deployment.yaml</code> file in the Streaming Integrator as follows:</p> <ul> <li>Go to the <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2si-4.0.0-deployment.yaml</code> to <code>deployment.yaml</code>.</li> <li>Copy the <code>deployment.yaml</code> file to the <code>&lt;SI_HOME&gt;/conf/server</code> directory to replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;SI_HOME&gt;/conf/server/deployment.toml</code> file, and configure the hostnames and databases related    properties accordingly.     </p> <ul> <li>When configuring database related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> <li> <p>Exchange the public certificates between servers. </p> <p>Follow the steps given below:</p> <p>a. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and export the public certificate of the Streaming         Integrator:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeySI.pem\n</code></pre> <p>b. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and import the public certificate of the         Streaming Integrator to the truststore of the Identity Server:</p> <pre><code>keytool -import -alias wso2 -file publickeySI.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>c. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and export the public certificate of the         Identity Server:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeyIAM.pem\n</code></pre> <p>d. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and import the public certificate of the Identity         Server to the truststore of the Streaming Integrator:</p> <pre><code>keytool -import -alias wso2 -file publickeyIAM.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>e. Go to the <code>&lt;APIM_HOME&gt;/repository/resources/security</code> directory and repeat step b,c, and d.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/reporting-data-migration/#upgrade-to-wso2-streaming-integrator-400","title":"Upgrade to WSO2 Streaming Integrator 4.0.0","text":"<ol> <li> <p>To migrate the reporting data and tables from the Open Banking 2.0 setup to 3.0.</p> <ul> <li>Go to the    <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/reporting-migration-scripts/uk</code>    directory.</li> <li>Select the relevant SQL script and execute it against your <code>openbank_ob_reporting_statsdb</code> database.</li> </ul> </li> <li> <p>Start the Streaming Integrator server. For more information, see Try Out Data Publishing.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-api-manager-4.0.0-to-4.2.0-and-identity-server-5.11.0-to-6.1.0/","title":"Upgrade WSO2 API Manager from 4.0.0 to 4.2.0 and WSO2 Identity Server from 5.11.0 to 6.1.0","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-api-manager-4.0.0-to-4.2.0-and-identity-server-5.11.0-to-6.1.0/#prepare-for-migration","title":"Prepare for Migration","text":"<ol> <li> <p>Download WSO2 Identity Server 6.1.0 from here and extract the folder. The extracted folder will be referred to as <code>&lt;IS_HOME&gt;</code> in this document.</p> </li> <li> <p>Download WSO2 API Manager 4.2.0 from here and extract the folder. The extracted folder will be referred to as <code>&lt;APIM_HOME&gt;</code> in this document.</p> </li> <li> <p>Get WSO2 Open Banking Accelerator 3.0.0 provided by the WSO2 team.</p> </li> <li> <p>Extract the WSO2 Open Banking Accelerator zip files. Get the following accelerators and extract them.</p> <ul> <li><code>wso2-obiam-accelerator-3.0.0</code></li> <li><code>wso2-obam-accelerator-3.0.0</code></li> </ul> </li> <li> <p>Get WSO2 Open Banking UK Toolkit 1.0.0 provided by the WSO2 team. Get the following toolkits and extract them.</p> <ul> <li><code>wso2-obiam-toolkit-uk-1.0.0</code></li> <li><code>wso2-obam-toolkit-uk-1.0.0</code></li> </ul> </li> <li> <p>This document uses the following placeholders to refer to the following products:</p> Product Placeholder WSO2 Identity Server 6.1.0 <code>&lt;IS_HOME&gt;</code> WSO2 API Manager 4.2.0 <code>&lt;APIM_HOME&gt;</code> WSO2 Open Banking Identity Server Accelerator 3.0.0 <code>&lt;OB_IS_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking API Manager Accelerator 3.0.0 <code>&lt;OB_APIM_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking Identity Server UK Toolkit 1.0.0 <code>&lt;OB_IS_TOOLKIT_HOME&gt;</code> WSO2 Open Banking API Manager UK Toolkit 1.0.0 <code>&lt;OB_APIM_TOOLKIT_HOME&gt;</code> </li> <li> <p>Follow the Getting WSO2 Updates documentation and update the base products, accelerators, and toolkits using relevant scripts.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_ACCELERATOR_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_ACCELERATOR_HOME&gt;/bin</code> respectively to copy the Open Banking artifacts into the the base product packs.</p> </li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/bin</code> respectively:</li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li> <p>Add the relevant modifications to the <code>wso2is-5.11.0-deployment-uk.toml</code> file in the <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/repository/resources</code> directory. </p> </li> <li> <p>Rename <code>wso2is-5.11.0-deployment-uk.toml</code> to <code>deployment.toml</code>. </p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;IS_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related    properties accordingly.</p> </li> <li> <p>When configuring database related properties, ensure that the datasources are pointing to the existing databases. </p> </li> <li> <p>Add the relevant modifications to the <code>wso2am-4.0.0-deployment-uk.toml</code> file in the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources</code> directory.</p> </li> <li> <p>Rename <code>wso2am-4.0.0-deployment-uk.toml</code> to <code>deployment.toml</code>.</p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;APIM_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> <ul> <li>When configuring database related properties, ensure that the datasources are pointing to the existing databases.</li> </ul> </li> <li> <p>Add the following configurations needed for Identity Server 6.1.0 and API Manager 4.2.0.</p> <ol> <li> <p>Add the following configuration in IS 6.1.0 deployment.toml</p> <pre><code>[application_mgt]\nenable_role_validation = true\n</code></pre> </li> <li> <p>Add the following configuration in the <code>deployment.toml</code> file of API Manager 4.2.0 after the configurations done under <code>[open_banking.dcr]</code>. Note that the version must be specified as <code>v3</code> for API Manager 4.2.0.</p> <pre><code>[open_banking.dcr.apim_rest_endpoints]\napp_creation = \"api/am/devportal/v3/applications\"\nkey_generation = \"api/am/devportal/v3/applications/application-id/map-keys\"\napi_retrieve = \"api/am/devportal/v3/apis\"\napi_subscribe = \"api/am/devportal/v3/subscriptions/multiple\"\nretrieve_subscribe=\"api/am/devportal/v3/subscriptions\u201d\n</code></pre> </li> </ol> </li> <li> <p>Now all the Open Banking related artifacts and configurations are included in the base packs.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-api-manager-4.0.0-to-4.2.0-and-identity-server-5.11.0-to-6.1.0/#upgrade-to-wso2-identity-server-610","title":"Upgrade to WSO2 Identity Server 6.1.0","text":"<ol> <li> <p>Follow the Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0 documentation (<code>Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0.md</code>) from the beginning along with this document (<code>upgrade-api-manager-4.0.0-to-4.2.0-and-identity-server-5.11.0-to-6.1.0.md</code>) and start the migration. When following the above-mentioned documentation,</p> <p>Note:</p> <p>Please note that the instructions provided in the above-mentioned document are also applicable for WSO2 Identity Server 6.1.0.</p> </li> <li> <p>Follow the step 4 under Step A: Upgrade IS 5.11.0 to IS 6.0.0 &gt; Step 1: Migrate the IS configurations if applicable.</p> </li> <li> <p>Step 5 under Step A: Upgrade IS 5.11.0 to IS 6.0.0 &gt; Step 1: Migrate the IS configurations refers to the <code>Configurations</code> section of the Migrating to 6.1.0 documentation (<code>migrate-to-610.md</code>). Skip the step 3 of that section.</p> </li> <li> <p>Follow the steps mentioned in the <code>Note</code> provided under the step 5 under Step A: Upgrade IS 5.11.0 to IS 6.0.0 &gt; Step 1: Migrate the IS configurations. </p> <p>Note:</p> <p>Here, we need to point the datasources to the existing databases.</p> </li> <li> <p>When following the step 2 of the Step 2: Migrate the IS Resources in the above-mentioned document, use the IS connector related to the API Manager 4.2.0 provided by the WSO2 team (<code>wso2is-extensions-1.6.8.zip</code>). Please use the jar versions included in the provided <code>wso2is-extensions-1.6.8.zip</code> folder.</p> </li> <li> <p>For the step 4 under the Step 2: Migrate the IS Resources topic in the above-mentioned documentation please refer to the Migrating to 6.1.0 documentation (<code>migrate-to-610.md</code>). Follow the steps in order skipping the steps mentioned below.</p> <ol> <li> <p>Skip the Components section under Step 1: Migrate artifacts and configs when following the above-mentioned documentation (<code>migrate-to-610.md</code>).</p> </li> <li> <p>When following the Resources section under Step 1: Migrate artifacts and configs, skip the configurations included inside the Note.</p> </li> <li> <p>Skip the Tenants section under Step 1: Migrate artifacts and configs.</p> </li> <li> <p>The User Stores section under Step 1: Migrate artifacts and configs is optional.</p> </li> <li> <p>Skip the Webapps section under Step 1: Migrate artifacts and configs.</p> </li> <li> <p>The instructions under the Configurations section is already followed at this point. Therefore, not need to follow that..</p> </li> </ol> </li> <li> <p>When following Step 3: Migrate the IS Components in the Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0 documentation (<code>Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0.md</code>) use the migration tool provided by the WSO2 team (<code>wso2is-migration-1.1.163.zip</code>).</p> </li> <li> <p>Then run the migration tool at the step 8 after following the rest of the instructions.</p> </li> <li> <p>Following the Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0 documentation (<code>Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0.md</code>) with the above instructions, concludes the Identity Server migration.</p> </li> </ol> <p>Then start the API Manager migration.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-api-manager-4.0.0-to-4.2.0-and-identity-server-5.11.0-to-6.1.0/#upgrade-to-wso2-api-manager-420","title":"Upgrade to WSO2 API Manager 4.2.0","text":"<p>Follow the Upgrading API Manager from 4.0.0 to 4.2.0 documentation (<code>upgrading-from-400-to-420.md</code>) along with the following instructions to perform the API Manager migration.</p> <ol> <li> <p>When following step 1 in Step 1: Migrate the API Manager Configurations, make sure to point the datasources to the existing databases.</p> </li> <li> <p>When setting the <code>realm_manager</code>, set it as same as the datasource name of the user database of Open Banking (for example, by default it is <code>WSO2UM_DB</code>.)</p> </li> <li> <p>Skip step 3 under Step 1: Migrate the API Manager Configurations.</p> </li> <li> <p>Follow step 4 under Step 1: Migrate the API Manager Configurations if applicable.</p> </li> <li> <p>For the step 5 under Step 1: Migrate the API Manager Configurations use the relevant database scripts provided by the WSO2 team (<code>db-scripts/upgrading-from-400-to-420</code>).</p> </li> <li> <p>When following Step 2: Migrate the API Manager Resources in the above-mentioned documentation,</p> </li> <li> <p>Skip steps 2 and 3.</p> </li> <li>Follow the step 4 only if the secure vault is enabled.</li> <li>Skip step 5 if the setup does not have a secondary user store.</li> <li> <p>Skip step 6.</p> </li> <li> <p>Skip Step 3: Migrate the Identity Components.</p> </li> <li> <p>When migrating the API Manager components under Step 4: Migrate the API Manager Components, use the latest API Manager migration tool provided by the WSO2 team (<code>wso2am-migration-4.2.0.54.zip</code>).</p> </li> <li> <p>Before running the migration tool for APIM migration, make sure the Identity Server is up.</p> </li> <li> <p>Skip the instructions inside the Note under Step 6: Restart the API Manager Server.</p> </li> <li> <p>Restart the WSO2 API Manager Server.</p> </li> <li> <p>Following the Upgrading API Manager from 4.0.0 to 4.2.0 documentation (<code>upgrading-from-400-to-420.md</code>) with the above instructions, concludes the API Manager migration.</p> </li> <li> <p>This concludes the migration process.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-3.2.0/","title":"Upgrade to WSO2 API Manager 3.2.0","text":"<p>In this step you will be migrating your existing WSO2 API Manager 3.1.0 to 3.2.0.</p> <p>This section instructs you on how to upgrade the API Manager to 3.2.0, which is a prerequisite for upgrading to API Manager 4.0.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-3.2.0/#prerequisites","title":"Prerequisites","text":"<p>WSO2 API Manager 3.1.0 is a base product of WSO2 Open Banking 2.0.0. Therefore, we assume you already have WSO2 API Manager 3.1.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-3.2.0/#upgrade-wso2-is-as-key-manager-5100-for-api-manager-320","title":"Upgrade WSO2 IS as Key Manager 5.10.0 for API Manager 3.2.0","text":"<p>Follow the Upgrading WSO2 IS as Key Manager 5.10.0 for API Manager 3.2.0 documentation (<code>Upgrade IS as Key Manager 5.10.0 to IS 5.10.0 for APIM 3.1.0 to 3.2.0.md</code>) provided by the WSO2 team and upgrade IS as Key Manager 5.10.0 for API Manager 3.2.0. </p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-3.2.0/#upgrade-wso2-api-manager-from-310-to-320","title":"Upgrade WSO2 API Manager from 3.1.0 to 3.2.0","text":"<p>Follow the Upgrading WSO2 API Manager from 3.1.0 to 3.2.0 documentation (<code>upgrading-from-310-to-320.md</code>) provided by the WSO2 team and upgrade WSO2 API Manager from 3.1.0 to 3.2.0.</p> <p>Note</p> <p>In the above documentation, under Step 1 - Migrate the API Manager configurations, skip steps 6,7,8, and 9 as we are only trying to migrate the databases at this level.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/","title":"Upgrade to WSO2 API Manager 4.0.0","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/#prerequisites","title":"Prerequisites","text":"<p>We assume you already upgraded your API Manager to 3.2.0 as instructed previously on the Upgrading WSO2 API Manager from 3.1.0 to 3.2.0 (<code>upgrade-to-wso2-api-manager-3.2.0.md</code>) documentation.</p> <ol> <li> <p>Download and install the WSO2 API Manager 4.0.0 distribution from here. </p> </li> <li> <p>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;APIM_HOME&gt;</code>.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/#upgrade-to-wso2-api-manager-400_1","title":"Upgrade to WSO2 API Manager 4.0.0","text":"<p>Before you begin:</p> <p>Once the Identity Server 5.11.0 is configured as the Resident Key Manager, start the Identity Server 5.11.0.</p> <ol> <li> <p>Start the WSO2 API Manager 4.0.0 server and create a Custom Key Manager by following the    Configuring IS as Key Manager documentation.</p> </li> <li> <p>Do not copy any other Key Manager specific configurations from the previous API Manager version to the latest one that points to the Identity Server.</p> </li> <li> <p>Follow the Upgrading WSO2 API Manager from 3.2.0 to 4.0.0 (<code>upgrading-from-320-to-400.md</code>) documentation provided by the WSO2 team and upgrade your API Manager from 3.2.0 to 4.0.0. Follow the entire documentation carefully and make sure to perform the necessary steps mentioned below:  </p> <p>Note</p> <p>When following the above-mentioned documentation:</p> <ol> <li> <p>You can skip the steps 1,2, and 3 under Step 1 - Migrate the API Manager configurations.</p> </li> <li> <p>Modify the following configurations in the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file before starting the migration.</p> <pre><code>[[apim.gateway.environment]]\nname = \"Production and Sandbox\"\n[apim.sync_runtime_artifacts.gateway]\ngateway_labels =[\"Production and Sandbox\", \"Default\"]\n</code></pre> </li> <li> <p>In Step 2 - Upgrade API Manager to 4.0.0, skip the steps 3 and 5.</p> </li> </ol> </li> <li> <p>Start the API Manager server.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/#replace-custom-mediation-policies","title":"Replace Custom Mediation Policies","text":"<p>This section explains how to replace the Custom Mediation Policy of each API with the latest Mediation Policy.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Click the Edit button under Request &gt; Message Mediation and remove the existing Custom Mediation Policy.</li> <li>Upload the relevant insequence file from the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources/apis</code> directory  and click Select.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all APIs. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/#enable-schema-validation","title":"Enable Schema Validation","text":"<p>This section explains how to enable Schema Validation for APIs.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Enable Schema Validation.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all APIs except for the Dynamic Client Registration(DCR) API. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/#update-workflow-extensions","title":"Update Workflow-Extensions","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Resources &gt; Browse in the left pane.  </li> <li>Locate the <code>/_system/governance/apimgt/applicationdata/workflow-extensions.xml</code> file. </li> <li>Get the <code>workflow.txt</code> provided by the WSO2 team.</li> <li>Click Edit as text and replace the content with the content you received. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/#update-api-life-cycle","title":"Update API Life Cycle","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Extensions &gt; Lifecycles.  </li> <li>Click the View/Edit button for APILifeCycle. </li> <li>Get the <code>lifecycle.txt</code> provided by the WSO2 team.</li> <li>Replace the Lifecycle Source with the content you received.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-api-manager-4.0.0/#update-identity-provider-entity-id","title":"Update Identity Provider Entity ID","text":"<ol> <li>Go to Identity Server Management Console <code>https://&lt;IS_HOST&gt;:9446/carbon</code> and log in as the admin user.</li> <li>Select Identity Providers &gt; Resident. </li> <li>Go to Inbound Authentication Configuration &gt; OAuth2/OpenID Connect Configuration.</li> <li> <p>Update the Identity Provider Entity ID to the following:      <pre><code>https://&lt;IS_HOST&gt;:9446/oauth2/token\n</code></pre></p> <p></p> </li> <li> <p>Click Update.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-identity-server-5.11.0/","title":"Upgrade to WSO2 Identity Sever 5.11.0","text":""},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-identity-server-5.11.0/#prerequisites","title":"Prerequisites","text":"<p>WSO2 Identity Sever 5.10.0 is a base product of WSO2 Open Banking 2.0.0. Therefore, we assume you already have WSO2 Identity Sever 5.10.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-identity-server-5.11.0/#set-up-is-5110-as-key-manager-for-api-manager-400","title":"Set up IS 5.11.0 as Key Manager for API Manager 4.0.0","text":"<ol> <li> <p>Download and install the WSO2 Identity Server 5.11.0 distribution from here.</p> </li> <li> <p>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;IS_HOME&gt;</code>.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-to-wso2-identity-server-5.11.0/#migrate-to-wso2-identity-sever-5110","title":"Migrate to WSO2 Identity Sever 5.11.0","text":"<ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager to 5.11.0 documentation (<code>Upgrade IS as Key Manager 5.10.0 to IS 5.11.0 for APIM 3.2.0 to 4.0.0.md</code>) provided by the WSO2 team.</p> </li> <li> <p>Follow Step B - Migrate IS from 5.10.0 to 5.11.0 under Step 1 - Upgrade IS as Key Manager 5.10.0 to IS 5.11.0 in the above-mentioned document and upgrade your WSO2 Identity Server.</p> </li> <li> <p>Get the Upgrading WSO2 Identity Server to 5.11.0 documentation (<code>migrating-to-5110.md</code>) provided by the WSO2 team.</p> </li> <li> <p>Follow WSO2 Identity Server Migrating to 5.11.0 to upgrade your current IS as KM 5.10.0 distribution to IS 5.11.0 by following the provided documentation.</p> <p>Note</p> <p>In the above documentation, under Steps to migrate to 5.11.0,</p> <ol> <li>Skip steps 1,2, and 4.</li> <li> <p>Do not copy the API Manager - Key Manager specific configurations from        <code>&lt;OLD_IS_KM_HOME&gt;/repository/conf/api-manager.xml</code> of the previous IS as KM version to IS 5.11.0.</p> </li> <li> <p>Before executing the IS migration client according to Step 10, remove the following entries from            <code>migration-config.yaml</code> in the migration-resources directory:</p> <pre><code>- version: \"5.10.0\"\nmigratorConfigs:\n-\nname: \"MigrationValidator\"\norder: 2\n-\nname: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n-\nname: \"TenantPortalMigrator\"\norder: 11\n</code></pre> </li> <li> <p>Follow the step 11, only if you have enabled Symmetric Key Encryption in the previous IS as KM setup. If not, skip step 11.</p> </li> </ol> <p>Warning</p> <p>Based on the number of records in the identity tables, the identity component migration will take a considerable time.      Do not stop the server during the migration process. Wait until the migration process finishes completely and the server gets started.</p> </li> <li> <p>After successfully completing the migration, stop the server and remove the following directories and files.</p> <ul> <li>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file.</li> <li>Remove the <code>&lt;IS_HOME&gt;/migration-resources</code> directory.</li> </ul> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-introduction/","title":"Upgrade WSO2 Open Banking from 2.0.0 to 3.0.0 - Introduction","text":"<p>WSO2 Open Banking Accelerator runs on top of WSO2 Identity Server and WSO2 API Manager which are referred to as base products.</p> <p>Given below is the product compatibility matrix for WSO2 Open Banking. This matrix outlines the compatibility between the versions of WSO2 Open Banking solutions involved in this migration and the latest version of the base products they support.</p> WSO2 Open Banking Version Supported WSO2 Identity Server Version Supported WSO2 API Manager Version 2.0.0 5.10.0 3.1.0 3.0.0 6.1.0 4.2.0 <p>The following diagram explains the flow of upgrading the WSO2 Open Banking solution:</p> <p></p> <p>Step 1: Upgrade APIM 3.1.0 to APIM 3.2.0</p> <p>Step 2: Upgrade IS 5.10.0 to IS 5.11.0</p> <p>Step 3: Upgrade APIM 3.2.0 to APIM 4.0.0</p> <p>Step 4: Upgrade IS 5.11.0 to IS 6.1.0</p> <p>Step 5: Upgrade APIM 4.0.0 to APIM 4.2.0</p> <p>Step 6: Migrate Open Banking DB This is the step where you migrate Open Banking data. This involves moving the data from your existing Open Banking platform to the new WSO2 Open Banking platform. This includes data such as customer accounts, transactions, and permissions.</p> <p>Step 7: Migrate Reporting Data Migrating Reporting Data involves moving the data from your existing reporting system to the new WSO2 Open Banking platform. This includes data such as reports, dashboards, and visualizations.</p> <p>Follow the documents below in the given order:</p> <ol> <li>Upgrading to WSO2 API Manager 3.2.0 (<code>upgrade-to-wso2-api-manager-3.2.0.md</code>)</li> <li>Upgrading to WSO2 Identity Sever 5.11.0 (<code>upgrade-to-wso2-identity-server-5.11.0.md</code>)</li> <li>Upgrading API Manager 3.2.0 to 4.0.0 (<code>upgrade-to-wso2-api-manager-4.0.0.md</code>)</li> <li>Upgrade WSO2 API Manager from 4.0.0 to 4.2.0 and WSO2 Identity Server from 5.11.0 to 6.1.0 (<code>upgrade-api-manager-4.0.0-to-4.2.0-and-identity-server-5.11.0-to-6.1.0.md</code>)</li> <li>Migrating Open Banking Data (<code>open-banking-data-migration.md</code>)</li> <li>Migrating Reporting Data (<code>reporting-data-migration.md</code>)</li> <li>Configuring After Migration (<code>modifications-after-migration.md</code>)</li> </ol> <p>This section guides on how to upgrade your WSO2 Open Banking 2.0.0 setup to WSO2 Open Banking 3.0.0 (Accelerator Model). </p> <p>Note</p> <p>WSO2 Open Banking 2.0.0 is based on the WSO2 API Manager 3.1.0 and WSO2 Identity Server 5.10.0 products.</p> <p>Tip</p> <ul> <li>The DCR applications created in Open Banking 2.0.0 should not contain a SoftwareId/IssuerName that includes an      underscore \"_\".</li> <li>If you have such DCR applications, before the migration process, rename the Service Provider Name      of each DCR application's Service Provider application by logging into <code>https://&lt;IS_HOST&gt;:9446/carbon</code>.</li> <li> <p>In your Open Banking 2.0.0 database, check the column size of the following:</p> Database Table Column Data type Size <code>openbank_apimgtdb</code> <code>SP_METADATA</code> <code>VALUE</code> <code>VARCHAR</code> 4096 <ul> <li>If the column size is less than 4096, execute the following command against the <code>SP_METADATA</code> table:<pre><code>``` \nALTER TABLE SP_METADATA MODIFY VALUE VARCHAR(4096); \n```\n</code></pre> </li> </ul> </li> </ul> <p>Next, refer to the Upgrading to WSO2 API Manager 3.2.0 (<code>upgrade-to-wso2-api-manager-3.2.0.md</code>) documentation.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/","title":"Upgrading WSO2 Open Banking from 2.0.0 to 3.0.0","text":"<p>This documentation guides on how to upgrade your WSO2 Open Banking 2.0.0 for the UK setup to WSO2 Open Banking 3.0.0 (Accelerator Model) UK Toolkit 1.0.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#overview","title":"Overview","text":"<p>WSO2 Open Banking solution runs on top of WSO2 Identity Server and WSO2 API Manager which are referred to as base products.</p> <p>Given below is the product compatibility matrix for the WSO2 Open Banking solution. This matrix outlines the compatibility between the versions of WSO2 Open Banking solutions involved in this migration and the latest version of the base products they support.</p> WSO2 Open Banking Version Supported WSO2 Identity Server Version Supported WSO2 API Manager Version 2.0.0 5.10.0 3.1.0 3.0.0 6.1.0 (Latest) 4.2.0 (Latest)"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#prerequisites","title":"Prerequisites","text":"<p>We assume that you already have an existing WSO2 Open Banking 2.0.0 solution for the UK. WSO2 API Manager 3.1.0 and WSO2 Identity Server 5.10.0 are the base products required for WSO2 Open Banking 2.0.0. Therefore, we assume you already have WSO2 API Manager 3.1.0 and WSO2 Identity Server 5.10.0.</p> <p>Important:</p> <ul> <li> <p>In order to upgrade your existing Open Banking solution to the latest version, you need to upgrade the base products (WSO2 Identity Server and WSO2 API Manager) to the latest supported version as well.</p> </li> <li> <p>Upgrading the base products involves step-by-step migrations, and therefore it requires several intermediate steps.</p> </li> <li>In addition to the base product migration, you need to configure WSO2 Identity Server as Key Manager. The Key Manager handles all clients, security, and access token-related operations. So you need to configure WSO2 Identity Server as Key Manager in each WSO2 API Manager migration.</li> </ul> <p>The following diagram explains the flow of upgrading the WSO2 Open Banking solution:</p> <p></p> <p>Given below are the steps you need to follow to upgrade your WSO2 Open Banking 2.0.0 for the UK setup to WSO2 Open Banking 3.0.0 - UK Toolkit 1.0.0:</p> <ol> <li> <p>Upgrading WSO2 API Manager from 3.1.0 to 3.2.0 </p> <ol> <li>Setup IS as Key Manager 5.10.0 with API Manager 3.2.0</li> <li>Upgrade API Manager from 3.1.0 to 3.2.0</li> </ol> </li> <li> <p>Upgrading WSO2 Identity Sever from 5.10.0 to 5.11.0 </p> <ol> <li>Upgrade IS as Key Manager 5.10.0 to IS 5.11.0</li> <li>Upgrade WSO2 Identity Sever from 5.10.0 to 5.11.0</li> </ol> </li> <li> <p>Upgrading WSO2 API Manager from 3.2.0 to 4.0.0 </p> <ol> <li>Configuring IS as Key Manager</li> <li>Upgrading API Manager from 3.2.0 to 4.0.0</li> </ol> </li> <li> <p>Upgrading WSO2 API Manager from 4.0.0 to 4.2.0 and WSO2 Identity Server from 5.11.0 to 6.1.0 </p> <ol> <li>Prepare for Migration</li> <li>Upgrading WSO2 Identity Server from 5.11.0 to 6.1.0</li> <li>Upgrading WSO2 API Manager from 4.0.0 to 4.2.0</li> </ol> </li> <li> <p>Migrating Open Banking Data</p> </li> </ol> <p>This is the step where you migrate Open Banking data. This involves moving the data from your existing Open Banking platform to the new WSO2 Open Banking platform. This includes data such as customer accounts, transactions, and permissions.</p> <ol> <li>Migrating Reporting Data </li> </ol> <p>Migrating Reporting Data involves moving the data from your existing reporting system to the new WSO2 Open Banking platform. This includes data such as reports, dashboards, and visualizations.</p> <ol> <li>Configuring After Migration</li> </ol> <p>This section explains the modifications that need to be performed after the upgrade/migration process.</p> <p>Before you begin:</p> <p>Make sure the following:</p> <ul> <li> <p>The DCR applications created in Open Banking 2.0.0 should not contain a SoftwareId/IssuerName that includes an underscore \"_\".</p> </li> <li> <p>If you have such DCR applications, before the migration process, rename the Service Provider Name of each DCR application's Service Provider application by logging into <code>https://&lt;IS_HOST&gt;:9446/carbon</code>.</p> </li> <li> <p>In your Open Banking 2.0.0 database, check the column size of the following:</p> Database Table Column Data type Size <code>openbank_apimgtdb</code> <code>SP_METADATA</code> <code>VALUE</code> <code>VARCHAR</code> 4096 <ul> <li>If the column size is less than 4096, execute the following command against the <code>SP_METADATA</code> table:<pre><code>``` \nALTER TABLE SP_METADATA MODIFY VALUE VARCHAR(4096); \n```\n</code></pre> </li> </ul> </li> </ul>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#1-upgrading-from-wso2-api-manager-310-to-wso2-api-manager-320","title":"1. Upgrading from WSO2 API Manager 3.1.0 to WSO2 API Manager 3.2.0","text":"<p>This section instructs you on how to migrate WSO2 API Manager from 3.1.0 to WSO2 API Manager 3.2.0, which is a prerequisite for upgrading to the latest API Manager version.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#prerequisites_1","title":"Prerequisites","text":"<p>WSO2 API Manager 3.1.0 is a base product of WSO2 Open Banking 2.0.0. Therefore, we assume you already have WSO2 API Manager 3.1.0.</p> <p>Upgrading WSO2 API Manager from 3.1.0 to 3.2.0 consists of 2 steps:</p> <p>a. Upgrade WSO2 IS as Key Manager 5.10.0 for API Manager 3.2.0</p> <p>b. Upgrade WSO2 API Manager from 3.1.0 to 3.2.0</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#a-upgrade-wso2-is-as-key-manager-5100-for-api-manager-320","title":"a. Upgrade WSO2 IS as Key Manager 5.10.0 for API Manager 3.2.0","text":"<p>Follow the Upgrading WSO2 IS as Key Manager 5.10.0 for API Manager 3.2.0 documentation (<code>Upgrade IS as Key Manager 5.10.0 to IS 5.10.0 for APIM 3.1.0 to 3.2.0.md</code>) provided by the WSO2 team and upgrade IS as Key Manager 5.10.0 for API Manager 3.2.0. Follow the entire documentation carefully.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#b-upgrade-wso2-api-manager-from-310-to-320","title":"b. Upgrade WSO2 API Manager from 3.1.0 to 3.2.0","text":"<p>Follow the Upgrading WSO2 API Manager from 3.1.0 to 3.2.0 documentation (<code>upgrading-from-310-to-320.md</code>) provided by the WSO2 team and upgrade WSO2 API Manager from 3.1.0 to 3.2.0. Follow the entire documentation carefully and make sure to perform the necessary custom steps mentioned below:</p> <p>Note</p> <p>In the above documentation, under Step 1 - Migrate the API Manager configurations, skip steps 6,7,8, and 9 as we are only trying to migrate the databases at this level.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#2-upgrading-from-wso2-identity-sever-5100-to-wso2-identity-sever-5110","title":"2. Upgrading from WSO2 Identity Sever 5.10.0 to WSO2 Identity Sever 5.11.0","text":"<p>This section instructs you on how to migrate WSO2 Identity Sever 5.10.0 to WSO2 Identity Sever 5.11.0, which is a prerequisite for upgrading to the latest Identity Sever version.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#prerequisites_2","title":"Prerequisites","text":"<p>WSO2 Identity Sever 5.10.0 is a base product of WSO2 Open Banking 2.0.0. Therefore, we assume you already have WSO2 Identity Sever 5.10.0.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#set-up-is-5110-as-key-manager-for-api-manager-400","title":"Set up IS 5.11.0 as Key Manager for API Manager 4.0.0","text":"<ol> <li> <p>Download and install the WSO2 Identity Server 5.11.0 distribution from here.</p> </li> <li> <p>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;IS_HOME&gt;</code>.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#migrate-to-wso2-identity-sever-5110","title":"Migrate to WSO2 Identity Sever 5.11.0","text":"<ol> <li> <p>Get the Upgrading WSO2 IS as Key Manager to 5.11.0 documentation (<code>Upgrade IS as Key Manager 5.10.0 to IS 5.11.0 for APIM 3.2.0 to 4.0.0.md</code>) provided by the WSO2 team.</p> </li> <li> <p>Follow Step B - Migrate IS from 5.10.0 to 5.11.0 under Step 1 - Upgrade IS as Key Manager 5.10.0 to IS 5.11.0 in the above-mentioned document and upgrade your WSO2 Identity Server.</p> </li> <li> <p>Get the Upgrading WSO2 Identity Server to 5.11.0 documentation (<code>migrating-to-5110.md</code>) provided by the WSO2 team.</p> </li> <li> <p>Follow WSO2 Identity Server Migrating to 5.11.0 to upgrade your current IS as KM 5.10.0 distribution to IS 5.11.0 by following the provided documentation.</p> </li> </ol> <p>Note</p> <p>In the above documentation, under Steps to migrate to 5.11.0,</p> <ol> <li>Skip steps 1,2, and 4.</li> <li> <p>Do not copy the API Manager - Key Manager specific configurations from           &gt;       <code>&lt;OLD_IS_KM_HOME&gt;/repository/conf/api-manager.xml</code> of the previous IS as KM version to IS 5.11.0.</p> </li> <li> <p>Before executing the IS migration client according to Step 10, remove the following entries from           <code>migration-config.yaml</code> in the migration-resources directory:</p> <pre><code>- version: \"5.10.0\"\nmigratorConfigs:\n-\nname: \"MigrationValidator\"\norder: 2\n-\nname: \"SchemaMigrator\"\norder: 5\nparameters:\nlocation: \"step2\"\nschema: \"identity\"\n-\nname: \"TenantPortalMigrator\"\norder: 11\n</code></pre> </li> <li> <p>Follow the step 11, only if you have enabled Symmetric Key Encryption in the previous IS as KM setup. If not, skip step 11.</p> </li> </ol> <p>Warning</p> <p>Based on the number of records in the identity tables, the identity component migration will take a considerable time.   Do not stop the server during the migration process. Wait until the migration process finishes completely and the server gets started.</p> <ol> <li>After successfully completing the migration, stop the server and remove the following directories and files.<ul> <li>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/org.wso2.carbon.is.migration-x.x.x.jar</code> file.</li> <li>Remove the <code>&lt;IS_HOME&gt;/migration-resources</code> directory.</li> </ul> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#3-upgrading-from-wso2-api-manager-320-to-wso2-api-manager-400","title":"3. Upgrading from WSO2 API Manager 3.2.0 to WSO2 API Manager 4.0.0","text":"<p>This section instructs you on how to migrate WSO2 API Manager 3.2.0 to WSO2 API Manager 4.0.0, which is a prerequisite for upgrading to the latest Identity Sever version.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#prerequisites_3","title":"Prerequisites","text":"<p>We assume you have already upgraded your API Manager to 3.2.0 as instructed in a previous step.</p> <ol> <li> <p>Download and install the WSO2 API Manager 4.0.0 distribution from here.</p> </li> <li> <p>Extract the downloaded archive file. This document refers to the root folder of the extracted file as <code>&lt;APIM_HOME&gt;</code>.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#upgrade-to-wso2-api-manager-400","title":"Upgrade to WSO2 API Manager 4.0.0","text":"<p>Before you begin:</p> <p>Once the Identity Server 5.11.0 is configured as the Resident Key Manager, start the Identity Server 5.11.0.</p> <ol> <li> <p>Start the WSO2 API Manager 4.0.0 server and create a Custom Key Manager by following the    Configuring IS as Key Manager documentation.</p> </li> <li> <p>Do not copy any other Key Manager specific configurations from the previous API Manager version to the latest one that points to the Identity Server.</p> </li> <li> <p>Follow the Upgrading WSO2 API Manager from 3.2.0 to 4.0.0 (<code>upgrading-from-320-to-400.md</code>) documentation provided by the WSO2 team and upgrade your API Manager from 3.2.0 to 4.0.0. Follow the entire documentation carefully and make sure to perform the necessary steps mentioned below:</p> </li> </ol> <p>Note</p> <p>When following the above-mentioned documentation:</p> <ol> <li> <p>You can skip the steps 1,2, and 3 under Step 1 - Migrate the API Manager configurations.</p> </li> <li> <p>Modify the following configurations in the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file before starting the migration.</p> <pre><code>[[apim.gateway.environment]]\nname = \"Production and Sandbox\"\n[apim.sync_runtime_artifacts.gateway]\ngateway_labels =[\"Production and Sandbox\", \"Default\"]\n</code></pre> </li> <li> <p>In Step 2 - Upgrade API Manager to 4.0.0, skip the steps 3 and 5.</p> </li> </ol> <ol> <li>Start the API Manager server.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#replace-custom-mediation-policies","title":"Replace Custom Mediation Policies","text":"<p>This section explains how to replace the Custom Mediation Policy of each API with the latest Mediation Policy.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Click the Edit button under Request &gt; Message Mediation and remove the existing Custom Mediation Policy.</li> <li>Upload the relevant insequence file from the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources/apis</code> directory    and click Select.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all APIs.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#enable-schema-validation","title":"Enable Schema Validation","text":"<p>This section explains how to enable Schema Validation for APIs.</p> <ol> <li>Go to the API Publisher at <code>https://&lt;APIM_HOST&gt;:9443/publisher</code>.</li> <li>Select the respective API.</li> <li>Go to API Configurations &gt; Runtime.</li> <li>Enable Schema Validation.</li> <li>Scroll down and click SAVE.</li> <li>Go to Deployments using the left menu pane.</li> <li>Click Deploy New Version.</li> <li>Select the API Gateway type and Deploy.</li> <li>Repeat these steps for all APIs except for the Dynamic Client Registration(DCR) API.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#update-workflow-extensions","title":"Update Workflow-Extensions","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Resources &gt; Browse in the left pane.  </li> <li>Locate the <code>/_system/governance/apimgt/applicationdata/workflow-extensions.xml</code> file. </li> <li>Get the <code>workflow.txt</code> provided by the WSO2 team.</li> <li>Click Edit as text and replace the content with the content you received. </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#update-api-life-cycle","title":"Update API Life Cycle","text":"<ol> <li>Go to the Management Console <code>https://&lt;APIM_HOST&gt;:9443/carbon</code> and log in as the admin user. </li> <li>Select Extensions &gt; Lifecycles.  </li> <li>Click the View/Edit button for APILifeCycle. </li> <li>Get the <code>lifecycle.txt</code> provided by the WSO2 team.</li> <li>Replace the Lifecycle Source with the content you received.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#update-identity-provider-entity-id","title":"Update Identity Provider Entity ID","text":"<ol> <li>Go to Identity Server Management Console <code>https://&lt;IS_HOST&gt;:9446/carbon</code> and log in as the admin user.</li> <li>Select Identity Providers &gt; Resident. </li> <li>Go to Inbound Authentication Configuration &gt; OAuth2/OpenID Connect Configuration.</li> <li>Update the Identity Provider Entity ID to the following:     <pre><code>https://&lt;IS_HOST&gt;:9446/oauth2/token\n</code></pre></li> </ol> <ol> <li>Click Update.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#4-upgrading-from-wso2-api-manager-400-to-wso2-api-manager-420-and-from-wso2-identity-server-5110-to-wso2-identity-server-610","title":"4. Upgrading from WSO2 API Manager 4.0.0 to WSO2 API Manager 4.2.0 and from WSO2 Identity Server 5.11.0 to WSO2 Identity Server 6.1.0","text":"<p>WSO2 Open Banking 3.0.0 - UK Toolkit 1.0.0 runs on top of WSO2 API Manager 4.2.0 and WSO2 Identity Server 6.1.0. Therefore, you need to upgrade your API Manager and Identity Server to the above-mentioned versions in order to migrate your Open Banking Solution to the latest version.</p> <p>This section instructs you on how to migrate, - WSO2 API Manager 4.0.0 to WSO2 API Manager 4.2.0 - WSO2 Identity Server 5.11.0 to WSO2 Identity Server 6.1.0</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#prerequisites_4","title":"Prerequisites","text":"<p>Up to this point, you have already migrated to WSO2 API Manager 4.0.0 and WSO2 Identity Server to 5.11.0 as instructed in the previous steps.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#prepare-for-migration","title":"Prepare for Migration","text":"<p>In the following section, you will be setting up Open Banking Accelerator and UK Toolkit for Identity Server and API Manager. </p> <ol> <li> <p>Download WSO2 Identity Server 6.1.0 from here and extract the folder. This extracted folder will be referred to as <code>&lt;IS_HOME&gt;</code> in this document.</p> </li> <li> <p>Download WSO2 API Manager 4.2.0 from here and extract the folder. This extracted folder will be referred to as <code>&lt;APIM_HOME&gt;</code> in this document.</p> </li> <li> <p>Get WSO2 Open Banking Accelerator 3.0.0 provided by the WSO2 team.</p> </li> <li> <p>Extract the WSO2 Open Banking Accelerator zip files. Get the following accelerators and extract them.</p> <ul> <li><code>wso2-obiam-accelerator-3.0.0</code></li> <li><code>wso2-obam-accelerator-3.0.0</code></li> </ul> </li> <li> <p>Get WSO2 Open Banking UK Toolkit 1.0.0 provided by the WSO2 team. Get the following toolkits and extract them.</p> <ul> <li><code>wso2-obiam-toolkit-uk-1.0.0</code></li> <li><code>wso2-obam-toolkit-uk-1.0.0</code></li> </ul> </li> <li> <p>This document uses the following placeholders to refer to the following products:</p> </li> </ol> Product Placeholder WSO2 Identity Server 6.1.0 <code>&lt;IS_HOME&gt;</code> WSO2 API Manager 4.2.0 <code>&lt;APIM_HOME&gt;</code> WSO2 Open Banking Identity Server Accelerator 3.0.0 <code>&lt;OB_IS_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking API Manager Accelerator 3.0.0 <code>&lt;OB_APIM_ACCELERATOR_HOME&gt;</code> WSO2 Open Banking Identity Server UK Toolkit 1.0.0 <code>&lt;OB_IS_TOOLKIT_HOME&gt;</code> WSO2 Open Banking API Manager UK Toolkit 1.0.0 <code>&lt;OB_APIM_TOOLKIT_HOME&gt;</code> <ol> <li> <p>Follow the Getting WSO2 Updates documentation and update the base products, accelerators, and toolkits using relevant scripts.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_ACCELERATOR_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_ACCELERATOR_HOME&gt;/bin</code> respectively to copy the Open Banking artifacts into the base product packs.</p> </li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li>Run the <code>merge.sh</code> script in <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/bin</code> and <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/bin</code> respectively:</li> </ol> <pre><code>./merge.sh\n</code></pre> <ol> <li> <p>Add the relevant modifications to the <code>wso2is-5.11.0-deployment-uk.toml</code> file in the <code>&lt;IS_HOME&gt;/&lt;OB_IS_TOOLKIT_HOME&gt;/repository/resources</code> directory.</p> </li> <li> <p>Rename <code>wso2is-5.11.0-deployment-uk.toml</code> to <code>deployment.toml</code>.</p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;IS_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;IS_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related    properties accordingly.</p> <ul> <li>When configuring database related properties, ensure that the datasources are pointing to the existing databases.</li> </ul> </li> <li> <p>Add the relevant modifications to the <code>wso2am-4.0.0-deployment-uk.toml</code> file in the <code>&lt;APIM_HOME&gt;/&lt;OB_APIM_TOOLKIT_HOME&gt;/repository/resources</code> directory.</p> </li> <li> <p>Rename <code>wso2am-4.0.0-deployment-uk.toml</code> to <code>deployment.toml</code>.</p> </li> <li> <p>Copy the <code>deployment.toml</code> file to the <code>&lt;APIM_HOME&gt;/repository/conf</code> directory to replace the existing file.</p> </li> <li> <p>Open the <code>&lt;APIM_HOME&gt;/repository/conf/deployment.toml</code> file, and configure the hostnames and databases related     properties accordingly.</p> <ul> <li>When configuring database related properties, ensure that the datasources are pointing to the existing databases.</li> </ul> </li> <li> <p>Add the following configurations needed for Identity Server 6.1.0 and API Manager 4.2.0.</p> <ol> <li> <p>Add the following configuration in IS 6.1.0 deployment.toml</p> <pre><code>[application_mgt]\nenable_role_validation = true\n</code></pre> </li> <li> <p>Add the following configuration in the <code>deployment.toml</code> file of API Manager 4.2.0 after the configurations done under <code>[open_banking.dcr]</code>. Note that the version must be specified as <code>v3</code> for API Manager 4.2.0.</p> <pre><code>[open_banking.dcr.apim_rest_endpoints]\napp_creation = \"api/am/devportal/v3/applications\"\nkey_generation = \"api/am/devportal/v3/applications/application-id/map-keys\"\napi_retrieve = \"api/am/devportal/v3/apis\"\napi_subscribe = \"api/am/devportal/v3/subscriptions/multiple\"\nretrieve_subscribe=\"api/am/devportal/v3/subscriptions\u201d\n</code></pre> </li> </ol> </li> <li> <p>Now all the Open Banking related artifacts and configurations are included in the base packs.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#upgrading-wso2-identity-server-from-5110-to-610","title":"Upgrading WSO2 Identity Server from 5.11.0 to 6.1.0","text":"<ol> <li>Follow the Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0 documentation (<code>Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0.md</code>) provided by the WSO2 team to upgrade WSO2 Identity Server from 5.11.0 to 6.1.0. Follow the entire documentation carefully and make sure to perform the necessary custom steps mentioned below:</li> </ol> <p>Note:</p> <p>Please note that the instructions provided in the above-mentioned document are also applicable for WSO2 Identity Server 6.1.0.</p> <ol> <li> <p>Follow the step 4 under Step A: Upgrade IS 5.11.0 to IS 6.0.0 &gt; Step 1: Migrate the IS configurations if applicable.</p> </li> <li> <p>Step 5 under Step A: Upgrade IS 5.11.0 to IS 6.0.0 &gt; Step 1: Migrate the IS configurations refers to the <code>Configurations</code> section of the Migrating to 6.1.0 documentation (<code>migrate-to-610.md</code>). Skip the step 3 of that section.</p> </li> <li> <p>Follow the steps mentioned in the <code>Note</code> provided under the step 5 under Step A: Upgrade IS 5.11.0 to IS 6.0.0 &gt; Step 1: Migrate the IS configurations.</p> </li> </ol> <p>Note:</p> <p>Here, we need to point the datasources to the existing databases.</p> <ol> <li> <p>When following the step 2 of the Step 2: Migrate the IS Resources in the above-mentioned document, use the IS connector related to the API Manager 4.2.0 provided by the WSO2 team (<code>wso2is-extensions-1.6.8.zip</code>). Please use the jar versions included in the provided <code>wso2is-extensions-1.6.8.zip</code> folder.</p> </li> <li> <p>For the step 4 under the Step 2: Migrate the IS Resources topic in the above-mentioned documentation please refer to the Migrating to 6.1.0 documentation (<code>migrate-to-610.md</code>). Follow all the steps in Step A: Upgrade IS 5.11.0 to IS 6.0.0/6.1.0 in order, skipping the steps mentioned below.</p> <ol> <li> <p>Skip the Components section under Step 1: Migrate artifacts and configs when following the above-mentioned documentation (<code>migrate-to-610.md</code>).</p> </li> <li> <p>When following the Resources section under Step 1: Migrate artifacts and configs, skip the configurations included inside the Note.</p> </li> <li> <p>Skip the Tenants section under Step 1: Migrate artifacts and configs.</p> </li> <li> <p>The User Stores section under Step 1: Migrate artifacts and configs is optional.</p> </li> <li> <p>Skip the Webapps section under Step 1: Migrate artifacts and configs.</p> </li> <li> <p>The instructions under the Configurations section is already followed at this point. Therefore, not need to follow that..</p> </li> </ol> </li> <li> <p>When following Step 3: Migrate the IS Components in the Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0 documentation (<code>Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0.md</code>) use the migration tool provided by the WSO2 team (<code>wso2is-migration-1.1.163.zip</code>).</p> </li> <li> <p>Then run the migration tool at the step 8 after following the rest of the instructions.</p> </li> <li> <p>Following the Step A: Upgrade IS 5.11.0 to IS 6.0.0/6.1.0 of the Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0 documentation (<code>Upgrade IS 5.11.0 to IS 6.0.0 for APIM 4.0.0 to 4.2.0.md</code>) with the above instructions, concludes the Identity Server migration.</p> </li> </ol> <p>Then start the API Manager migration.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#upgrading-wso2-api-manager-from-400-to-420","title":"Upgrading WSO2 API Manager from 4.0.0 to 4.2.0","text":"<p>Follow the Upgrading API Manager from 4.0.0 to 4.2.0 documentation (<code>upgrading-from-400-to-420.md</code>) provided by the WSO2 team to perform the API Manager migration. Follow the entire documentation carefully and make sure to perform the necessary custom steps mentioned below:</p> <ol> <li> <p>When following step 1 in Step 1: Migrate the API Manager Configurations, make sure to point the datasources to the existing databases.</p> </li> <li> <p>When setting the <code>realm_manager</code>, set it as same as the datasource name of the user database of Open Banking (for example, by default it is <code>WSO2UM_DB</code>.)</p> </li> <li> <p>Skip step 3 under Step 1: Migrate the API Manager Configurations.</p> </li> <li> <p>Follow step 4 under Step 1: Migrate the API Manager Configurations if applicable.</p> </li> <li> <p>For the step 5 under Step 1: Migrate the API Manager Configurations use the relevant database scripts provided by the WSO2 team (<code>db-scripts/upgrading-from-400-to-420</code>).</p> </li> <li> <p>When following Step 2: Migrate the API Manager Resources in the above-mentioned documentation,</p> <ul> <li>Skip steps 2 and 3.</li> <li>Follow the step 4 only if the secure vault is enabled.</li> <li>Skip step 5 if the setup does not have a secondary user store.</li> <li>Skip step 6.</li> </ul> </li> <li> <p>Skip Step 3: Migrate the Identity Components.</p> </li> <li> <p>When migrating the API Manager components under Step 4: Migrate the API Manager Components, use the latest API Manager migration tool provided by the WSO2 team (<code>wso2am-migration-4.2.0.54.zip</code>).</p> </li> <li> <p>Before running the migration tool for APIM migration, make sure the Identity Server is up.</p> </li> <li> <p>Skip the instructions inside the Note under Step 6: Restart the API Manager Server.</p> </li> <li> <p>Restart the WSO2 API Manager Server.</p> </li> <li> <p>Following the Upgrading API Manager from 4.0.0 to 4.2.0 documentation (<code>upgrading-from-400-to-420.md</code>) with the above instructions, concludes the API Manager migration.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#5-migrating-open-banking-data","title":"5. Migrating Open Banking Data","text":"<p>In this step, you will transfer your Open Banking data from your existing Open Banking 2.0.0 platform to the new WSO2 Open Banking 3.0.0 platform. This process includes moving important information such as customer accounts, transactions, and permissions.</p> <p>Before you begin:</p> <p>Back up all the databases before performing the migration.</p> <ol> <li>To create the required database tables:<ul> <li>Run the relevant SQL script in the <code>&lt;IS_HOME&gt;/dbscripts/open-banking/consent</code> directory against   the <code>openbank_openbankingdb</code> database.</li> </ul> </li> <li>Get the WSO2 Open Banking Migration Client Tool v1.0.0 (<code>wso2-openbanking-migration-1.0.0.zip</code>) provided by the WSO2 team.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources</code> directory to <code>&lt;IS_HOME&gt;</code>.</li> <li>Copy the <code>wso2-openbanking-migration-1.0.0/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file to <code>&lt;IS_HOME&gt;/repository/components/dropins</code>.</li> <li>Open the <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/migration-config.yaml</code> file and    set the <code>migrationEnable</code> property to <code>true</code>.</li> <li> <p>Start the Identity Server with the following command:</p> <pre><code>   sh wso2server.sh -DobMigrationSpec=UK\n</code></pre> </li> <li> <p>Stop the server.</p> </li> </ol> <p>Warning</p> <p>If a failure occurred during the migration process, delete all the migrated data from the tables that    were generated during migration.</p> <ol> <li>Remove the <code>&lt;IS_HOME&gt;/repository/components/dropins/com.wso2.openbanking.migration-1.0.0.jar</code> file.</li> <li>Remove the <code>&lt;IS_HOME&gt;/openbanking-migration-resources</code> directory.</li> <li>Start the Identity Server and API Manager servers.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#6-migrating-reporting-data","title":"6. Migrating Reporting Data","text":"<p>In this step, you will transfer data from your existing reporting system to the new WSO2 Open Banking platform. This will involve moving data related to reports, dashboards, and visualizations.</p> <p>Before you begin:</p> <p>Make sure you are running Data Reporting v3.1.5 in your WSO2 Open Banking Business Intelligence 2.0.0 setup.    If not, follow the Upgrading Data Reporting from v3.1.2 to v3.1.5 documentation and upgrade.</p> <ol> <li>Stop the WSO2 Open Banking Business Intelligence 2.0.0 server if it is running.</li> <li>Download and install the WSO2 Streaming Integrator 4.0.0 distribution from here.</li> <li>Backup your <code>openbank_ob_reporting_statsdb</code> and <code>openbank_ob_reporting_summarizeddb</code> databases of your WSO2 Open Banking Business Intelligence 2.0.0 setup.</li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#set-up-open-banking-accelerator-and-uk-toolkit-for-streaming-integrator","title":"Set up Open Banking Accelerator and UK Toolkit for Streaming Integrator","text":"<p>Set up WSO2 Open Banking Business Intelligence Accelerator and WSO2 Open Banking Business Intelligence UK Toolkit as follows:</p> <p>Note</p> <ul> <li><code>&lt;SI_HOME&gt;</code> refers to the root directory of WSO2 Streaming Integrator.</li> <li><code>&lt;OB_BI_ACCELERATOR_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence Accelerator.</li> <li><code>&lt;OB_BI_TOOLKIT_HOME&gt;</code> refers to the root directory of WSO2 Open Banking Business Intelligence UK Toolkit.</li> </ul> <ol> <li> <p>Copy and extract the <code>wso2-obbi-accelerator-3.0.0.zip</code> accelerator file in the root directory of WSO2 Streaming    Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/bin</code>:</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Copy and extract the <code>wso2-obbi-toolkit-uk-1.0.0.zip</code> toolkit file in the root directory of WSO2 Streaming    Integrator.</p> </li> <li> <p>Run the <code>merge.sh</code> script in <code>&lt;SI_HOME&gt;/&lt;OB_BI_TOOLKIT_HOME&gt;/bin</code>.</p> <pre><code>./merge.sh\n</code></pre> </li> <li> <p>Replace the existing <code>deployment.yaml</code> file in the Streaming Integrator as follows:</p> <ul> <li>Go to the <code>&lt;SI_HOME&gt;/&lt;OB_BI_ACCELERATOR_HOME&gt;/repository/resources</code> directory.</li> <li>Rename <code>wso2si-4.0.0-deployment.yaml</code> to <code>deployment.yaml</code>.</li> <li>Copy the <code>deployment.yaml</code> file to the <code>&lt;SI_HOME&gt;/conf/server</code> directory to replace the existing file.</li> </ul> </li> <li> <p>Open the <code>&lt;SI_HOME&gt;/conf/server/deployment.toml</code> file, and configure the hostnames and databases related    properties accordingly.</p> <ul> <li>When configuring database related properties, point to your existing Open Banking 2.0 databases.</li> </ul> </li> <li> <p>Exchange the public certificates between servers.</p> </li> </ol> <p>Follow the steps given below:</p> <p>a. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and export the public certificate of the Streaming    Integrator:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeySI.pem\n</code></pre> <p>b. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and import the public certificate of the    Streaming Integrator to the truststore of the Identity Server:</p> <pre><code>keytool -import -alias wso2 -file publickeySI.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>c. Go to the <code>&lt;IS_HOME&gt;/repository/resources/security</code> directory and export the public certificate of the    Identity Server:</p> <pre><code>keytool -export -alias wso2carbon -keystore wso2carbon.jks -file publickeyIAM.pem\n</code></pre> <p>d. Go to the <code>&lt;SI_HOME&gt;/resources/security</code> directory and import the public certificate of the Identity    Server to the truststore of the Streaming Integrator:</p> <pre><code>keytool -import -alias wso2 -file publickeyIAM.pem -keystore client-truststore.jks -storepass wso2carbon\n</code></pre> <p>e. Go to the <code>&lt;APIM_HOME&gt;/repository/resources/security</code> directory and repeat step b,c, and d.</p>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#upgrade-to-wso2-streaming-integrator-400","title":"Upgrade to WSO2 Streaming Integrator 4.0.0","text":"<ol> <li> <p>To migrate the reporting data and tables from the Open Banking 2.0 setup to 3.0.</p> <ul> <li>Go to the   <code>wso2-openbanking-migration-1.0.0/openbanking-migration-resources/reporting-migration-scripts/uk</code>   directory.</li> <li>Select the relevant SQL script and execute it against your <code>openbank_ob_reporting_statsdb</code> database.</li> </ul> </li> <li> <p>Start the Streaming Integrator server. For more information, see Try Out Data Publishing.</p> </li> </ol>"},{"location":"open-banking/migration-docs/ob-2.0.0-to-3.0.0/uk-toolkit-1.0.0/old-content-backup/upgrade-wso2-open-banking-2.0.0-to-3.0.0-uk-toolkit-1.0.0-v2/#7-configuring-after-migration","title":"7. Configuring After Migration","text":"<p>This section explains the modifications that need to be performed after the upgrade/migration process.</p> <ol> <li> <p>Stop the servers if running.</p> </li> <li> <p>Remove <code>com.wso2.openbanking.migration-1.0.0.jar</code> from the <code>IS_HOME&gt;/repository/components/dropins</code> folder.</p> </li> <li> <p>Remove <code>openbanking-migration-resources</code> folder from the <code>&lt;IS_HOME&gt;/repository/components/dropins</code> folder.</p> </li> </ol> <p>Note:</p> <p>Make sure to perform the following changes before starting with the Open Banking flows:    1. Redeploy the APIs with the relevant insequence files supported in WSO2 Open Banking 3.0.0 UK Toolkit 1.0.0.    2. Ensure the Production/Sandbox Endpoints of the published APIs are precise.</p> <ul> <li>Follow the Quick Start Guide - Tryout Flow of the UK Toolkit 1.0.0 documentation for a sample tryout flow of the Account and Transaction API.</li> <li>Navigate to the Tryout section in the UK Toolkit 1.0.0 documentation for more information on API flows.</li> </ul> <ol> <li> <p>Restart the WSO2 Identity Server.</p> </li> <li> <p>Restart the WSO2 API Manager Server. </p> </li> </ol>"}]}